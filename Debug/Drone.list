
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f778  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800f908  0800f908  00010908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100a0  080100a0  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  080100a0  080100a0  000110a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100a8  080100a8  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100a8  080100a8  000110a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100ac  080100ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080100b0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121d8  2**0
                  CONTENTS
 10 .bss          000005a8  200001d8  200001d8  000121d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000780  20000780  000121d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000186d3  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004619  00000000  00000000  0002a8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0002eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001186  00000000  00000000  00030600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002770d  00000000  00000000  00031786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3a2  00000000  00000000  00058e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcf0d  00000000  00000000  00076235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153142  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000717c  00000000  00000000  00153188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0015a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8f0 	.word	0x0800f8f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800f8f0 	.word	0x0800f8f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	619a      	str	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <AT24C08_Page_Write>:

#include "i2c.h"
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	121b      	asrs	r3, r3, #8
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000efc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f00:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <AT24C08_Page_Write+0x68>)
 8000f02:	f7ff ffd7 	bl	8000eb4 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2310      	movs	r3, #16
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <AT24C08_Page_Write+0x6c>)
 8000f1e:	f007 fc47 	bl	80087b0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f006 f81a 	bl	8006f5c <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <AT24C08_Page_Write+0x68>)
 8000f2e:	f7ff ffb3 	bl	8000e98 <LL_GPIO_SetOutputPin>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	20000514 	.word	0x20000514

08000f44 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	121b      	asrs	r3, r3, #8
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	2301      	movs	r3, #1
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2310      	movs	r3, #16
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <AT24C08_Page_Read+0x4c>)
 8000f84:	f007 fd0e 	bl	80089a4 <HAL_I2C_Mem_Read>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000514 	.word	0x20000514

08000f94 <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fa0:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fa4:	ed87 1a00 	vstr	s2, [r7]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 8000faa:	2345      	movs	r3, #69	@ 0x45
 8000fac:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000fae:	2350      	movs	r3, #80	@ 0x50
 8000fb0:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	76bb      	strb	r3, [r7, #26]
	parser.f = PGain;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000fba:	7d3b      	ldrb	r3, [r7, #20]
 8000fbc:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000fbe:	7d7b      	ldrb	r3, [r7, #21]
 8000fc0:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8000fc2:	7dbb      	ldrb	r3, [r7, #22]
 8000fc4:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8000fce:	7d3b      	ldrb	r3, [r7, #20]
 8000fd0:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8000fd2:	7d7b      	ldrb	r3, [r7, #21]
 8000fd4:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8000fd8:	7dbb      	ldrb	r3, [r7, #22]
 8000fda:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf_write[10] = parser.byte[3];
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	parser.f = DGain;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8000fe8:	7d3b      	ldrb	r3, [r7, #20]
 8000fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	buf_write[12] = parser.byte[1];
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	buf_write[13] = parser.byte[2];
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	buf_write[14] = parser.byte[3];
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	unsigned char chksum = 0xff;
 8001000:	23ff      	movs	r3, #255	@ 0xff
 8001002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0;i<15;i++){
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800100a:	e00c      	b.n	8001026 <EP_PIDGain_Write+0x92>
		chksum -= buf_write[i];
 800100c:	f107 0218 	add.w	r2, r7, #24
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0;i<15;i++){
 8001020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001022:	3301      	adds	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001028:	2b0e      	cmp	r3, #14
 800102a:	ddef      	ble.n	800100c <EP_PIDGain_Write+0x78>
	}

	buf_write[15] = chksum;
 800102c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	switch(id)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b05      	cmp	r3, #5
 8001038:	d83e      	bhi.n	80010b8 <EP_PIDGain_Write+0x124>
 800103a:	a201      	add	r2, pc, #4	@ (adr r2, 8001040 <EP_PIDGain_Write+0xac>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001059 	.word	0x08001059
 8001044:	08001069 	.word	0x08001069
 8001048:	08001079 	.word	0x08001079
 800104c:	08001089 	.word	0x08001089
 8001050:	08001099 	.word	0x08001099
 8001054:	080010a9 	.word	0x080010a9
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2210      	movs	r2, #16
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff37 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001066:	e027      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2210      	movs	r2, #16
 800106e:	4619      	mov	r1, r3
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff ff2f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001076:	e01f      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	2210      	movs	r2, #16
 800107e:	4619      	mov	r1, r3
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff27 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001086:	e017      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	2210      	movs	r2, #16
 800108e:	4619      	mov	r1, r3
 8001090:	2003      	movs	r0, #3
 8001092:	f7ff ff1f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 8001096:	e00f      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2210      	movs	r2, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	2004      	movs	r0, #4
 80010a2:	f7ff ff17 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 80010a6:	e007      	b.n	80010b8 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2210      	movs	r2, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	2005      	movs	r0, #5
 80010b2:	f7ff ff0f 	bl	8000ed4 <AT24C08_Page_Write>
		break;
 80010b6:	bf00      	nop
	}
}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	@ 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d83e      	bhi.n	8001154 <EP_PIDGain_Read+0x94>
 80010d6:	a201      	add	r2, pc, #4	@ (adr r2, 80010dc <EP_PIDGain_Read+0x1c>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	080010f5 	.word	0x080010f5
 80010e0:	08001105 	.word	0x08001105
 80010e4:	08001115 	.word	0x08001115
 80010e8:	08001125 	.word	0x08001125
 80010ec:	08001135 	.word	0x08001135
 80010f0:	08001145 	.word	0x08001145
	{
	case 0:
		AT24C08_Page_Read(0, &buf_read[0], 16);
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	2210      	movs	r2, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff21 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001102:	e027      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1, &buf_read[0], 16);
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	2210      	movs	r2, #16
 800110a:	4619      	mov	r1, r3
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff19 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001112:	e01f      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2, &buf_read[0], 16);
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	2210      	movs	r2, #16
 800111a:	4619      	mov	r1, r3
 800111c:	2002      	movs	r0, #2
 800111e:	f7ff ff11 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001122:	e017      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3, &buf_read[0], 16);
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	2210      	movs	r2, #16
 800112a:	4619      	mov	r1, r3
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff ff09 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001132:	e00f      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4, &buf_read[0], 16);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	2210      	movs	r2, #16
 800113a:	4619      	mov	r1, r3
 800113c:	2004      	movs	r0, #4
 800113e:	f7ff ff01 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001142:	e007      	b.n	8001154 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5, &buf_read[0], 16);
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	2210      	movs	r2, #16
 800114a:	4619      	mov	r1, r3
 800114c:	2005      	movs	r0, #5
 800114e:	f7ff fef9 	bl	8000f44 <AT24C08_Page_Read>
		break;
 8001152:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8001154:	23ff      	movs	r3, #255	@ 0xff
 8001156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0;i<15;i++){
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800115e:	e00c      	b.n	800117a <EP_PIDGain_Read+0xba>
		chksum -= buf_read[i];
 8001160:	f107 0218 	add.w	r2, r7, #24
 8001164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0;i<15;i++){
 8001174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001176:	3301      	adds	r3, #1
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117c:	2b0e      	cmp	r3, #14
 800117e:	ddef      	ble.n	8001160 <EP_PIDGain_Read+0xa0>
	}

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50){
 8001180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001184:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001188:	429a      	cmp	r2, r3
 800118a:	d12f      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
 800118c:	7e3b      	ldrb	r3, [r7, #24]
 800118e:	2b45      	cmp	r3, #69	@ 0x45
 8001190:	d12c      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
 8001192:	7e7b      	ldrb	r3, [r7, #25]
 8001194:	2b50      	cmp	r3, #80	@ 0x50
 8001196:	d129      	bne.n	80011ec <EP_PIDGain_Read+0x12c>
		parser.byte[0] = buf_read[3];
 8001198:	7efb      	ldrb	r3, [r7, #27]
 800119a:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 800119c:	7f3b      	ldrb	r3, [r7, #28]
 800119e:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80011a0:	7f7b      	ldrb	r3, [r7, #29]
 80011a2:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80011a4:	7fbb      	ldrb	r3, [r7, #30]
 80011a6:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80011b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011b6:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 80011b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011bc:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 80011be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80011c2:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 80011ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011ce:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 80011d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011d4:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 80011d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80011da:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 80011dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011e0:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	601a      	str	r2, [r3, #0]

		return 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e000      	b.n	80011ee <EP_PIDGain_Read+0x12e>
	}

	return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3730      	adds	r7, #48	@ 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop

080011f8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f023 0210 	bic.w	r2, r3, #16
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b02      	cmp	r3, #2
 8001276:	d101      	bne.n	800127c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	330c      	adds	r3, #12
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	330c      	adds	r3, #12
 80012b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	78fa      	ldrb	r2, [r7, #3]
 80012bc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_GPIO_IsInputPinSet>:
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4013      	ands	r3, r2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_GPIO_SetOutputPin>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	619a      	str	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_GPIO_ResetOutputPin>:
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4313      	orrs	r3, r2
 8001342:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40023800 	.word	0x40023800

08001360 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 800136a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136c:	4907      	ldr	r1, [pc, #28]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4013      	ands	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40023800 	.word	0x40023800

08001390 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	@ 0x40
 8001394:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2228      	movs	r2, #40	@ 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00b fdc2 	bl	800cf28 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80013b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013b8:	f7ff ffd2 	bl	8001360 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff ffb7 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff ffb4 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff ffb1 	bl	8001330 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80013ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d4:	2302      	movs	r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013e4:	2305      	movs	r3, #5
 80013e6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4841      	ldr	r0, [pc, #260]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80013ee:	f009 ff2e 	bl	800b24e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013fa:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001400:	2302      	movs	r3, #2
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800140e:	2318      	movs	r3, #24
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800141a:	230a      	movs	r3, #10
 800141c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4619      	mov	r1, r3
 8001424:	4834      	ldr	r0, [pc, #208]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001426:	f00a f8f0 	bl	800b60a <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800142a:	2100      	movs	r1, #0
 800142c:	4832      	ldr	r0, [pc, #200]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 800142e:	f7ff fef3 	bl	8001218 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001436:	4831      	ldr	r0, [pc, #196]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001438:	f7ff ff6a 	bl	8001310 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 800143c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001440:	482c      	ldr	r0, [pc, #176]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001442:	f7ff ff65 	bl	8001310 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800144a:	482d      	ldr	r0, [pc, #180]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 800144c:	f7ff ff60 	bl	8001310 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001454:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 800146c:	f009 feef 	bl	800b24e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 8001470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001474:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001476:	2301      	movs	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	481c      	ldr	r0, [pc, #112]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 800148c:	f009 fedf 	bl	800b24e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 8001490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001494:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001496:	2301      	movs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014ac:	f009 fecf 	bl	800b24e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80014b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80014be:	463b      	mov	r3, r7
 80014c0:	4619      	mov	r1, r3
 80014c2:	480e      	ldr	r0, [pc, #56]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014c4:	f009 fec3 	bl	800b24e <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80014c8:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <BNO080_GPIO_SPI_Initialization+0x168>)
 80014ca:	f7ff fe95 	bl	80011f8 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80014ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d2:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014d4:	f7ff ff0e 	bl	80012f4 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80014d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014de:	f7ff ff09 	bl	80012f4 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80014e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014e8:	f7ff ff04 	bl	80012f4 <LL_GPIO_SetOutputPin>
}
 80014ec:	bf00      	nop
 80014ee:	3740      	adds	r7, #64	@ 0x40
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40003800 	.word	0x40003800
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020000 	.word	0x40020000

08001504 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800150a:	f7ff ff41 	bl	8001390 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800150e:	482e      	ldr	r0, [pc, #184]	@ (80015c8 <BNO080_Initialization+0xc4>)
 8001510:	f00b fbc2 	bl	800cc98 <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001518:	482c      	ldr	r0, [pc, #176]	@ (80015cc <BNO080_Initialization+0xc8>)
 800151a:	f7ff feeb 	bl	80012f4 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800151e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001522:	482b      	ldr	r0, [pc, #172]	@ (80015d0 <BNO080_Initialization+0xcc>)
 8001524:	f7ff fee6 	bl	80012f4 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152c:	4829      	ldr	r0, [pc, #164]	@ (80015d4 <BNO080_Initialization+0xd0>)
 800152e:	f7ff feef 	bl	8001310 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001532:	20c8      	movs	r0, #200	@ 0xc8
 8001534:	f005 fd12 	bl	8006f5c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800153c:	4825      	ldr	r0, [pc, #148]	@ (80015d4 <BNO080_Initialization+0xd0>)
 800153e:	f7ff fed9 	bl	80012f4 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001542:	f000 fc43 	bl	8001dcc <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001546:	f000 fc41 	bl	8001dcc <BNO080_waitForSPI>
	BNO080_receivePacket();
 800154a:	f000 fc63 	bl	8001e14 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800154e:	f000 fc3d 	bl	8001dcc <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001552:	f000 fc5f 	bl	8001e14 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <BNO080_Initialization+0xd4>)
 8001558:	22f9      	movs	r2, #249	@ 0xf9
 800155a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <BNO080_Initialization+0xd4>)
 800155e:	2200      	movs	r2, #0
 8001560:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001562:	2102      	movs	r1, #2
 8001564:	2002      	movs	r0, #2
 8001566:	f000 fcc5 	bl	8001ef4 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800156a:	f000 fc2f 	bl	8001dcc <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800156e:	f000 fc51 	bl	8001e14 <BNO080_receivePacket>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d11b      	bne.n	80015b0 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <BNO080_Initialization+0xd8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <BNO080_Initialization+0xd8>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	461a      	mov	r2, r3
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <BNO080_Initialization+0xd8>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	4618      	mov	r0, r3
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <BNO080_Initialization+0xd8>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4603      	mov	r3, r0
 8001592:	4813      	ldr	r0, [pc, #76]	@ (80015e0 <BNO080_Initialization+0xdc>)
 8001594:	f00b fb80 	bl	800cc98 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <BNO080_Initialization+0xd4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2bf8      	cmp	r3, #248	@ 0xf8
 800159e:	d107      	bne.n	80015b0 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <BNO080_Initialization+0xd4>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	480f      	ldr	r0, [pc, #60]	@ (80015e4 <BNO080_Initialization+0xe0>)
 80015a8:	f00b fb76 	bl	800cc98 <iprintf>
			return (0);
 80015ac:	2300      	movs	r3, #0
 80015ae:	e007      	b.n	80015c0 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <BNO080_Initialization+0xd4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	22f8      	movs	r2, #248	@ 0xf8
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	@ (80015e8 <BNO080_Initialization+0xe4>)
 80015ba:	f00b fb6d 	bl	800cc98 <iprintf>
	return (1); //Something went wrong
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800f908 	.word	0x0800f908
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020800 	.word	0x40020800
 80015d8:	200001f8 	.word	0x200001f8
 80015dc:	200001f4 	.word	0x200001f4
 80015e0:	0800f91c 	.word	0x0800f91c
 80015e4:	0800f934 	.word	0x0800f934
 80015e8:	0800f954 	.word	0x0800f954

080015ec <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80015f6:	bf00      	nop
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <SPI2_SendByte+0x40>)
 80015fa:	f7ff fe33 	bl	8001264 <LL_SPI_IsActiveFlag_TXE>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f9      	beq.n	80015f8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4619      	mov	r1, r3
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <SPI2_SendByte+0x40>)
 800160a:	f7ff fe4c 	bl	80012a6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800160e:	bf00      	nop
 8001610:	4806      	ldr	r0, [pc, #24]	@ (800162c <SPI2_SendByte+0x40>)
 8001612:	f7ff fe14 	bl	800123e <LL_SPI_IsActiveFlag_RXNE>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f9      	beq.n	8001610 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <SPI2_SendByte+0x40>)
 800161e:	f7ff fe34 	bl	800128a <LL_SPI_ReceiveData8>
 8001622:	4603      	mov	r3, r0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40003800 	.word	0x40003800

08001630 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001638:	4811      	ldr	r0, [pc, #68]	@ (8001680 <BNO080_dataAvailable+0x50>)
 800163a:	f7ff fe46 	bl	80012ca <LL_GPIO_IsInputPinSet>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <BNO080_dataAvailable+0x18>
		return (0);
 8001644:	2300      	movs	r3, #0
 8001646:	e019      	b.n	800167c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001648:	f000 fbe4 	bl	8001e14 <BNO080_receivePacket>
 800164c:	4603      	mov	r3, r0
 800164e:	2b01      	cmp	r3, #1
 8001650:	d113      	bne.n	800167a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <BNO080_dataAvailable+0x54>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <BNO080_dataAvailable+0x3a>
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <BNO080_dataAvailable+0x58>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001660:	d103      	bne.n	800166a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001662:	f000 f82f 	bl	80016c4 <BNO080_parseInputReport>
			return (1);
 8001666:	2301      	movs	r3, #1
 8001668:	e008      	b.n	800167c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <BNO080_dataAvailable+0x54>)
 800166c:	789b      	ldrb	r3, [r3, #2]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d103      	bne.n	800167a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001672:	f000 f80b 	bl	800168c <BNO080_parseCommandReport>
			return (1);
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020800 	.word	0x40020800
 8001684:	200001f4 	.word	0x200001f4
 8001688:	200001f8 	.word	0x200001f8

0800168c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <BNO080_parseCommandReport+0x30>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2bf1      	cmp	r3, #241	@ 0xf1
 8001698:	d109      	bne.n	80016ae <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <BNO080_parseCommandReport+0x30>)
 800169c:	789b      	ldrb	r3, [r3, #2]
 800169e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	d103      	bne.n	80016ae <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <BNO080_parseCommandReport+0x30>)
 80016a8:	795a      	ldrb	r2, [r3, #5]
 80016aa:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <BNO080_parseCommandReport+0x34>)
 80016ac:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200001f8 	.word	0x200001f8
 80016c0:	200002bc 	.word	0x200002bc

080016c4 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80016ca:	4b98      	ldr	r3, [pc, #608]	@ (800192c <BNO080_parseInputReport+0x268>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	4b96      	ldr	r3, [pc, #600]	@ (800192c <BNO080_parseInputReport+0x268>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80016dc:	8a3b      	ldrh	r3, [r7, #16]
 80016de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016e2:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80016e4:	8a3b      	ldrh	r3, [r7, #16]
 80016e6:	3b04      	subs	r3, #4
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80016ec:	4b90      	ldr	r3, [pc, #576]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	061a      	lsls	r2, r3, #24
 80016f2:	4b8f      	ldr	r3, [pc, #572]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	041b      	lsls	r3, r3, #16
 80016f8:	431a      	orrs	r2, r3
 80016fa:	4b8d      	ldr	r3, [pc, #564]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	4313      	orrs	r3, r2
 8001702:	4a8b      	ldr	r2, [pc, #556]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001704:	7852      	ldrb	r2, [r2, #1]
 8001706:	4313      	orrs	r3, r2
 8001708:	4a8a      	ldr	r2, [pc, #552]	@ (8001934 <BNO080_parseInputReport+0x270>)
 800170a:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 800170c:	4b88      	ldr	r3, [pc, #544]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800170e:	79db      	ldrb	r3, [r3, #7]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8001716:	4b86      	ldr	r3, [pc, #536]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001718:	7a9b      	ldrb	r3, [r3, #10]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	4b84      	ldr	r3, [pc, #528]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001720:	7a5b      	ldrb	r3, [r3, #9]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21b      	sxth	r3, r3
 8001728:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800172a:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800172c:	7b1b      	ldrb	r3, [r3, #12]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b7f      	ldr	r3, [pc, #508]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001734:	7adb      	ldrb	r3, [r3, #11]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 800173e:	4b7c      	ldr	r3, [pc, #496]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001740:	7b9b      	ldrb	r3, [r3, #14]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	4b7a      	ldr	r3, [pc, #488]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001748:	7b5b      	ldrb	r3, [r3, #13]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800175a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800175e:	2b0e      	cmp	r3, #14
 8001760:	dd09      	ble.n	8001776 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001762:	4b73      	ldr	r3, [pc, #460]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001764:	7c1b      	ldrb	r3, [r3, #16]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b71      	ldr	r3, [pc, #452]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800176c:	7bdb      	ldrb	r3, [r3, #15]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21b      	sxth	r3, r3
 8001774:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001776:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800177a:	2b10      	cmp	r3, #16
 800177c:	dd09      	ble.n	8001792 <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 800177e:	4b6c      	ldr	r3, [pc, #432]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001780:	7c9b      	ldrb	r3, [r3, #18]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	4b6a      	ldr	r3, [pc, #424]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001788:	7c5b      	ldrb	r3, [r3, #17]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b21b      	sxth	r3, r3
 8001790:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 8001792:	4b67      	ldr	r3, [pc, #412]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001794:	795b      	ldrb	r3, [r3, #5]
 8001796:	2b1e      	cmp	r3, #30
 8001798:	dc46      	bgt.n	8001828 <BNO080_parseInputReport+0x164>
 800179a:	2b00      	cmp	r3, #0
 800179c:	f340 80bf 	ble.w	800191e <BNO080_parseInputReport+0x25a>
 80017a0:	3b01      	subs	r3, #1
 80017a2:	2b1d      	cmp	r3, #29
 80017a4:	f200 80bb 	bhi.w	800191e <BNO080_parseInputReport+0x25a>
 80017a8:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <BNO080_parseInputReport+0xec>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	0800182f 	.word	0x0800182f
 80017b4:	08001867 	.word	0x08001867
 80017b8:	08001883 	.word	0x08001883
 80017bc:	0800184b 	.word	0x0800184b
 80017c0:	0800189f 	.word	0x0800189f
 80017c4:	0800191f 	.word	0x0800191f
 80017c8:	0800191f 	.word	0x0800191f
 80017cc:	0800189f 	.word	0x0800189f
 80017d0:	0800191f 	.word	0x0800191f
 80017d4:	0800191f 	.word	0x0800191f
 80017d8:	0800191f 	.word	0x0800191f
 80017dc:	0800191f 	.word	0x0800191f
 80017e0:	0800191f 	.word	0x0800191f
 80017e4:	0800191f 	.word	0x0800191f
 80017e8:	0800191f 	.word	0x0800191f
 80017ec:	0800191f 	.word	0x0800191f
 80017f0:	080018c7 	.word	0x080018c7
 80017f4:	0800191f 	.word	0x0800191f
 80017f8:	080018cf 	.word	0x080018cf
 80017fc:	0800191f 	.word	0x0800191f
 8001800:	0800191f 	.word	0x0800191f
 8001804:	0800191f 	.word	0x0800191f
 8001808:	0800191f 	.word	0x0800191f
 800180c:	0800191f 	.word	0x0800191f
 8001810:	0800191f 	.word	0x0800191f
 8001814:	0800191f 	.word	0x0800191f
 8001818:	0800191f 	.word	0x0800191f
 800181c:	0800191f 	.word	0x0800191f
 8001820:	0800191f 	.word	0x0800191f
 8001824:	080018d9 	.word	0x080018d9
 8001828:	2bf1      	cmp	r3, #241	@ 0xf1
 800182a:	d06d      	beq.n	8001908 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800182c:	e077      	b.n	800191e <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <BNO080_parseInputReport+0x274>)
 8001834:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8001836:	4a41      	ldr	r2, [pc, #260]	@ (800193c <BNO080_parseInputReport+0x278>)
 8001838:	89bb      	ldrh	r3, [r7, #12]
 800183a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 800183c:	4a40      	ldr	r2, [pc, #256]	@ (8001940 <BNO080_parseInputReport+0x27c>)
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001842:	4a40      	ldr	r2, [pc, #256]	@ (8001944 <BNO080_parseInputReport+0x280>)
 8001844:	893b      	ldrh	r3, [r7, #8]
 8001846:	8013      	strh	r3, [r2, #0]
			break;
 8001848:	e069      	b.n	800191e <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b3e      	ldr	r3, [pc, #248]	@ (8001948 <BNO080_parseInputReport+0x284>)
 8001850:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001852:	4a3e      	ldr	r2, [pc, #248]	@ (800194c <BNO080_parseInputReport+0x288>)
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001858:	4a3d      	ldr	r2, [pc, #244]	@ (8001950 <BNO080_parseInputReport+0x28c>)
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800185e:	4a3d      	ldr	r2, [pc, #244]	@ (8001954 <BNO080_parseInputReport+0x290>)
 8001860:	893b      	ldrh	r3, [r7, #8]
 8001862:	8013      	strh	r3, [r2, #0]
			break;
 8001864:	e05b      	b.n	800191e <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <BNO080_parseInputReport+0x294>)
 800186c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800186e:	4a3b      	ldr	r2, [pc, #236]	@ (800195c <BNO080_parseInputReport+0x298>)
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001874:	4a3a      	ldr	r2, [pc, #232]	@ (8001960 <BNO080_parseInputReport+0x29c>)
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800187a:	4a3a      	ldr	r2, [pc, #232]	@ (8001964 <BNO080_parseInputReport+0x2a0>)
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	8013      	strh	r3, [r2, #0]
			break;
 8001880:	e04d      	b.n	800191e <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <BNO080_parseInputReport+0x2a4>)
 8001888:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800188a:	4a38      	ldr	r2, [pc, #224]	@ (800196c <BNO080_parseInputReport+0x2a8>)
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001890:	4a37      	ldr	r2, [pc, #220]	@ (8001970 <BNO080_parseInputReport+0x2ac>)
 8001892:	897b      	ldrh	r3, [r7, #10]
 8001894:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001896:	4a37      	ldr	r2, [pc, #220]	@ (8001974 <BNO080_parseInputReport+0x2b0>)
 8001898:	893b      	ldrh	r3, [r7, #8]
 800189a:	8013      	strh	r3, [r2, #0]
			break;
 800189c:	e03f      	b.n	800191e <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b35      	ldr	r3, [pc, #212]	@ (8001978 <BNO080_parseInputReport+0x2b4>)
 80018a4:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80018a6:	4a35      	ldr	r2, [pc, #212]	@ (800197c <BNO080_parseInputReport+0x2b8>)
 80018a8:	89bb      	ldrh	r3, [r7, #12]
 80018aa:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80018ac:	4a34      	ldr	r2, [pc, #208]	@ (8001980 <BNO080_parseInputReport+0x2bc>)
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80018b2:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <BNO080_parseInputReport+0x2c0>)
 80018b4:	893b      	ldrh	r3, [r7, #8]
 80018b6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80018b8:	4a33      	ldr	r2, [pc, #204]	@ (8001988 <BNO080_parseInputReport+0x2c4>)
 80018ba:	8afb      	ldrh	r3, [r7, #22]
 80018bc:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80018be:	4a33      	ldr	r2, [pc, #204]	@ (800198c <BNO080_parseInputReport+0x2c8>)
 80018c0:	8abb      	ldrh	r3, [r7, #20]
 80018c2:	8013      	strh	r3, [r2, #0]
			break;
 80018c4:	e02b      	b.n	800191e <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 80018c6:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <BNO080_parseInputReport+0x2cc>)
 80018c8:	893b      	ldrh	r3, [r7, #8]
 80018ca:	8013      	strh	r3, [r2, #0]
			break;
 80018cc:	e027      	b.n	800191e <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80018d0:	7a5a      	ldrb	r2, [r3, #9]
 80018d2:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <BNO080_parseInputReport+0x2d0>)
 80018d4:	701a      	strb	r2, [r3, #0]
			break;
 80018d6:	e022      	b.n	800191e <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80018da:	7a9a      	ldrb	r2, [r3, #10]
 80018dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <BNO080_parseInputReport+0x2d4>)
 80018de:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018e0:	2300      	movs	r3, #0
 80018e2:	74fb      	strb	r3, [r7, #19]
 80018e4:	e00c      	b.n	8001900 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80018e6:	7cfb      	ldrb	r3, [r7, #19]
 80018e8:	f103 020b 	add.w	r2, r3, #11
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <BNO080_parseInputReport+0x2d8>)
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	7cfb      	ldrb	r3, [r7, #19]
 80018f2:	440b      	add	r3, r1
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 80018f6:	5c8a      	ldrb	r2, [r1, r2]
 80018f8:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	3301      	adds	r3, #1
 80018fe:	74fb      	strb	r3, [r7, #19]
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	2b08      	cmp	r3, #8
 8001904:	d9ef      	bls.n	80018e6 <BNO080_parseInputReport+0x222>
			break;
 8001906:	e00a      	b.n	800191e <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 800190a:	79db      	ldrb	r3, [r3, #7]
 800190c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b07      	cmp	r3, #7
 8001912:	d103      	bne.n	800191c <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <BNO080_parseInputReport+0x26c>)
 8001916:	7a9a      	ldrb	r2, [r3, #10]
 8001918:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <BNO080_parseInputReport+0x2dc>)
 800191a:	701a      	strb	r2, [r3, #0]
			break;
 800191c:	bf00      	nop
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	200001f4 	.word	0x200001f4
 8001930:	200001f8 	.word	0x200001f8
 8001934:	200002b0 	.word	0x200002b0
 8001938:	20000286 	.word	0x20000286
 800193c:	20000280 	.word	0x20000280
 8001940:	20000282 	.word	0x20000282
 8001944:	20000284 	.word	0x20000284
 8001948:	2000028e 	.word	0x2000028e
 800194c:	20000288 	.word	0x20000288
 8001950:	2000028a 	.word	0x2000028a
 8001954:	2000028c 	.word	0x2000028c
 8001958:	20000296 	.word	0x20000296
 800195c:	20000290 	.word	0x20000290
 8001960:	20000292 	.word	0x20000292
 8001964:	20000294 	.word	0x20000294
 8001968:	2000029e 	.word	0x2000029e
 800196c:	20000298 	.word	0x20000298
 8001970:	2000029a 	.word	0x2000029a
 8001974:	2000029c 	.word	0x2000029c
 8001978:	200002aa 	.word	0x200002aa
 800197c:	200002a0 	.word	0x200002a0
 8001980:	200002a2 	.word	0x200002a2
 8001984:	200002a4 	.word	0x200002a4
 8001988:	200002a6 	.word	0x200002a6
 800198c:	200002a8 	.word	0x200002a8
 8001990:	200002ac 	.word	0x200002ac
 8001994:	200002b4 	.word	0x200002b4
 8001998:	200002b5 	.word	0x200002b5
 800199c:	200002b8 	.word	0x200002b8
 80019a0:	200002bc 	.word	0x200002bc

080019a4 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <BNO080_getQuatI+0x24>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <BNO080_getQuatI+0x28>)
 80019b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f8bb 	bl	8001b34 <BNO080_qToFloat>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
}
 80019c2:	eeb0 0a67 	vmov.f32	s0, s15
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002a0 	.word	0x200002a0
 80019cc:	20000000 	.word	0x20000000

080019d0 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80019d4:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <BNO080_getQuatJ+0x24>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <BNO080_getQuatJ+0x28>)
 80019dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f8a5 	bl	8001b34 <BNO080_qToFloat>
 80019ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200002a2 	.word	0x200002a2
 80019f8:	20000000 	.word	0x20000000

080019fc <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001a00:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <BNO080_getQuatK+0x24>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <BNO080_getQuatK+0x28>)
 8001a08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f88f 	bl	8001b34 <BNO080_qToFloat>
 8001a16:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200002a4 	.word	0x200002a4
 8001a24:	20000000 	.word	0x20000000

08001a28 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <BNO080_getQuatReal+0x24>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <BNO080_getQuatReal+0x28>)
 8001a34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f879 	bl	8001b34 <BNO080_qToFloat>
 8001a42:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002a6 	.word	0x200002a6
 8001a50:	20000000 	.word	0x20000000

08001a54 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <BNO080_getQuatRadianAccuracy+0x24>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4a07      	ldr	r2, [pc, #28]	@ (8001a7c <BNO080_getQuatRadianAccuracy+0x28>)
 8001a60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f863 	bl	8001b34 <BNO080_qToFloat>
 8001a6e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200002a8 	.word	0x200002a8
 8001a7c:	20000000 	.word	0x20000000

08001a80 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <BNO080_getQuatAccuracy+0x14>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	200002aa 	.word	0x200002aa

08001a98 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <BNO080_getMagX+0x24>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <BNO080_getMagX+0x28>)
 8001aa4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f841 	bl	8001b34 <BNO080_qToFloat>
 8001ab2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000298 	.word	0x20000298
 8001ac0:	20000002 	.word	0x20000002

08001ac4 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <BNO080_getMagY+0x24>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <BNO080_getMagY+0x28>)
 8001ad0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f82b 	bl	8001b34 <BNO080_qToFloat>
 8001ade:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000029a 	.word	0x2000029a
 8001aec:	20000002 	.word	0x20000002

08001af0 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <BNO080_getMagZ+0x24>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <BNO080_getMagZ+0x28>)
 8001afc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f815 	bl	8001b34 <BNO080_qToFloat>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000029c 	.word	0x2000029c
 8001b18:	20000002 	.word	0x20000002

08001b1c <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <BNO080_getMagAccuracy+0x14>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	2000029e 	.word	0x2000029e

08001b34 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	ed2d 8b02 	vpush	{d8}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	80fb      	strh	r3, [r7, #6]
 8001b44:	4613      	mov	r3, r2
 8001b46:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b54:	797b      	ldrb	r3, [r7, #5]
 8001b56:	425b      	negs	r3, r3
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b60:	eef0 0a67 	vmov.f32	s1, s15
 8001b64:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001b68:	f00d f89a 	bl	800eca0 <powf>
 8001b6c:	eef0 7a40 	vmov.f32	s15, s0
 8001b70:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001b74:	eeb0 0a67 	vmov.f32	s0, s15
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	ecbd 8b02 	vpop	{d8}
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	2008      	movs	r0, #8
 8001b94:	f000 f82a 	bl	8001bec <BNO080_setFeatureCommand>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2200      	movs	r2, #0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f81b 	bl	8001bec <BNO080_setFeatureCommand>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001bc2:	2004      	movs	r0, #4
 8001bc4:	f000 f884 	bl	8001cd0 <BNO080_sendCalibrateCommand>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <BNO080_calibrationComplete+0x1c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <BNO080_calibrationComplete+0x10>
		return (1);
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <BNO080_calibrationComplete+0x12>
	return (0);
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	200002bc 	.word	0x200002bc

08001bec <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001bfa:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001bfc:	22fd      	movs	r2, #253	@ 0xfd
 8001bfe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001c00:	4a22      	ldr	r2, [pc, #136]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001c06:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001c12:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c1e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c28:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c32:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	0e1b      	lsrs	r3, r3, #24
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c3c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001c50:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c5c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c66:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c70:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0e1b      	lsrs	r3, r3, #24
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <BNO080_setFeatureCommand+0xa0>)
 8001c7a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001c7c:	2111      	movs	r1, #17
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f000 f938 	bl	8001ef4 <BNO080_sendPacket>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200001f8 	.word	0x200001f8

08001c90 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <BNO080_sendCommand+0x38>)
 8001c9c:	22f2      	movs	r2, #242	@ 0xf2
 8001c9e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <BNO080_sendCommand+0x3c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	b2d1      	uxtb	r1, r2
 8001ca8:	4a08      	ldr	r2, [pc, #32]	@ (8001ccc <BNO080_sendCommand+0x3c>)
 8001caa:	7011      	strb	r1, [r2, #0]
 8001cac:	4a06      	ldr	r2, [pc, #24]	@ (8001cc8 <BNO080_sendCommand+0x38>)
 8001cae:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001cb0:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <BNO080_sendCommand+0x38>)
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001cb6:	210c      	movs	r1, #12
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f000 f91b 	bl	8001ef4 <BNO080_sendPacket>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001f8 	.word	0x200001f8
 8001ccc:	2000027e 	.word	0x2000027e

08001cd0 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001cda:	2303      	movs	r3, #3
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e006      	b.n	8001cee <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b0b      	cmp	r3, #11
 8001cf2:	d9f5      	bls.n	8001ce0 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	70da      	strb	r2, [r3, #3]
 8001d00:	e020      	b.n	8001d44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d103      	bne.n	8001d10 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	711a      	strb	r2, [r3, #4]
 8001d0e:	e019      	b.n	8001d44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d103      	bne.n	8001d1e <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	715a      	strb	r2, [r3, #5]
 8001d1c:	e012      	b.n	8001d44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d103      	bne.n	8001d2c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	71da      	strb	r2, [r3, #7]
 8001d2a:	e00b      	b.n	8001d44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d108      	bne.n	8001d44 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <BNO080_sendCalibrateCommand+0x88>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <BNO080_sendCalibrateCommand+0x8c>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f7ff ffa0 	bl	8001c90 <BNO080_sendCommand>
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200001f8 	.word	0x200001f8
 8001d5c:	200002bc 	.word	0x200002bc

08001d60 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d66:	2303      	movs	r3, #3
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	e006      	b.n	8001d7a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	4a09      	ldr	r2, [pc, #36]	@ (8001d94 <BNO080_requestCalibrationStatus+0x34>)
 8001d70:	2100      	movs	r1, #0
 8001d72:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	3301      	adds	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b0b      	cmp	r3, #11
 8001d7e:	d9f5      	bls.n	8001d6c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <BNO080_requestCalibrationStatus+0x34>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d86:	2007      	movs	r0, #7
 8001d88:	f7ff ff82 	bl	8001c90 <BNO080_sendCommand>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200001f8 	.word	0x200001f8

08001d98 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d9e:	2303      	movs	r3, #3
 8001da0:	71fb      	strb	r3, [r7, #7]
 8001da2:	e006      	b.n	8001db2 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4a08      	ldr	r2, [pc, #32]	@ (8001dc8 <BNO080_saveCalibration+0x30>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	3301      	adds	r3, #1
 8001db0:	71fb      	strb	r3, [r7, #7]
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b0b      	cmp	r3, #11
 8001db6:	d9f5      	bls.n	8001da4 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001db8:	2006      	movs	r0, #6
 8001dba:	f7ff ff69 	bl	8001c90 <BNO080_sendCommand>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200001f8 	.word	0x200001f8

08001dcc <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	e00c      	b.n	8001df2 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ddc:	480b      	ldr	r0, [pc, #44]	@ (8001e0c <BNO080_waitForSPI+0x40>)
 8001dde:	f7ff fa74 	bl	80012ca <LL_GPIO_IsInputPinSet>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001de8:	2301      	movs	r3, #1
 8001dea:	e00a      	b.n	8001e02 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d1ee      	bne.n	8001dd8 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <BNO080_waitForSPI+0x44>)
 8001dfc:	f00a ffb4 	bl	800cd68 <puts>
	return (0);
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	0800f9a0 	.word	0x0800f9a0

08001e14 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1e:	4831      	ldr	r0, [pc, #196]	@ (8001ee4 <BNO080_receivePacket+0xd0>)
 8001e20:	f7ff fa53 	bl	80012ca <LL_GPIO_IsInputPinSet>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e056      	b.n	8001edc <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001e2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e32:	482d      	ldr	r0, [pc, #180]	@ (8001ee8 <BNO080_receivePacket+0xd4>)
 8001e34:	f7ff fa6c 	bl	8001310 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff fbd7 	bl	80015ec <SPI2_SendByte>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fbd2 	bl	80015ec <SPI2_SendByte>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff fbcd 	bl	80015ec <SPI2_SendByte>
 8001e52:	4603      	mov	r3, r0
 8001e54:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fbc8 	bl	80015ec <SPI2_SendByte>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001e60:	4a22      	ldr	r2, [pc, #136]	@ (8001eec <BNO080_receivePacket+0xd8>)
 8001e62:	7b7b      	ldrb	r3, [r7, #13]
 8001e64:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001e66:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <BNO080_receivePacket+0xd8>)
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eec <BNO080_receivePacket+0xd8>)
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001e72:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <BNO080_receivePacket+0xd8>)
 8001e74:	7abb      	ldrb	r3, [r7, #10]
 8001e76:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001e78:	7b3b      	ldrb	r3, [r7, #12]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	b21a      	sxth	r2, r3
 8001e7e:	7b7b      	ldrb	r3, [r7, #13]
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	4313      	orrs	r3, r2
 8001e84:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001e86:	893b      	ldrh	r3, [r7, #8]
 8001e88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e8c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001e8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8001e96:	2300      	movs	r3, #0
 8001e98:	e020      	b.n	8001edc <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001e9a:	893b      	ldrh	r3, [r7, #8]
 8001e9c:	3b04      	subs	r3, #4
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	81fb      	strh	r3, [r7, #14]
 8001ea6:	e00e      	b.n	8001ec6 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8001ea8:	20ff      	movs	r0, #255	@ 0xff
 8001eaa:	f7ff fb9f 	bl	80015ec <SPI2_SendByte>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001eb6:	d803      	bhi.n	8001ec0 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	490d      	ldr	r1, [pc, #52]	@ (8001ef0 <BNO080_receivePacket+0xdc>)
 8001ebc:	79fa      	ldrb	r2, [r7, #7]
 8001ebe:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	81fb      	strh	r3, [r7, #14]
 8001ec6:	89fa      	ldrh	r2, [r7, #14]
 8001ec8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbeb      	blt.n	8001ea8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001ed0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <BNO080_receivePacket+0xd4>)
 8001ed6:	f7ff fa0d 	bl	80012f4 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	200001f4 	.word	0x200001f4
 8001ef0:	200001f8 	.word	0x200001f8

08001ef4 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	460a      	mov	r2, r1
 8001efe:	71fb      	strb	r3, [r7, #7]
 8001f00:	4613      	mov	r3, r2
 8001f02:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	3304      	adds	r3, #4
 8001f08:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001f0a:	f7ff ff5f 	bl	8001dcc <BNO080_waitForSPI>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001f14:	2300      	movs	r3, #0
 8001f16:	e032      	b.n	8001f7e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001f18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f1c:	481a      	ldr	r0, [pc, #104]	@ (8001f88 <BNO080_sendPacket+0x94>)
 8001f1e:	f7ff f9f7 	bl	8001310 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001f22:	7bbb      	ldrb	r3, [r7, #14]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fb61 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
 8001f2c:	121b      	asrs	r3, r3, #8
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fb5b 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fb57 	bl	80015ec <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <BNO080_sendPacket+0x98>)
 8001f42:	5cd2      	ldrb	r2, [r2, r3]
 8001f44:	1c51      	adds	r1, r2, #1
 8001f46:	b2c8      	uxtb	r0, r1
 8001f48:	4910      	ldr	r1, [pc, #64]	@ (8001f8c <BNO080_sendPacket+0x98>)
 8001f4a:	54c8      	strb	r0, [r1, r3]
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f7ff fb4d 	bl	80015ec <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e008      	b.n	8001f6a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <BNO080_sendPacket+0x9c>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fb44 	bl	80015ec <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	3301      	adds	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3f2      	bcc.n	8001f58 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001f72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f76:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <BNO080_sendPacket+0x94>)
 8001f78:	f7ff f9bc 	bl	80012f4 <LL_GPIO_SetOutputPin>

	return (1);
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	20000278 	.word	0x20000278
 8001f90:	200001f8 	.word	0x200001f8

08001f94 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8001fa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fa4:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	e00a      	b.n	8001fc2 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	3b02      	subs	r3, #2
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbef      	blt.n	8001fac <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	321e      	adds	r2, #30
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d109      	bne.n	8001fee <iBus_Check_CHKSUM+0x5a>
 8001fda:	89fb      	ldrh	r3, [r7, #14]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	321f      	adds	r2, #31
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <iBus_Check_CHKSUM+0x5a>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <iBus_Check_CHKSUM+0x5c>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3302      	adds	r3, #2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b21a      	sxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3303      	adds	r3, #3
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21b      	sxth	r3, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	b29a      	uxth	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b21a      	sxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3305      	adds	r3, #5
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	b21b      	sxth	r3, r3
 800203c:	4313      	orrs	r3, r2
 800203e:	b21b      	sxth	r3, r3
 8002040:	b29b      	uxth	r3, r3
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	b29a      	uxth	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3306      	adds	r3, #6
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b21a      	sxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3307      	adds	r3, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21b      	sxth	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b21b      	sxth	r3, r3
 8002062:	b29b      	uxth	r3, r3
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	b29a      	uxth	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3308      	adds	r3, #8
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b21a      	sxth	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3309      	adds	r3, #9
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21b      	sxth	r3, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	b29a      	uxth	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	330a      	adds	r3, #10
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b21a      	sxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	330b      	adds	r3, #11
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	330c      	adds	r3, #12
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	330d      	adds	r3, #13
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = (data[13] >> 4);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	330d      	adds	r3, #13
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	751a      	strb	r2, [r3, #20]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7d1b      	ldrb	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_SPI_Enable>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_SPI_SetStandard>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 0210 	bic.w	r2, r3, #16
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	605a      	str	r2, [r3, #4]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_SPI_IsActiveFlag_TXE>:
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d101      	bne.n	8002194 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_SPI_ReceiveData8>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	330c      	adds	r3, #12
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_SPI_TransmitData8>:
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330c      	adds	r3, #12
 80021ce:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	701a      	strb	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_GPIO_IsInputPinSet>:
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4013      	ands	r3, r2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_GPIO_SetOutputPin>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	619a      	str	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_GPIO_ResetOutputPin>:
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	041a      	lsls	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <LL_AHB1_GRP1_EnableClock>:
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002254:	4907      	ldr	r1, [pc, #28]	@ (8002274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800225e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4013      	ands	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40023800 	.word	0x40023800

08002278 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002280:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002282:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002284:	4907      	ldr	r1, [pc, #28]	@ (80022a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4313      	orrs	r3, r2
 800228a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800228e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40023800 	.word	0x40023800

080022a8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b090      	sub	sp, #64	@ 0x40
 80022ac:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80022ae:	f107 0318 	add.w	r3, r7, #24
 80022b2:	2228      	movs	r2, #40	@ 0x28
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f00a fe36 	bl	800cf28 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	463b      	mov	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80022cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80022d0:	f7ff ffd2 	bl	8002278 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7ff ffb7 	bl	8002248 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80022da:	2004      	movs	r0, #4
 80022dc:	f7ff ffb4 	bl	8002248 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80022e0:	23e0      	movs	r3, #224	@ 0xe0
 80022e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022e4:	2302      	movs	r3, #2
 80022e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80022f4:	2305      	movs	r3, #5
 80022f6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4825      	ldr	r0, [pc, #148]	@ (8002394 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80022fe:	f008 ffa6 	bl	800b24e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002306:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800230a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002310:	2302      	movs	r3, #2
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002314:	2301      	movs	r3, #1
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800231e:	2310      	movs	r3, #16
 8002320:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800232a:	230a      	movs	r3, #10
 800232c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	4619      	mov	r1, r3
 8002334:	4818      	ldr	r0, [pc, #96]	@ (8002398 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002336:	f009 f968 	bl	800b60a <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800233a:	2100      	movs	r1, #0
 800233c:	4816      	ldr	r0, [pc, #88]	@ (8002398 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800233e:	f7ff fef7 	bl	8002130 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002342:	2110      	movs	r1, #16
 8002344:	4815      	ldr	r0, [pc, #84]	@ (800239c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002346:	f7ff ff6f 	bl	8002228 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800234a:	2310      	movs	r3, #16
 800234c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800234e:	2301      	movs	r3, #1
 8002350:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800235e:	463b      	mov	r3, r7
 8002360:	4619      	mov	r1, r3
 8002362:	480e      	ldr	r0, [pc, #56]	@ (800239c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002364:	f008 ff73 	bl	800b24e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002368:	2320      	movs	r3, #32
 800236a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002370:	2301      	movs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	@ (800239c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800237a:	f008 ff68 	bl	800b24e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800237e:	4806      	ldr	r0, [pc, #24]	@ (8002398 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002380:	f7ff fec6 	bl	8002110 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002384:	2110      	movs	r1, #16
 8002386:	4805      	ldr	r0, [pc, #20]	@ (800239c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002388:	f7ff ff40 	bl	800220c <LL_GPIO_SetOutputPin>
}
 800238c:	bf00      	nop
 800238e:	3740      	adds	r7, #64	@ 0x40
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40020000 	.word	0x40020000
 8002398:	40013000 	.word	0x40013000
 800239c:	40020800 	.word	0x40020800

080023a0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80023aa:	bf00      	nop
 80023ac:	480c      	ldr	r0, [pc, #48]	@ (80023e0 <SPI1_SendByte+0x40>)
 80023ae:	f7ff fee5 	bl	800217c <LL_SPI_IsActiveFlag_TXE>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f9      	beq.n	80023ac <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4808      	ldr	r0, [pc, #32]	@ (80023e0 <SPI1_SendByte+0x40>)
 80023be:	f7ff fefe 	bl	80021be <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80023c2:	bf00      	nop
 80023c4:	4806      	ldr	r0, [pc, #24]	@ (80023e0 <SPI1_SendByte+0x40>)
 80023c6:	f7ff fec6 	bl	8002156 <LL_SPI_IsActiveFlag_RXNE>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f9      	beq.n	80023c4 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80023d0:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <SPI1_SendByte+0x40>)
 80023d2:	f7ff fee6 	bl	80021a2 <LL_SPI_ReceiveData8>
 80023d6:	4603      	mov	r3, r0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40013000 	.word	0x40013000

080023e4 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80023ee:	2110      	movs	r1, #16
 80023f0:	480b      	ldr	r0, [pc, #44]	@ (8002420 <ICM20602_Readbyte+0x3c>)
 80023f2:	f7ff ff19 	bl	8002228 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ffce 	bl	80023a0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff ffcb 	bl	80023a0 <SPI1_SendByte>
 800240a:	4603      	mov	r3, r0
 800240c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800240e:	2110      	movs	r1, #16
 8002410:	4803      	ldr	r0, [pc, #12]	@ (8002420 <ICM20602_Readbyte+0x3c>)
 8002412:	f7ff fefb 	bl	800220c <LL_GPIO_SetOutputPin>
	
	return val;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40020800 	.word	0x40020800

08002424 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	603a      	str	r2, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
 8002430:	460b      	mov	r3, r1
 8002432:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8002438:	2110      	movs	r1, #16
 800243a:	4810      	ldr	r0, [pc, #64]	@ (800247c <ICM20602_Readbytes+0x58>)
 800243c:	f7ff fef4 	bl	8002228 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ffa9 	bl	80023a0 <SPI1_SendByte>
	while(i < len)
 800244e:	e009      	b.n	8002464 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60fa      	str	r2, [r7, #12]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	18d4      	adds	r4, r2, r3
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff ffa0 	bl	80023a0 <SPI1_SendByte>
 8002460:	4603      	mov	r3, r0
 8002462:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8002464:	79bb      	ldrb	r3, [r7, #6]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3f1      	bcc.n	8002450 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 800246c:	2110      	movs	r1, #16
 800246e:	4803      	ldr	r0, [pc, #12]	@ (800247c <ICM20602_Readbytes+0x58>)
 8002470:	f7ff fecc 	bl	800220c <LL_GPIO_SetOutputPin>
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	40020800 	.word	0x40020800

08002480 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002490:	2110      	movs	r1, #16
 8002492:	480b      	ldr	r0, [pc, #44]	@ (80024c0 <ICM20602_Writebyte+0x40>)
 8002494:	f7ff fec8 	bl	8002228 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff7d 	bl	80023a0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80024a6:	79bb      	ldrb	r3, [r7, #6]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff79 	bl	80023a0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80024ae:	2110      	movs	r1, #16
 80024b0:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <ICM20602_Writebyte+0x40>)
 80024b2:	f7ff feab 	bl	800220c <LL_GPIO_SetOutputPin>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40020800 	.word	0x40020800

080024c4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80024d8:	463b      	mov	r3, r7
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80024e0:	f7ff fee2 	bl	80022a8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80024e4:	4833      	ldr	r0, [pc, #204]	@ (80025b4 <ICM20602_Initialization+0xf0>)
 80024e6:	f00a fbd7 	bl	800cc98 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80024ea:	2075      	movs	r0, #117	@ 0x75
 80024ec:	f7ff ff7a 	bl	80023e4 <ICM20602_Readbyte>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b12      	cmp	r3, #18
 80024f8:	d105      	bne.n	8002506 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	4619      	mov	r1, r3
 80024fe:	482e      	ldr	r0, [pc, #184]	@ (80025b8 <ICM20602_Initialization+0xf4>)
 8002500:	f00a fbca 	bl	800cc98 <iprintf>
 8002504:	e012      	b.n	800252c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b12      	cmp	r3, #18
 800250a:	d00f      	beq.n	800252c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800250c:	2075      	movs	r0, #117	@ 0x75
 800250e:	f7ff ff69 	bl	80023e4 <ICM20602_Readbyte>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2b12      	cmp	r3, #18
 800251a:	d007      	beq.n	800252c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2212      	movs	r2, #18
 8002520:	4619      	mov	r1, r3
 8002522:	4826      	ldr	r0, [pc, #152]	@ (80025bc <ICM20602_Initialization+0xf8>)
 8002524:	f00a fbb8 	bl	800cc98 <iprintf>
			return 1; //ERROR
 8002528:	2301      	movs	r3, #1
 800252a:	e03f      	b.n	80025ac <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	206b      	movs	r0, #107	@ 0x6b
 8002530:	f7ff ffa6 	bl	8002480 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002534:	2032      	movs	r0, #50	@ 0x32
 8002536:	f004 fd11 	bl	8006f5c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800253a:	2101      	movs	r1, #1
 800253c:	206b      	movs	r0, #107	@ 0x6b
 800253e:	f7ff ff9f 	bl	8002480 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8002542:	2032      	movs	r0, #50	@ 0x32
 8002544:	f004 fd0a 	bl	8006f5c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8002548:	2138      	movs	r1, #56	@ 0x38
 800254a:	206c      	movs	r0, #108	@ 0x6c
 800254c:	f7ff ff98 	bl	8002480 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8002550:	2032      	movs	r0, #50	@ 0x32
 8002552:	f004 fd03 	bl	8006f5c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002556:	2100      	movs	r1, #0
 8002558:	2019      	movs	r0, #25
 800255a:	f7ff ff91 	bl	8002480 <ICM20602_Writebyte>
	HAL_Delay(50);
 800255e:	2032      	movs	r0, #50	@ 0x32
 8002560:	f004 fcfc 	bl	8006f5c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002564:	2105      	movs	r1, #5
 8002566:	201a      	movs	r0, #26
 8002568:	f7ff ff8a 	bl	8002480 <ICM20602_Writebyte>
	HAL_Delay(50);
 800256c:	2032      	movs	r0, #50	@ 0x32
 800256e:	f004 fcf5 	bl	8006f5c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002572:	2118      	movs	r1, #24
 8002574:	201b      	movs	r0, #27
 8002576:	f7ff ff83 	bl	8002480 <ICM20602_Writebyte>
	HAL_Delay(50);
 800257a:	2032      	movs	r0, #50	@ 0x32
 800257c:	f004 fcee 	bl	8006f5c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002580:	2118      	movs	r1, #24
 8002582:	201c      	movs	r0, #28
 8002584:	f7ff ff7c 	bl	8002480 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002588:	2032      	movs	r0, #50	@ 0x32
 800258a:	f004 fce7 	bl	8006f5c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800258e:	2103      	movs	r1, #3
 8002590:	201d      	movs	r0, #29
 8002592:	f7ff ff75 	bl	8002480 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002596:	2032      	movs	r0, #50	@ 0x32
 8002598:	f004 fce0 	bl	8006f5c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 800259c:	2101      	movs	r1, #1
 800259e:	2038      	movs	r0, #56	@ 0x38
 80025a0:	f7ff ff6e 	bl	8002480 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025a4:	2032      	movs	r0, #50	@ 0x32
 80025a6:	f004 fcd9 	bl	8006f5c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	0800f9b4 	.word	0x0800f9b4
 80025b8:	0800f9cc 	.word	0x0800f9cc
 80025bc:	0800f9f0 	.word	0x0800f9f0

080025c0 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	461a      	mov	r2, r3
 80025ce:	2106      	movs	r1, #6
 80025d0:	2043      	movs	r0, #67	@ 0x43
 80025d2:	f7ff ff27 	bl	8002424 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80025d6:	7a3b      	ldrb	r3, [r7, #8]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	b21a      	sxth	r2, r3
 80025dc:	7a7b      	ldrb	r3, [r7, #9]
 80025de:	b21b      	sxth	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80025e8:	7abb      	ldrb	r3, [r7, #10]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	b219      	sxth	r1, r3
 80025ee:	7afb      	ldrb	r3, [r7, #11]
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3302      	adds	r3, #2
 80025f6:	430a      	orrs	r2, r1
 80025f8:	b212      	sxth	r2, r2
 80025fa:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80025fc:	7b3b      	ldrb	r3, [r7, #12]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	b219      	sxth	r1, r3
 8002602:	7b7b      	ldrb	r3, [r7, #13]
 8002604:	b21a      	sxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	430a      	orrs	r2, r1
 800260c:	b212      	sxth	r2, r2
 800260e:	801a      	strh	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 800261c:	2120      	movs	r1, #32
 800261e:	4803      	ldr	r0, [pc, #12]	@ (800262c <ICM20602_DataReady+0x14>)
 8002620:	f7ff fddf 	bl	80021e2 <LL_GPIO_IsInputPinSet>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40020800 	.word	0x40020800

08002630 <LL_SPI_Enable>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_SPI_SetStandard>:
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f023 0210 	bic.w	r2, r3, #16
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_SPI_IsActiveFlag_RXNE>:
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_SPI_IsActiveFlag_TXE>:
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d101      	bne.n	80026b4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_SPI_ReceiveData8>:
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	330c      	adds	r3, #12
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_SPI_TransmitData8>:
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	330c      	adds	r3, #12
 80026ee:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	701a      	strb	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_GPIO_IsInputPinSet>:
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4013      	ands	r3, r2
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_GPIO_SetOutputPin>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	619a      	str	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_GPIO_ResetOutputPin>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <LL_AHB1_GRP1_EnableClock>:
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002774:	4907      	ldr	r1, [pc, #28]	@ (8002794 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4313      	orrs	r3, r2
 800277a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800277e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40023800 	.word	0x40023800

08002798 <LL_APB1_GRP1_EnableClock>:
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a4:	4907      	ldr	r1, [pc, #28]	@ (80027c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80027ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4013      	ands	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40023800 	.word	0x40023800

080027c8 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b090      	sub	sp, #64	@ 0x40
 80027cc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027ce:	f107 0318 	add.w	r3, r7, #24
 80027d2:	2228      	movs	r2, #40	@ 0x28
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a fba6 	bl	800cf28 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	463b      	mov	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80027ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027f0:	f7ff ffd2 	bl	8002798 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80027f4:	2002      	movs	r0, #2
 80027f6:	f7ff ffb7 	bl	8002768 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80027fa:	2338      	movs	r3, #56	@ 0x38
 80027fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027fe:	2302      	movs	r3, #2
 8002800:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800280e:	2306      	movs	r3, #6
 8002810:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	463b      	mov	r3, r7
 8002814:	4619      	mov	r1, r3
 8002816:	4826      	ldr	r0, [pc, #152]	@ (80028b0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002818:	f008 fd19 	bl	800b24e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002820:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002824:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800282a:	2302      	movs	r3, #2
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800282e:	2301      	movs	r3, #1
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002832:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002838:	2308      	movs	r3, #8
 800283a:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800283c:	2300      	movs	r3, #0
 800283e:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002844:	230a      	movs	r3, #10
 8002846:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8002848:	f107 0318 	add.w	r3, r7, #24
 800284c:	4619      	mov	r1, r3
 800284e:	4819      	ldr	r0, [pc, #100]	@ (80028b4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002850:	f008 fedb 	bl	800b60a <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002854:	2100      	movs	r1, #0
 8002856:	4817      	ldr	r0, [pc, #92]	@ (80028b4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002858:	f7ff fefa 	bl	8002650 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 800285c:	2140      	movs	r1, #64	@ 0x40
 800285e:	4814      	ldr	r0, [pc, #80]	@ (80028b0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002860:	f7ff ff72 	bl	8002748 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002864:	2340      	movs	r3, #64	@ 0x40
 8002866:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002868:	2301      	movs	r3, #1
 800286a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8002878:	463b      	mov	r3, r7
 800287a:	4619      	mov	r1, r3
 800287c:	480c      	ldr	r0, [pc, #48]	@ (80028b0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800287e:	f008 fce6 	bl	800b24e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8002882:	2380      	movs	r3, #128	@ 0x80
 8002884:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800288a:	2301      	movs	r3, #1
 800288c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800288e:	463b      	mov	r3, r7
 8002890:	4619      	mov	r1, r3
 8002892:	4807      	ldr	r0, [pc, #28]	@ (80028b0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002894:	f008 fcdb 	bl	800b24e <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002898:	4806      	ldr	r0, [pc, #24]	@ (80028b4 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800289a:	f7ff fec9 	bl	8002630 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800289e:	2140      	movs	r1, #64	@ 0x40
 80028a0:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028a2:	f7ff ff43 	bl	800272c <LL_GPIO_SetOutputPin>
}
 80028a6:	bf00      	nop
 80028a8:	3740      	adds	r7, #64	@ 0x40
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40003c00 	.word	0x40003c00

080028b8 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80028c2:	bf00      	nop
 80028c4:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <SPI3_SendByte+0x40>)
 80028c6:	f7ff fee9 	bl	800269c <LL_SPI_IsActiveFlag_TXE>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f9      	beq.n	80028c4 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4808      	ldr	r0, [pc, #32]	@ (80028f8 <SPI3_SendByte+0x40>)
 80028d6:	f7ff ff02 	bl	80026de <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80028da:	bf00      	nop
 80028dc:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <SPI3_SendByte+0x40>)
 80028de:	f7ff feca 	bl	8002676 <LL_SPI_IsActiveFlag_RXNE>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f9      	beq.n	80028dc <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80028e8:	4803      	ldr	r0, [pc, #12]	@ (80028f8 <SPI3_SendByte+0x40>)
 80028ea:	f7ff feea 	bl	80026c2 <LL_SPI_ReceiveData8>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40003c00 	.word	0x40003c00

080028fc <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8002906:	2140      	movs	r1, #64	@ 0x40
 8002908:	480b      	ldr	r0, [pc, #44]	@ (8002938 <LPS22HH_Readbyte+0x3c>)
 800290a:	f7ff ff1d 	bl	8002748 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffce 	bl	80028b8 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff ffcb 	bl	80028b8 <SPI3_SendByte>
 8002922:	4603      	mov	r3, r0
 8002924:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8002926:	2140      	movs	r1, #64	@ 0x40
 8002928:	4803      	ldr	r0, [pc, #12]	@ (8002938 <LPS22HH_Readbyte+0x3c>)
 800292a:	f7ff feff 	bl	800272c <LL_GPIO_SetOutputPin>
	
	return val;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40020400 	.word	0x40020400

0800293c <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	603a      	str	r2, [r7, #0]
 8002946:	71fb      	strb	r3, [r7, #7]
 8002948:	460b      	mov	r3, r1
 800294a:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8002950:	2140      	movs	r1, #64	@ 0x40
 8002952:	4810      	ldr	r0, [pc, #64]	@ (8002994 <LPS22HH_Readbytes+0x58>)
 8002954:	f7ff fef8 	bl	8002748 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ffa9 	bl	80028b8 <SPI3_SendByte>
	while(i < len)
 8002966:	e009      	b.n	800297c <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	60fa      	str	r2, [r7, #12]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	18d4      	adds	r4, r2, r3
 8002972:	2000      	movs	r0, #0
 8002974:	f7ff ffa0 	bl	80028b8 <SPI3_SendByte>
 8002978:	4603      	mov	r3, r0
 800297a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d3f1      	bcc.n	8002968 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8002984:	2140      	movs	r1, #64	@ 0x40
 8002986:	4803      	ldr	r0, [pc, #12]	@ (8002994 <LPS22HH_Readbytes+0x58>)
 8002988:	f7ff fed0 	bl	800272c <LL_GPIO_SetOutputPin>
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	40020400 	.word	0x40020400

08002998 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	460a      	mov	r2, r1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80029a8:	2140      	movs	r1, #64	@ 0x40
 80029aa:	480b      	ldr	r0, [pc, #44]	@ (80029d8 <LPS22HH_Writebyte+0x40>)
 80029ac:	f7ff fecc 	bl	8002748 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff7d 	bl	80028b8 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80029be:	79bb      	ldrb	r3, [r7, #6]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff79 	bl	80028b8 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80029c6:	2140      	movs	r1, #64	@ 0x40
 80029c8:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <LPS22HH_Writebyte+0x40>)
 80029ca:	f7ff feaf 	bl	800272c <LL_GPIO_SetOutputPin>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020400 	.word	0x40020400

080029dc <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80029e6:	f7ff feef 	bl	80027c8 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80029ea:	4841      	ldr	r0, [pc, #260]	@ (8002af0 <LPS22HH_Initialization+0x114>)
 80029ec:	f00a f954 	bl	800cc98 <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 80029f0:	200f      	movs	r0, #15
 80029f2:	f7ff ff83 	bl	80028fc <LPS22HH_Readbyte>
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2bb3      	cmp	r3, #179	@ 0xb3
 80029fe:	d105      	bne.n	8002a0c <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4619      	mov	r1, r3
 8002a04:	483b      	ldr	r0, [pc, #236]	@ (8002af4 <LPS22HH_Initialization+0x118>)
 8002a06:	f00a f947 	bl	800cc98 <iprintf>
 8002a0a:	e012      	b.n	8002a32 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a10:	d00f      	beq.n	8002a32 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002a12:	200f      	movs	r0, #15
 8002a14:	f7ff ff72 	bl	80028fc <LPS22HH_Readbyte>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a20:	d007      	beq.n	8002a32 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	22b3      	movs	r2, #179	@ 0xb3
 8002a26:	4619      	mov	r1, r3
 8002a28:	4833      	ldr	r0, [pc, #204]	@ (8002af8 <LPS22HH_Initialization+0x11c>)
 8002a2a:	f00a f935 	bl	800cc98 <iprintf>
			return 1; //ERROR
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e059      	b.n	8002ae6 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002a32:	2104      	movs	r1, #4
 8002a34:	2011      	movs	r0, #17
 8002a36:	f7ff ffaf 	bl	8002998 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002a3a:	2011      	movs	r0, #17
 8002a3c:	f7ff ff5e 	bl	80028fc <LPS22HH_Readbyte>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f7      	bne.n	8002a3a <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a4a:	2010      	movs	r0, #16
 8002a4c:	f7ff ff56 	bl	80028fc <LPS22HH_Readbyte>
 8002a50:	4603      	mov	r3, r0
 8002a52:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002a54:	79bb      	ldrb	r3, [r7, #6]
 8002a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a5a:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	2010      	movs	r0, #16
 8002a62:	f7ff ff99 	bl	8002998 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a6a:	2010      	movs	r0, #16
 8002a6c:	f7ff ff46 	bl	80028fc <LPS22HH_Readbyte>
 8002a70:	4603      	mov	r3, r0
 8002a72:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a74:	2010      	movs	r0, #16
 8002a76:	f7ff ff41 	bl	80028fc <LPS22HH_Readbyte>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002a7e:	79bb      	ldrb	r3, [r7, #6]
 8002a80:	f043 030c 	orr.w	r3, r3, #12
 8002a84:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002a86:	79bb      	ldrb	r3, [r7, #6]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	2010      	movs	r0, #16
 8002a8c:	f7ff ff84 	bl	8002998 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002a90:	2010      	movs	r0, #16
 8002a92:	f7ff ff33 	bl	80028fc <LPS22HH_Readbyte>
 8002a96:	4603      	mov	r3, r0
 8002a98:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002a9a:	79bb      	ldrb	r3, [r7, #6]
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002aa2:	79bb      	ldrb	r3, [r7, #6]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2010      	movs	r0, #16
 8002aa8:	f7ff ff76 	bl	8002998 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002aac:	2011      	movs	r0, #17
 8002aae:	f7ff ff25 	bl	80028fc <LPS22HH_Readbyte>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002ab6:	79bb      	ldrb	r3, [r7, #6]
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002abe:	79bb      	ldrb	r3, [r7, #6]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2011      	movs	r0, #17
 8002ac4:	f7ff ff68 	bl	8002998 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002ac8:	2012      	movs	r0, #18
 8002aca:	f7ff ff17 	bl	80028fc <LPS22HH_Readbyte>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002ad2:	79bb      	ldrb	r3, [r7, #6]
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002ada:	79bb      	ldrb	r3, [r7, #6]
 8002adc:	4619      	mov	r1, r3
 8002ade:	2012      	movs	r0, #18
 8002ae0:	f7ff ff5a 	bl	8002998 <LPS22HH_Writebyte>
	
	return 0; //OK
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	0800fa1c 	.word	0x0800fa1c
 8002af4:	0800fa30 	.word	0x0800fa30
 8002af8:	0800fa54 	.word	0x0800fa54

08002afc <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	4803      	ldr	r0, [pc, #12]	@ (8002b10 <LPS22HH_DataReady+0x14>)
 8002b04:	f7ff fdfd 	bl	8002702 <LL_GPIO_IsInputPinSet>
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40020400 	.word	0x40020400

08002b14 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	2103      	movs	r1, #3
 8002b20:	2028      	movs	r0, #40	@ 0x28
 8002b22:	f7ff ff0b 	bl	800293c <LPS22HH_Readbytes>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	2102      	movs	r1, #2
 8002b3a:	202b      	movs	r0, #43	@ 0x2b
 8002b3c:	f7ff fefe 	bl	800293c <LPS22HH_Readbytes>
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b52:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 8002b56:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002ba0 <getAltitude2+0x58>
 8002b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b62:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002ba4 <getAltitude2+0x5c>
 8002b66:	eeb0 0a47 	vmov.f32	s0, s14
 8002b6a:	f00c f899 	bl	800eca0 <powf>
 8002b6e:	eef0 7a40 	vmov.f32	s15, s0
 8002b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b76:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b7a:	edd7 7a00 	vldr	s15, [r7]
 8002b7e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002ba8 <getAltitude2+0x60>
 8002b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002bac <getAltitude2+0x64>
 8002b8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b92:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	447d5000 	.word	0x447d5000
 8002ba4:	3e42c9b7 	.word	0x3e42c9b7
 8002ba8:	43889333 	.word	0x43889333
 8002bac:	3bd4fdf4 	.word	0x3bd4fdf4

08002bb0 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8002bc0:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	645a      	str	r2, [r3, #68]	@ 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	649a      	str	r2, [r3, #72]	@ 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002c08:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002e08 <Double_Roll_Pitch_PID_Calculation+0x258>
 8002c0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002c20:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002e0c <Double_Roll_Pitch_PID_Calculation+0x25c>
 8002c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	dd03      	ble.n	8002c36 <Double_Roll_Pitch_PID_Calculation+0x86>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a77      	ldr	r2, [pc, #476]	@ (8002e10 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8002c32:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c34:	e00c      	b.n	8002c50 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002c3c:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8002e14 <Double_Roll_Pitch_PID_Calculation+0x264>
 8002c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	d502      	bpl.n	8002c50 <Double_Roll_Pitch_PID_Calculation+0xa0>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a72      	ldr	r2, [pc, #456]	@ (8002e18 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 8002c66:	edd7 7a00 	vldr	s15, [r7]
 8002c6a:	eef1 7a67 	vneg.f32	s15, s15
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002c7a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002e1c <Double_Roll_Pitch_PID_Calculation+0x26c>
 8002c7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002c88:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8002e20 <Double_Roll_Pitch_PID_Calculation+0x270>
 8002c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002cbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8002cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	ed93 7a06 	vldr	s14, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d16:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8002e08 <Double_Roll_Pitch_PID_Calculation+0x258>
 8002d1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002d2e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002e0c <Double_Roll_Pitch_PID_Calculation+0x25c>
 8002d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	dd03      	ble.n	8002d44 <Double_Roll_Pitch_PID_Calculation+0x194>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a34      	ldr	r2, [pc, #208]	@ (8002e10 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d42:	e00c      	b.n	8002d5e <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002d4a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e14 <Double_Roll_Pitch_PID_Calculation+0x264>
 8002d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	d502      	bpl.n	8002d5e <Double_Roll_Pitch_PID_Calculation+0x1ae>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e18 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d84:	eeb1 7a67 	vneg.f32	s14, s15
 8002d88:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8002e08 <Double_Roll_Pitch_PID_Calculation+0x258>
 8002d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002da4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002da8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	edd3 7a08 	vldr	s15, [r3, #32]
 8002db2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002db6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/****************************************************************************************/
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	3a83126f 	.word	0x3a83126f
 8002e0c:	43fa0000 	.word	0x43fa0000
 8002e10:	43fa0000 	.word	0x43fa0000
 8002e14:	c3fa0000 	.word	0xc3fa0000
 8002e18:	c3fa0000 	.word	0xc3fa0000
 8002e1c:	3ecccccd 	.word	0x3ecccccd
 8002e20:	3f19999a 	.word	0x3f19999a

08002e24 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e30:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e34:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e60:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002f48 <Single_Yaw_Heading_PID_Calculation+0x124>
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	dd0a      	ble.n	8002e84 <Single_Yaw_Heading_PID_Calculation+0x60>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e74:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002f4c <Single_Yaw_Heading_PID_Calculation+0x128>
 8002e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	edc3 7a06 	vstr	s15, [r3, #24]
 8002e82:	e013      	b.n	8002eac <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e8a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002f50 <Single_Yaw_Heading_PID_Calculation+0x12c>
 8002e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e96:	d509      	bpl.n	8002eac <Single_Yaw_Heading_PID_Calculation+0x88>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e9e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002f4c <Single_Yaw_Heading_PID_Calculation+0x128>
 8002ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	ed93 7a06 	vldr	s14, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ece:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002f54 <Single_Yaw_Heading_PID_Calculation+0x130>
 8002ed2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 8002ef6:	edd7 7a00 	vldr	s15, [r7]
 8002efa:	eef1 7a67 	vneg.f32	s15, s15
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/***************************************************************/
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	43340000 	.word	0x43340000
 8002f4c:	43b40000 	.word	0x43b40000
 8002f50:	c3340000 	.word	0xc3340000
 8002f54:	3a83126f 	.word	0x3a83126f

08002f58 <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f64:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	edd3 7a00 	vldr	s15, [r3]
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fac:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8003040 <Single_Yaw_Rate_PID_Calculation+0xe8>
 8002fb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	ed93 7a07 	vldr	s14, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe4:	eeb1 7a67 	vneg.f32	s14, s15
 8002fe8:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8003040 <Single_Yaw_Rate_PID_Calculation+0xe8>
 8002fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	ed93 7a08 	vldr	s14, [r3, #32]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	edd3 7a02 	vldr	s15, [r3, #8]
 800300a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800302a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/*******************************************************************/
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	3a83126f 	.word	0x3a83126f

08003044 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	61da      	str	r2, [r3, #28]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 8003064:	4809      	ldr	r0, [pc, #36]	@ (800308c <Reset_All_PID_Integrator+0x2c>)
 8003066:	f7ff ffed 	bl	8003044 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 800306a:	4809      	ldr	r0, [pc, #36]	@ (8003090 <Reset_All_PID_Integrator+0x30>)
 800306c:	f7ff ffea 	bl	8003044 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 8003070:	4808      	ldr	r0, [pc, #32]	@ (8003094 <Reset_All_PID_Integrator+0x34>)
 8003072:	f7ff ffe7 	bl	8003044 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 8003076:	4808      	ldr	r0, [pc, #32]	@ (8003098 <Reset_All_PID_Integrator+0x38>)
 8003078:	f7ff ffe4 	bl	8003044 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 800307c:	4807      	ldr	r0, [pc, #28]	@ (800309c <Reset_All_PID_Integrator+0x3c>)
 800307e:	f7ff ffe1 	bl	8003044 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 8003082:	4807      	ldr	r0, [pc, #28]	@ (80030a0 <Reset_All_PID_Integrator+0x40>)
 8003084:	f7ff ffde 	bl	8003044 <Reset_PID_Integrator>
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000310 	.word	0x20000310
 8003090:	20000348 	.word	0x20000348
 8003094:	20000380 	.word	0x20000380
 8003098:	200003b8 	.word	0x200003b8
 800309c:	200003f0 	.word	0x200003f0
 80030a0:	20000428 	.word	0x20000428

080030a4 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	ed93 7a00 	vldr	s14, [r3]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	edd3 6a00 	vldr	s13, [r3]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3308      	adds	r3, #8
 80030d8:	edd3 6a00 	vldr	s13, [r3]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3308      	adds	r3, #8
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	330c      	adds	r3, #12
 80030f0:	edd3 6a00 	vldr	s13, [r3]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	330c      	adds	r3, #12
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003104:	eeb0 0a67 	vmov.f32	s0, s15
 8003108:	f000 f90e 	bl	8003328 <invSqrt>
 800310c:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	ed97 7a07 	vldr	s14, [r7, #28]
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ed97 7a07 	vldr	s14, [r7, #28]
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3308      	adds	r3, #8
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	330c      	adds	r3, #12
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ed97 7a07 	vldr	s14, [r7, #28]
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 800315e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003162:	edd7 7a04 	vldr	s15, [r7, #16]
 8003166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800316a:	edd7 6a06 	vldr	s13, [r7, #24]
 800316e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800317e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003182:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003186:	edd7 7a05 	vldr	s15, [r7, #20]
 800318a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800318e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003192:	edd7 7a04 	vldr	s15, [r7, #16]
 8003196:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800319a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800319e:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031aa:	eef0 0a67 	vmov.f32	s1, s15
 80031ae:	eeb0 0a66 	vmov.f32	s0, s13
 80031b2:	f00b fd73 	bl	800ec9c <atan2f>
 80031b6:	eef0 7a40 	vmov.f32	s15, s0
 80031ba:	4b55      	ldr	r3, [pc, #340]	@ (8003310 <Quaternion_Update+0x26c>)
 80031bc:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 80031c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80031c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80031c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80031d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031e0:	eeb0 0a67 	vmov.f32	s0, s15
 80031e4:	f00b fd2e 	bl	800ec44 <asinf>
 80031e8:	eef0 7a40 	vmov.f32	s15, s0
 80031ec:	eef1 7a67 	vneg.f32	s15, s15
 80031f0:	4b48      	ldr	r3, [pc, #288]	@ (8003314 <Quaternion_Update+0x270>)
 80031f2:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80031f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80031fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80031fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003202:	edd7 6a04 	vldr	s13, [r7, #16]
 8003206:	edd7 7a03 	vldr	s15, [r7, #12]
 800320a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800320e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003212:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003216:	edd7 7a06 	vldr	s15, [r7, #24]
 800321a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800321e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003222:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003226:	ee37 7a67 	vsub.f32	s14, s14, s15
 800322a:	edd7 7a04 	vldr	s15, [r7, #16]
 800322e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003236:	edd7 7a03 	vldr	s15, [r7, #12]
 800323a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	eef0 0a67 	vmov.f32	s1, s15
 8003246:	eeb0 0a66 	vmov.f32	s0, s13
 800324a:	f00b fd27 	bl	800ec9c <atan2f>
 800324e:	eef0 7a40 	vmov.f32	s15, s0
 8003252:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <Quaternion_Update+0x274>)
 8003254:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8003258:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <Quaternion_Update+0x26c>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800331c <Quaternion_Update+0x278>
 8003262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003266:	4b2a      	ldr	r3, [pc, #168]	@ (8003310 <Quaternion_Update+0x26c>)
 8003268:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 800326c:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <Quaternion_Update+0x270>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800331c <Quaternion_Update+0x278>
 8003276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800327a:	4b26      	ldr	r3, [pc, #152]	@ (8003314 <Quaternion_Update+0x270>)
 800327c:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <Quaternion_Update+0x274>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800331c <Quaternion_Update+0x278>
 800328a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328e:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <Quaternion_Update+0x274>)
 8003290:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003294:	4b20      	ldr	r3, [pc, #128]	@ (8003318 <Quaternion_Update+0x274>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	db0a      	blt.n	80032ba <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 80032a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <Quaternion_Update+0x274>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003320 <Quaternion_Update+0x27c>
 80032ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b2:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <Quaternion_Update+0x274>)
 80032b4:	edc3 7a00 	vstr	s15, [r3]
 80032b8:	e007      	b.n	80032ca <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 80032ba:	4b17      	ldr	r3, [pc, #92]	@ (8003318 <Quaternion_Update+0x274>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	eef1 7a67 	vneg.f32	s15, s15
 80032c4:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <Quaternion_Update+0x274>)
 80032c6:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <Quaternion_Update+0x26c>)
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	db0a      	blt.n	80032f0 <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 80032da:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <Quaternion_Update+0x26c>)
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003324 <Quaternion_Update+0x280>
 80032e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e8:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <Quaternion_Update+0x26c>)
 80032ea:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 80032ee:	e00b      	b.n	8003308 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 80032f0:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <Quaternion_Update+0x26c>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8003324 <Quaternion_Update+0x280>
 80032fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032fe:	eef1 7a67 	vneg.f32	s15, s15
 8003302:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <Quaternion_Update+0x26c>)
 8003304:	edc3 7a00 	vstr	s15, [r3]
}
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000464 	.word	0x20000464
 8003314:	20000460 	.word	0x20000460
 8003318:	20000468 	.word	0x20000468
 800331c:	42652ee1 	.word	0x42652ee1
 8003320:	43b40000 	.word	0x43b40000
 8003324:	43340000 	.word	0x43340000

08003328 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003332:	edd7 7a01 	vldr	s15, [r7, #4]
 8003336:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800333a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800333e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003346:	f107 0310 	add.w	r3, r7, #16
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	105a      	asrs	r2, r3, #1
 8003352:	4b12      	ldr	r3, [pc, #72]	@ (800339c <invSqrt+0x74>)
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003360:	ed97 7a04 	vldr	s14, [r7, #16]
 8003364:	edd7 7a05 	vldr	s15, [r7, #20]
 8003368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800336c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003374:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800337c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
}
 800338e:	eeb0 0a67 	vmov.f32	s0, s15
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	5f3759df 	.word	0x5f3759df

080033a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033a6:	463b      	mov	r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80033b2:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033b4:	4a21      	ldr	r2, [pc, #132]	@ (800343c <MX_ADC1_Init+0x9c>)
 80033b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80033b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80033be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033d2:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033da:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033dc:	2200      	movs	r2, #0
 80033de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033e0:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033e2:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <MX_ADC1_Init+0xa0>)
 80033e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033e6:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80033ec:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80033f2:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <MX_ADC1_Init+0x98>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003400:	480d      	ldr	r0, [pc, #52]	@ (8003438 <MX_ADC1_Init+0x98>)
 8003402:	f003 fdcf 	bl	8006fa4 <HAL_ADC_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800340c:	f002 fb89 	bl	8005b22 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003410:	2308      	movs	r3, #8
 8003412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003414:	2301      	movs	r3, #1
 8003416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003418:	2307      	movs	r3, #7
 800341a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800341c:	463b      	mov	r3, r7
 800341e:	4619      	mov	r1, r3
 8003420:	4805      	ldr	r0, [pc, #20]	@ (8003438 <MX_ADC1_Init+0x98>)
 8003422:	f003 ff31 	bl	8007288 <HAL_ADC_ConfigChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800342c:	f002 fb79 	bl	8005b22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000046c 	.word	0x2000046c
 800343c:	40012000 	.word	0x40012000
 8003440:	0f000001 	.word	0x0f000001

08003444 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2e      	ldr	r2, [pc, #184]	@ (800351c <HAL_ADC_MspInit+0xd8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d156      	bne.n	8003514 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	4b2d      	ldr	r3, [pc, #180]	@ (8003520 <HAL_ADC_MspInit+0xdc>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	4a2c      	ldr	r2, [pc, #176]	@ (8003520 <HAL_ADC_MspInit+0xdc>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	6453      	str	r3, [r2, #68]	@ 0x44
 8003476:	4b2a      	ldr	r3, [pc, #168]	@ (8003520 <HAL_ADC_MspInit+0xdc>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <HAL_ADC_MspInit+0xdc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	4a25      	ldr	r2, [pc, #148]	@ (8003520 <HAL_ADC_MspInit+0xdc>)
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	6313      	str	r3, [r2, #48]	@ 0x30
 8003492:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <HAL_ADC_MspInit+0xdc>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800349e:	2301      	movs	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a2:	2303      	movs	r3, #3
 80034a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034aa:	f107 0314 	add.w	r3, r7, #20
 80034ae:	4619      	mov	r1, r3
 80034b0:	481c      	ldr	r0, [pc, #112]	@ (8003524 <HAL_ADC_MspInit+0xe0>)
 80034b2:	f004 fe9d 	bl	80081f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034b8:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <HAL_ADC_MspInit+0xe8>)
 80034ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c2:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80034ce:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034d4:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034dc:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034f8:	480b      	ldr	r0, [pc, #44]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 80034fa:	f004 fa77 	bl	80079ec <HAL_DMA_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003504:	f002 fb0d 	bl	8005b22 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 800350c:	639a      	str	r2, [r3, #56]	@ 0x38
 800350e:	4a06      	ldr	r2, [pc, #24]	@ (8003528 <HAL_ADC_MspInit+0xe4>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003514:	bf00      	nop
 8003516:	3728      	adds	r7, #40	@ 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40012000 	.word	0x40012000
 8003520:	40023800 	.word	0x40023800
 8003524:	40020400 	.word	0x40020400
 8003528:	200004b4 	.word	0x200004b4
 800352c:	40026410 	.word	0x40026410

08003530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <MX_DMA_Init+0x3c>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	4a0b      	ldr	r2, [pc, #44]	@ (800356c <MX_DMA_Init+0x3c>)
 8003540:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003544:	6313      	str	r3, [r2, #48]	@ 0x30
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <MX_DMA_Init+0x3c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2100      	movs	r1, #0
 8003556:	2038      	movs	r0, #56	@ 0x38
 8003558:	f004 fa11 	bl	800797e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800355c:	2038      	movs	r0, #56	@ 0x38
 800355e:	f004 fa2a 	bl	80079b6 <HAL_NVIC_EnableIRQ>

}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <LL_GPIO_SetOutputPin>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	619a      	str	r2, [r3, #24]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_GPIO_ResetOutputPin>:
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <LL_AHB1_GRP1_EnableClock>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80035b4:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b8:	4907      	ldr	r1, [pc, #28]	@ (80035d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4313      	orrs	r3, r2
 80035be:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80035c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4013      	ands	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40023800 	.word	0x40023800

080035dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e2:	463b      	mov	r3, r7
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
 80035f0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80035f2:	2004      	movs	r0, #4
 80035f4:	f7ff ffda 	bl	80035ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80035f8:	2080      	movs	r0, #128	@ 0x80
 80035fa:	f7ff ffd7 	bl	80035ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80035fe:	2001      	movs	r0, #1
 8003600:	f7ff ffd4 	bl	80035ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003604:	2002      	movs	r0, #2
 8003606:	f7ff ffd1 	bl	80035ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800360a:	2008      	movs	r0, #8
 800360c:	f7ff ffce 	bl	80035ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003614:	482e      	ldr	r0, [pc, #184]	@ (80036d0 <MX_GPIO_Init+0xf4>)
 8003616:	f7ff ffab 	bl	8003570 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 800361a:	f240 2117 	movw	r1, #535	@ 0x217
 800361e:	482c      	ldr	r0, [pc, #176]	@ (80036d0 <MX_GPIO_Init+0xf4>)
 8003620:	f7ff ffb4 	bl	800358c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8003624:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8003628:	482a      	ldr	r0, [pc, #168]	@ (80036d4 <MX_GPIO_Init+0xf8>)
 800362a:	f7ff ffaf 	bl	800358c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800362e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003632:	4829      	ldr	r0, [pc, #164]	@ (80036d8 <MX_GPIO_Init+0xfc>)
 8003634:	f7ff ffaa 	bl	800358c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8003638:	f242 2317 	movw	r3, #8727	@ 0x2217
 800363c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800363e:	2301      	movs	r3, #1
 8003640:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800364e:	463b      	mov	r3, r7
 8003650:	4619      	mov	r1, r3
 8003652:	481f      	ldr	r0, [pc, #124]	@ (80036d0 <MX_GPIO_Init+0xf4>)
 8003654:	f007 fdfb 	bl	800b24e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8003658:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800365c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003666:	463b      	mov	r3, r7
 8003668:	4619      	mov	r1, r3
 800366a:	4819      	ldr	r0, [pc, #100]	@ (80036d0 <MX_GPIO_Init+0xf4>)
 800366c:	f007 fdef 	bl	800b24e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8003670:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8003674:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003676:	2301      	movs	r3, #1
 8003678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	463b      	mov	r3, r7
 8003688:	4619      	mov	r1, r3
 800368a:	4812      	ldr	r0, [pc, #72]	@ (80036d4 <MX_GPIO_Init+0xf8>)
 800368c:	f007 fddf 	bl	800b24e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003694:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003696:	2301      	movs	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a6:	463b      	mov	r3, r7
 80036a8:	4619      	mov	r1, r3
 80036aa:	480b      	ldr	r0, [pc, #44]	@ (80036d8 <MX_GPIO_Init+0xfc>)
 80036ac:	f007 fdcf 	bl	800b24e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80036b0:	2380      	movs	r3, #128	@ 0x80
 80036b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036bc:	463b      	mov	r3, r7
 80036be:	4619      	mov	r1, r3
 80036c0:	4804      	ldr	r0, [pc, #16]	@ (80036d4 <MX_GPIO_Init+0xf8>)
 80036c2:	f007 fdc4 	bl	800b24e <LL_GPIO_Init>

}
 80036c6:	bf00      	nop
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020000 	.word	0x40020000

080036dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036e0:	4b12      	ldr	r3, [pc, #72]	@ (800372c <MX_I2C1_Init+0x50>)
 80036e2:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <MX_I2C1_Init+0x54>)
 80036e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80036e6:	4b11      	ldr	r3, [pc, #68]	@ (800372c <MX_I2C1_Init+0x50>)
 80036e8:	4a12      	ldr	r2, [pc, #72]	@ (8003734 <MX_I2C1_Init+0x58>)
 80036ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036ec:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <MX_I2C1_Init+0x50>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036f2:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <MX_I2C1_Init+0x50>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <MX_I2C1_Init+0x50>)
 80036fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003700:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <MX_I2C1_Init+0x50>)
 8003702:	2200      	movs	r2, #0
 8003704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003706:	4b09      	ldr	r3, [pc, #36]	@ (800372c <MX_I2C1_Init+0x50>)
 8003708:	2200      	movs	r2, #0
 800370a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800370c:	4b07      	ldr	r3, [pc, #28]	@ (800372c <MX_I2C1_Init+0x50>)
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003712:	4b06      	ldr	r3, [pc, #24]	@ (800372c <MX_I2C1_Init+0x50>)
 8003714:	2200      	movs	r2, #0
 8003716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003718:	4804      	ldr	r0, [pc, #16]	@ (800372c <MX_I2C1_Init+0x50>)
 800371a:	f004 ff05 	bl	8008528 <HAL_I2C_Init>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003724:	f002 f9fd 	bl	8005b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000514 	.word	0x20000514
 8003730:	40005400 	.word	0x40005400
 8003734:	00061a80 	.word	0x00061a80

08003738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a19      	ldr	r2, [pc, #100]	@ (80037bc <HAL_I2C_MspInit+0x84>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d12c      	bne.n	80037b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	4b18      	ldr	r3, [pc, #96]	@ (80037c0 <HAL_I2C_MspInit+0x88>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_I2C_MspInit+0x88>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	6313      	str	r3, [r2, #48]	@ 0x30
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_I2C_MspInit+0x88>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003776:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800377a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800377c:	2312      	movs	r3, #18
 800377e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003784:	2303      	movs	r3, #3
 8003786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003788:	2304      	movs	r3, #4
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4619      	mov	r1, r3
 8003792:	480c      	ldr	r0, [pc, #48]	@ (80037c4 <HAL_I2C_MspInit+0x8c>)
 8003794:	f004 fd2c 	bl	80081f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <HAL_I2C_MspInit+0x88>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	4a07      	ldr	r2, [pc, #28]	@ (80037c0 <HAL_I2C_MspInit+0x88>)
 80037a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_I2C_MspInit+0x88>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80037b4:	bf00      	nop
 80037b6:	3728      	adds	r7, #40	@ 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40005400 	.word	0x40005400
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020400 	.word	0x40020400

080037c8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	601a      	str	r2, [r3, #0]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	43db      	mvns	r3, r3
 800381c:	401a      	ands	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60da      	str	r2, [r3, #12]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	@ 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	330c      	adds	r3, #12
 8003880:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	60bb      	str	r3, [r7, #8]
   return(result);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f043 0320 	orr.w	r3, r3, #32
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	330c      	adds	r3, #12
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	61ba      	str	r2, [r7, #24]
 800389a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6979      	ldr	r1, [r7, #20]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	613b      	str	r3, [r7, #16]
   return(result);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e7      	bne.n	800387c <LL_USART_EnableIT_RXNE+0x8>
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3724      	adds	r7, #36	@ 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	605a      	str	r2, [r3, #4]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_GPIO_SetOutputPin>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	619a      	str	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_GPIO_ResetOutputPin>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	041a      	lsls	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	619a      	str	r2, [r3, #24]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4013      	ands	r3, r2
 8003928:	041a      	lsls	r2, r3, #16
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43d9      	mvns	r1, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	400b      	ands	r3, r1
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e011      	b.n	800397a <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8003956:	bf00      	nop
 8003958:	480c      	ldr	r0, [pc, #48]	@ (800398c <_write+0x48>)
 800395a:	f7ff ff78 	bl	800384e <LL_USART_IsActiveFlag_TXE>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f9      	beq.n	8003958 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	4413      	add	r3, r2
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	4807      	ldr	r0, [pc, #28]	@ (800398c <_write+0x48>)
 8003970:	f7ff ffa3 	bl	80038ba <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3301      	adds	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	dbe9      	blt.n	8003956 <_write+0x12>
	}
	return len;
 8003982:	687b      	ldr	r3, [r7, #4]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40011400 	.word	0x40011400

08003990 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b090      	sub	sp, #64	@ 0x40
 8003994:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned short adcVal;

	short gyro_x_offset = -6,gyro_y_offset = -1,gyro_z_offset = -3;
 8003996:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800399a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800399c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039a0:	843b      	strh	r3, [r7, #32]
 80039a2:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80039a6:	83fb      	strh	r3, [r7, #30]
	unsigned char motor_arming_flag = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	unsigned short iBus_SwA_Prev = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	unsigned char iBus_rx_cnt = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80039b8:	f003 fa5e 	bl	8006e78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80039bc:	f001 fb80 	bl	80050c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80039c0:	f7ff fe0c 	bl	80035dc <MX_GPIO_Init>
	MX_DMA_Init();
 80039c4:	f7ff fdb4 	bl	8003530 <MX_DMA_Init>
	MX_TIM3_Init();
 80039c8:	f002 fe2c 	bl	8006624 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 80039cc:	f003 f97a 	bl	8006cc4 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 80039d0:	f002 f95a 	bl	8005c88 <MX_SPI2_Init>
	MX_SPI1_Init();
 80039d4:	f002 f906 	bl	8005be4 <MX_SPI1_Init>
	MX_SPI3_Init();
 80039d8:	f002 f9aa 	bl	8005d30 <MX_SPI3_Init>
	MX_UART4_Init();
 80039dc:	f003 f86e 	bl	8006abc <MX_UART4_Init>
	MX_UART5_Init();
 80039e0:	f003 f8ce 	bl	8006b80 <MX_UART5_Init>
	MX_TIM5_Init();
 80039e4:	f002 fe90 	bl	8006708 <MX_TIM5_Init>
	MX_I2C1_Init();
 80039e8:	f7ff fe78 	bl	80036dc <MX_I2C1_Init>
	MX_ADC1_Init();
 80039ec:	f7ff fcd8 	bl	80033a0 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80039f0:	f003 f93e 	bl	8006c70 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 80039f4:	f002 ff30 	bl	8006858 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	  LL_TIM_EnableCounter(TIM3); //Buzzer
 80039f8:	488f      	ldr	r0, [pc, #572]	@ (8003c38 <main+0x2a8>)
 80039fa:	f7ff fee5 	bl	80037c8 <LL_TIM_EnableCounter>

	  LL_USART_EnableIT_RXNE(USART6); //Debug UART
 80039fe:	488f      	ldr	r0, [pc, #572]	@ (8003c3c <main+0x2ac>)
 8003a00:	f7ff ff38 	bl	8003874 <LL_USART_EnableIT_RXNE>
	  LL_USART_EnableIT_RXNE(UART4); //GPS
 8003a04:	488e      	ldr	r0, [pc, #568]	@ (8003c40 <main+0x2b0>)
 8003a06:	f7ff ff35 	bl	8003874 <LL_USART_EnableIT_RXNE>
	  LL_USART_EnableIT_RXNE(UART5); //FS-iA6B
 8003a0a:	488e      	ldr	r0, [pc, #568]	@ (8003c44 <main+0x2b4>)
 8003a0c:	f7ff ff32 	bl	8003874 <LL_USART_EnableIT_RXNE>

	  LL_TIM_EnableCounter(TIM5); //Motor PWM
 8003a10:	488d      	ldr	r0, [pc, #564]	@ (8003c48 <main+0x2b8>)
 8003a12:	f7ff fed9 	bl	80037c8 <LL_TIM_EnableCounter>
	  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8003a16:	2101      	movs	r1, #1
 8003a18:	488b      	ldr	r0, [pc, #556]	@ (8003c48 <main+0x2b8>)
 8003a1a:	f7ff fee5 	bl	80037e8 <LL_TIM_CC_EnableChannel>
	  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003a1e:	2110      	movs	r1, #16
 8003a20:	4889      	ldr	r0, [pc, #548]	@ (8003c48 <main+0x2b8>)
 8003a22:	f7ff fee1 	bl	80037e8 <LL_TIM_CC_EnableChannel>
	  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003a26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a2a:	4887      	ldr	r0, [pc, #540]	@ (8003c48 <main+0x2b8>)
 8003a2c:	f7ff fedc 	bl	80037e8 <LL_TIM_CC_EnableChannel>
	  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003a30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a34:	4884      	ldr	r0, [pc, #528]	@ (8003c48 <main+0x2b8>)
 8003a36:	f7ff fed7 	bl	80037e8 <LL_TIM_CC_EnableChannel>

	  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1); //Battery ADC
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4882      	ldr	r0, [pc, #520]	@ (8003c4c <main+0x2bc>)
 8003a42:	f003 faf3 	bl	800702c <HAL_ADC_Start_DMA>

	  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //Telemetry
 8003a46:	2201      	movs	r2, #1
 8003a48:	4981      	ldr	r1, [pc, #516]	@ (8003c50 <main+0x2c0>)
 8003a4a:	4882      	ldr	r0, [pc, #520]	@ (8003c54 <main+0x2c4>)
 8003a4c:	f006 fb39 	bl	800a0c2 <HAL_UART_Receive_IT>

	  LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 8003a50:	4881      	ldr	r0, [pc, #516]	@ (8003c58 <main+0x2c8>)
 8003a52:	f7ff feb9 	bl	80037c8 <LL_TIM_EnableCounter>
	  LL_TIM_EnableIT_UPDATE(TIM7);
 8003a56:	4880      	ldr	r0, [pc, #512]	@ (8003c58 <main+0x2c8>)
 8003a58:	f7ff fee9 	bl	800382e <LL_TIM_EnableIT_UPDATE>


	  TIM3->PSC = 1000;
 8003a5c:	4b76      	ldr	r3, [pc, #472]	@ (8003c38 <main+0x2a8>)
 8003a5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a62:	629a      	str	r2, [r3, #40]	@ 0x28
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a68:	4873      	ldr	r0, [pc, #460]	@ (8003c38 <main+0x2a8>)
 8003a6a:	f7ff febd 	bl	80037e8 <LL_TIM_CC_EnableChannel>
	  HAL_Delay(60);
 8003a6e:	203c      	movs	r0, #60	@ 0x3c
 8003a70:	f003 fa74 	bl	8006f5c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a78:	486f      	ldr	r0, [pc, #444]	@ (8003c38 <main+0x2a8>)
 8003a7a:	f7ff fec6 	bl	800380a <LL_TIM_CC_DisableChannel>
	  HAL_Delay(60);
 8003a7e:	203c      	movs	r0, #60	@ 0x3c
 8003a80:	f003 fa6c 	bl	8006f5c <HAL_Delay>
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a88:	486b      	ldr	r0, [pc, #428]	@ (8003c38 <main+0x2a8>)
 8003a8a:	f7ff fead 	bl	80037e8 <LL_TIM_CC_EnableChannel>
	  HAL_Delay(60);
 8003a8e:	203c      	movs	r0, #60	@ 0x3c
 8003a90:	f003 fa64 	bl	8006f5c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a98:	4867      	ldr	r0, [pc, #412]	@ (8003c38 <main+0x2a8>)
 8003a9a:	f7ff feb6 	bl	800380a <LL_TIM_CC_DisableChannel>
	  HAL_Delay(60);
 8003a9e:	203c      	movs	r0, #60	@ 0x3c
 8003aa0:	f003 fa5c 	bl	8006f5c <HAL_Delay>
	  printf("Checking sensor connection..\n");
 8003aa4:	486d      	ldr	r0, [pc, #436]	@ (8003c5c <main+0x2cc>)
 8003aa6:	f009 f95f 	bl	800cd68 <puts>

	  if(BNO080_Initialization() != 0)
 8003aaa:	f7fd fd2b 	bl	8001504 <BNO080_Initialization>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03b      	beq.n	8003b2c <main+0x19c>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ab4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ab8:	485f      	ldr	r0, [pc, #380]	@ (8003c38 <main+0x2a8>)
 8003aba:	f7ff fe95 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1000;
 8003abe:	4b5e      	ldr	r3, [pc, #376]	@ (8003c38 <main+0x2a8>)
 8003ac0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ac4:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003ac6:	2064      	movs	r0, #100	@ 0x64
 8003ac8:	f003 fa48 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 1500;
 8003acc:	4b5a      	ldr	r3, [pc, #360]	@ (8003c38 <main+0x2a8>)
 8003ace:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003ad4:	2064      	movs	r0, #100	@ 0x64
 8003ad6:	f003 fa41 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 2000;
 8003ada:	4b57      	ldr	r3, [pc, #348]	@ (8003c38 <main+0x2a8>)
 8003adc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003ae2:	2064      	movs	r0, #100	@ 0x64
 8003ae4:	f003 fa3a 	bl	8006f5c <HAL_Delay>

		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ae8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003aec:	4852      	ldr	r0, [pc, #328]	@ (8003c38 <main+0x2a8>)
 8003aee:	f7ff fe8c 	bl	800380a <LL_TIM_CC_DisableChannel>

		  printf("\nBNO080 failed. Program shutting down...\n");
 8003af2:	485b      	ldr	r0, [pc, #364]	@ (8003c60 <main+0x2d0>)
 8003af4:	f009 f938 	bl	800cd68 <puts>
		  while(1)
		  {
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003af8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003afc:	484e      	ldr	r0, [pc, #312]	@ (8003c38 <main+0x2a8>)
 8003afe:	f7ff fe84 	bl	800380a <LL_TIM_CC_DisableChannel>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003b02:	2101      	movs	r1, #1
 8003b04:	4857      	ldr	r0, [pc, #348]	@ (8003c64 <main+0x2d4>)
 8003b06:	f7ff ff04 	bl	8003912 <LL_GPIO_TogglePin>
			  HAL_Delay(200);
 8003b0a:	20c8      	movs	r0, #200	@ 0xc8
 8003b0c:	f003 fa26 	bl	8006f5c <HAL_Delay>
			  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b14:	4848      	ldr	r0, [pc, #288]	@ (8003c38 <main+0x2a8>)
 8003b16:	f7ff fe67 	bl	80037e8 <LL_TIM_CC_EnableChannel>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4851      	ldr	r0, [pc, #324]	@ (8003c64 <main+0x2d4>)
 8003b1e:	f7ff fef8 	bl	8003912 <LL_GPIO_TogglePin>
			  HAL_Delay(200);
 8003b22:	20c8      	movs	r0, #200	@ 0xc8
 8003b24:	f003 fa1a 	bl	8006f5c <HAL_Delay>
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b28:	bf00      	nop
 8003b2a:	e7e5      	b.n	8003af8 <main+0x168>
		  }
	  }
	  BNO080_enableGameRotationVector(2500);
 8003b2c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003b30:	f7fe f827 	bl	8001b82 <BNO080_enableGameRotationVector>

	  if(ICM20602_Initialization() != 0)
 8003b34:	f7fe fcc6 	bl	80024c4 <ICM20602_Initialization>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d03b      	beq.n	8003bb6 <main+0x226>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b42:	483d      	ldr	r0, [pc, #244]	@ (8003c38 <main+0x2a8>)
 8003b44:	f7ff fe50 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1000;
 8003b48:	4b3b      	ldr	r3, [pc, #236]	@ (8003c38 <main+0x2a8>)
 8003b4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003b50:	2064      	movs	r0, #100	@ 0x64
 8003b52:	f003 fa03 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 1500;
 8003b56:	4b38      	ldr	r3, [pc, #224]	@ (8003c38 <main+0x2a8>)
 8003b58:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b5c:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003b5e:	2064      	movs	r0, #100	@ 0x64
 8003b60:	f003 f9fc 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 2000;
 8003b64:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <main+0x2a8>)
 8003b66:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b6a:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003b6c:	2064      	movs	r0, #100	@ 0x64
 8003b6e:	f003 f9f5 	bl	8006f5c <HAL_Delay>

		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b76:	4830      	ldr	r0, [pc, #192]	@ (8003c38 <main+0x2a8>)
 8003b78:	f7ff fe47 	bl	800380a <LL_TIM_CC_DisableChannel>

		  printf("\nICM-20602 failed. Program shutting down...\n");
 8003b7c:	483a      	ldr	r0, [pc, #232]	@ (8003c68 <main+0x2d8>)
 8003b7e:	f009 f8f3 	bl	800cd68 <puts>
		  while(1)
		  {
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b86:	482c      	ldr	r0, [pc, #176]	@ (8003c38 <main+0x2a8>)
 8003b88:	f7ff fe3f 	bl	800380a <LL_TIM_CC_DisableChannel>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	4835      	ldr	r0, [pc, #212]	@ (8003c64 <main+0x2d4>)
 8003b90:	f7ff febf 	bl	8003912 <LL_GPIO_TogglePin>
			  HAL_Delay(200);
 8003b94:	20c8      	movs	r0, #200	@ 0xc8
 8003b96:	f003 f9e1 	bl	8006f5c <HAL_Delay>
			  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b9e:	4826      	ldr	r0, [pc, #152]	@ (8003c38 <main+0x2a8>)
 8003ba0:	f7ff fe22 	bl	80037e8 <LL_TIM_CC_EnableChannel>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	482f      	ldr	r0, [pc, #188]	@ (8003c64 <main+0x2d4>)
 8003ba8:	f7ff feb3 	bl	8003912 <LL_GPIO_TogglePin>
			  HAL_Delay(200);
 8003bac:	20c8      	movs	r0, #200	@ 0xc8
 8003bae:	f003 f9d5 	bl	8006f5c <HAL_Delay>
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bb2:	bf00      	nop
 8003bb4:	e7e5      	b.n	8003b82 <main+0x1f2>
		  }
	  }
	  if(LPS22HH_Initialization() != 0)
 8003bb6:	f7fe ff11 	bl	80029dc <LPS22HH_Initialization>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d057      	beq.n	8003c70 <main+0x2e0>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bc4:	481c      	ldr	r0, [pc, #112]	@ (8003c38 <main+0x2a8>)
 8003bc6:	f7ff fe0f 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1000;
 8003bca:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <main+0x2a8>)
 8003bcc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003bd2:	2064      	movs	r0, #100	@ 0x64
 8003bd4:	f003 f9c2 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 1500;
 8003bd8:	4b17      	ldr	r3, [pc, #92]	@ (8003c38 <main+0x2a8>)
 8003bda:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003be0:	2064      	movs	r0, #100	@ 0x64
 8003be2:	f003 f9bb 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 2000;
 8003be6:	4b14      	ldr	r3, [pc, #80]	@ (8003c38 <main+0x2a8>)
 8003be8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bec:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003bee:	2064      	movs	r0, #100	@ 0x64
 8003bf0:	f003 f9b4 	bl	8006f5c <HAL_Delay>

		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bf4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bf8:	480f      	ldr	r0, [pc, #60]	@ (8003c38 <main+0x2a8>)
 8003bfa:	f7ff fe06 	bl	800380a <LL_TIM_CC_DisableChannel>

		  printf("\nLPS22HH failed. Program shutting down...\n");
 8003bfe:	481b      	ldr	r0, [pc, #108]	@ (8003c6c <main+0x2dc>)
 8003c00:	f009 f8b2 	bl	800cd68 <puts>
		  while(1)
		  {
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c08:	480b      	ldr	r0, [pc, #44]	@ (8003c38 <main+0x2a8>)
 8003c0a:	f7ff fdfe 	bl	800380a <LL_TIM_CC_DisableChannel>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003c0e:	2104      	movs	r1, #4
 8003c10:	4814      	ldr	r0, [pc, #80]	@ (8003c64 <main+0x2d4>)
 8003c12:	f7ff fe7e 	bl	8003912 <LL_GPIO_TogglePin>
			  HAL_Delay(200);
 8003c16:	20c8      	movs	r0, #200	@ 0xc8
 8003c18:	f003 f9a0 	bl	8006f5c <HAL_Delay>
			  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c20:	4805      	ldr	r0, [pc, #20]	@ (8003c38 <main+0x2a8>)
 8003c22:	f7ff fde1 	bl	80037e8 <LL_TIM_CC_EnableChannel>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8003c26:	2104      	movs	r1, #4
 8003c28:	480e      	ldr	r0, [pc, #56]	@ (8003c64 <main+0x2d4>)
 8003c2a:	f7ff fe72 	bl	8003912 <LL_GPIO_TogglePin>
			  HAL_Delay(200);
 8003c2e:	20c8      	movs	r0, #200	@ 0xc8
 8003c30:	f003 f994 	bl	8006f5c <HAL_Delay>
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003c34:	bf00      	nop
 8003c36:	e7e5      	b.n	8003c04 <main+0x274>
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	40004c00 	.word	0x40004c00
 8003c44:	40005000 	.word	0x40005000
 8003c48:	40000c00 	.word	0x40000c00
 8003c4c:	2000046c 	.word	0x2000046c
 8003c50:	200005d9 	.word	0x200005d9
 8003c54:	200005e8 	.word	0x200005e8
 8003c58:	40001400 	.word	0x40001400
 8003c5c:	0800fa80 	.word	0x0800fa80
 8003c60:	0800faa0 	.word	0x0800faa0
 8003c64:	40020800 	.word	0x40020800
 8003c68:	0800facc 	.word	0x0800facc
 8003c6c:	0800faf8 	.word	0x0800faf8
		  }
	  }

	  printf("All sensors OK!\n\n");
 8003c70:	48c1      	ldr	r0, [pc, #772]	@ (8003f78 <main+0x5e8>)
 8003c72:	f009 f879 	bl	800cd68 <puts>


	  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 8003c76:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	07db      	lsls	r3, r3, #31
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	121b      	asrs	r3, r3, #8
 8003c84:	4619      	mov	r1, r3
 8003c86:	2013      	movs	r0, #19
 8003c88:	f7fe fbfa 	bl	8002480 <ICM20602_Writebyte>
	  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 8003c8c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003c90:	4613      	mov	r3, r2
 8003c92:	07db      	lsls	r3, r3, #31
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4619      	mov	r1, r3
 8003c9a:	2014      	movs	r0, #20
 8003c9c:	f7fe fbf0 	bl	8002480 <ICM20602_Writebyte>

	  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8003ca0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	07db      	lsls	r3, r3, #31
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	121b      	asrs	r3, r3, #8
 8003cae:	4619      	mov	r1, r3
 8003cb0:	2015      	movs	r0, #21
 8003cb2:	f7fe fbe5 	bl	8002480 <ICM20602_Writebyte>
	  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 8003cb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	07db      	lsls	r3, r3, #31
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	2016      	movs	r0, #22
 8003cc6:	f7fe fbdb 	bl	8002480 <ICM20602_Writebyte>

	  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 8003cca:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	07db      	lsls	r3, r3, #31
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	121b      	asrs	r3, r3, #8
 8003cd8:	4619      	mov	r1, r3
 8003cda:	2017      	movs	r0, #23
 8003cdc:	f7fe fbd0 	bl	8002480 <ICM20602_Writebyte>
	  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 8003ce0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	07db      	lsls	r3, r3, #31
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4619      	mov	r1, r3
 8003cee:	2018      	movs	r0, #24
 8003cf0:	f7fe fbc6 	bl	8002480 <ICM20602_Writebyte>

	  printf("Loading PID Gain...\n");
 8003cf4:	48a1      	ldr	r0, [pc, #644]	@ (8003f7c <main+0x5ec>)
 8003cf6:	f009 f837 	bl	800cd68 <puts>

	  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 8003cfa:	4ba1      	ldr	r3, [pc, #644]	@ (8003f80 <main+0x5f0>)
 8003cfc:	4aa1      	ldr	r2, [pc, #644]	@ (8003f84 <main+0x5f4>)
 8003cfe:	49a2      	ldr	r1, [pc, #648]	@ (8003f88 <main+0x5f8>)
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7fd f9dd 	bl	80010c0 <EP_PIDGain_Read>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d12c      	bne.n	8003d66 <main+0x3d6>
			  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8003d0c:	4b9f      	ldr	r3, [pc, #636]	@ (8003f8c <main+0x5fc>)
 8003d0e:	4aa0      	ldr	r2, [pc, #640]	@ (8003f90 <main+0x600>)
 8003d10:	49a0      	ldr	r1, [pc, #640]	@ (8003f94 <main+0x604>)
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7fd f9d4 	bl	80010c0 <EP_PIDGain_Read>
 8003d18:	4603      	mov	r3, r0
	  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d123      	bne.n	8003d66 <main+0x3d6>
			  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 8003d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8003f98 <main+0x608>)
 8003d20:	4a9e      	ldr	r2, [pc, #632]	@ (8003f9c <main+0x60c>)
 8003d22:	499f      	ldr	r1, [pc, #636]	@ (8003fa0 <main+0x610>)
 8003d24:	2002      	movs	r0, #2
 8003d26:	f7fd f9cb 	bl	80010c0 <EP_PIDGain_Read>
 8003d2a:	4603      	mov	r3, r0
			  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11a      	bne.n	8003d66 <main+0x3d6>
			  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 8003d30:	4b9c      	ldr	r3, [pc, #624]	@ (8003fa4 <main+0x614>)
 8003d32:	4a9d      	ldr	r2, [pc, #628]	@ (8003fa8 <main+0x618>)
 8003d34:	499d      	ldr	r1, [pc, #628]	@ (8003fac <main+0x61c>)
 8003d36:	2003      	movs	r0, #3
 8003d38:	f7fd f9c2 	bl	80010c0 <EP_PIDGain_Read>
 8003d3c:	4603      	mov	r3, r0
			  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d111      	bne.n	8003d66 <main+0x3d6>
			  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 8003d42:	4b9b      	ldr	r3, [pc, #620]	@ (8003fb0 <main+0x620>)
 8003d44:	4a9b      	ldr	r2, [pc, #620]	@ (8003fb4 <main+0x624>)
 8003d46:	499c      	ldr	r1, [pc, #624]	@ (8003fb8 <main+0x628>)
 8003d48:	2004      	movs	r0, #4
 8003d4a:	f7fd f9b9 	bl	80010c0 <EP_PIDGain_Read>
 8003d4e:	4603      	mov	r3, r0
			  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d108      	bne.n	8003d66 <main+0x3d6>
			  EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd) != 0)
 8003d54:	4b99      	ldr	r3, [pc, #612]	@ (8003fbc <main+0x62c>)
 8003d56:	4a9a      	ldr	r2, [pc, #616]	@ (8003fc0 <main+0x630>)
 8003d58:	499a      	ldr	r1, [pc, #616]	@ (8003fc4 <main+0x634>)
 8003d5a:	2005      	movs	r0, #5
 8003d5c:	f7fd f9b0 	bl	80010c0 <EP_PIDGain_Read>
 8003d60:	4603      	mov	r3, r0
			  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d026      	beq.n	8003db4 <main+0x424>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003d66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d6a:	4897      	ldr	r0, [pc, #604]	@ (8003fc8 <main+0x638>)
 8003d6c:	f7ff fd3c 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1000;
 8003d70:	4b95      	ldr	r3, [pc, #596]	@ (8003fc8 <main+0x638>)
 8003d72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d76:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003d78:	2064      	movs	r0, #100	@ 0x64
 8003d7a:	f003 f8ef 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 1500;
 8003d7e:	4b92      	ldr	r3, [pc, #584]	@ (8003fc8 <main+0x638>)
 8003d80:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003d84:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003d86:	2064      	movs	r0, #100	@ 0x64
 8003d88:	f003 f8e8 	bl	8006f5c <HAL_Delay>
		  TIM3->PSC = 2000;
 8003d8c:	4b8e      	ldr	r3, [pc, #568]	@ (8003fc8 <main+0x638>)
 8003d8e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003d92:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(100);
 8003d94:	2064      	movs	r0, #100	@ 0x64
 8003d96:	f003 f8e1 	bl	8006f5c <HAL_Delay>

		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003d9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d9e:	488a      	ldr	r0, [pc, #552]	@ (8003fc8 <main+0x638>)
 8003da0:	f7ff fd33 	bl	800380a <LL_TIM_CC_DisableChannel>

		  HAL_Delay(500);
 8003da4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003da8:	f003 f8d8 	bl	8006f5c <HAL_Delay>
		  printf("\nCouldn't load PID gain.\n");
 8003dac:	4887      	ldr	r0, [pc, #540]	@ (8003fcc <main+0x63c>)
 8003dae:	f008 ffdb 	bl	800cd68 <puts>
 8003db2:	e098      	b.n	8003ee6 <main+0x556>
	  }
	  else
	  {
		  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 8003db4:	4b74      	ldr	r3, [pc, #464]	@ (8003f88 <main+0x5f8>)
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	4b73      	ldr	r3, [pc, #460]	@ (8003f88 <main+0x5f8>)
 8003dbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dc0:	4b71      	ldr	r3, [pc, #452]	@ (8003f88 <main+0x5f8>)
 8003dc2:	edd3 6a02 	vldr	s13, [r3, #8]
 8003dc6:	eeb0 1a66 	vmov.f32	s2, s13
 8003dca:	eef0 0a47 	vmov.f32	s1, s14
 8003dce:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	487e      	ldr	r0, [pc, #504]	@ (8003fd0 <main+0x640>)
 8003dd6:	f001 fe51 	bl	8005a7c <Encode_Msg_PID_Gain>
		  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003dda:	230a      	movs	r3, #10
 8003ddc:	2214      	movs	r2, #20
 8003dde:	497c      	ldr	r1, [pc, #496]	@ (8003fd0 <main+0x640>)
 8003de0:	487c      	ldr	r0, [pc, #496]	@ (8003fd4 <main+0x644>)
 8003de2:	f006 f8ad 	bl	8009f40 <HAL_UART_Transmit>
		  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 8003de6:	4b68      	ldr	r3, [pc, #416]	@ (8003f88 <main+0x5f8>)
 8003de8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003dec:	4b66      	ldr	r3, [pc, #408]	@ (8003f88 <main+0x5f8>)
 8003dee:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003df2:	4b65      	ldr	r3, [pc, #404]	@ (8003f88 <main+0x5f8>)
 8003df4:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8003df8:	eeb0 1a66 	vmov.f32	s2, s13
 8003dfc:	eef0 0a47 	vmov.f32	s1, s14
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	2101      	movs	r1, #1
 8003e06:	4872      	ldr	r0, [pc, #456]	@ (8003fd0 <main+0x640>)
 8003e08:	f001 fe38 	bl	8005a7c <Encode_Msg_PID_Gain>
		  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	2214      	movs	r2, #20
 8003e10:	496f      	ldr	r1, [pc, #444]	@ (8003fd0 <main+0x640>)
 8003e12:	4870      	ldr	r0, [pc, #448]	@ (8003fd4 <main+0x644>)
 8003e14:	f006 f894 	bl	8009f40 <HAL_UART_Transmit>
		  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8003e18:	4b61      	ldr	r3, [pc, #388]	@ (8003fa0 <main+0x610>)
 8003e1a:	edd3 7a00 	vldr	s15, [r3]
 8003e1e:	4b60      	ldr	r3, [pc, #384]	@ (8003fa0 <main+0x610>)
 8003e20:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e24:	4b5e      	ldr	r3, [pc, #376]	@ (8003fa0 <main+0x610>)
 8003e26:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e2a:	eeb0 1a66 	vmov.f32	s2, s13
 8003e2e:	eef0 0a47 	vmov.f32	s1, s14
 8003e32:	eeb0 0a67 	vmov.f32	s0, s15
 8003e36:	2102      	movs	r1, #2
 8003e38:	4865      	ldr	r0, [pc, #404]	@ (8003fd0 <main+0x640>)
 8003e3a:	f001 fe1f 	bl	8005a7c <Encode_Msg_PID_Gain>
		  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e3e:	230a      	movs	r3, #10
 8003e40:	2214      	movs	r2, #20
 8003e42:	4963      	ldr	r1, [pc, #396]	@ (8003fd0 <main+0x640>)
 8003e44:	4863      	ldr	r0, [pc, #396]	@ (8003fd4 <main+0x644>)
 8003e46:	f006 f87b 	bl	8009f40 <HAL_UART_Transmit>
		  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8003e4a:	4b55      	ldr	r3, [pc, #340]	@ (8003fa0 <main+0x610>)
 8003e4c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003e50:	4b53      	ldr	r3, [pc, #332]	@ (8003fa0 <main+0x610>)
 8003e52:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003e56:	4b52      	ldr	r3, [pc, #328]	@ (8003fa0 <main+0x610>)
 8003e58:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8003e5c:	eeb0 1a66 	vmov.f32	s2, s13
 8003e60:	eef0 0a47 	vmov.f32	s1, s14
 8003e64:	eeb0 0a67 	vmov.f32	s0, s15
 8003e68:	2103      	movs	r1, #3
 8003e6a:	4859      	ldr	r0, [pc, #356]	@ (8003fd0 <main+0x640>)
 8003e6c:	f001 fe06 	bl	8005a7c <Encode_Msg_PID_Gain>
		  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003e70:	230a      	movs	r3, #10
 8003e72:	2214      	movs	r2, #20
 8003e74:	4956      	ldr	r1, [pc, #344]	@ (8003fd0 <main+0x640>)
 8003e76:	4857      	ldr	r0, [pc, #348]	@ (8003fd4 <main+0x644>)
 8003e78:	f006 f862 	bl	8009f40 <HAL_UART_Transmit>
		  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8003e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8003fb8 <main+0x628>)
 8003e7e:	edd3 7a00 	vldr	s15, [r3]
 8003e82:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb8 <main+0x628>)
 8003e84:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e88:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <main+0x628>)
 8003e8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e8e:	eeb0 1a66 	vmov.f32	s2, s13
 8003e92:	eef0 0a47 	vmov.f32	s1, s14
 8003e96:	eeb0 0a67 	vmov.f32	s0, s15
 8003e9a:	2104      	movs	r1, #4
 8003e9c:	484c      	ldr	r0, [pc, #304]	@ (8003fd0 <main+0x640>)
 8003e9e:	f001 fded 	bl	8005a7c <Encode_Msg_PID_Gain>
		  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	2214      	movs	r2, #20
 8003ea6:	494a      	ldr	r1, [pc, #296]	@ (8003fd0 <main+0x640>)
 8003ea8:	484a      	ldr	r0, [pc, #296]	@ (8003fd4 <main+0x644>)
 8003eaa:	f006 f849 	bl	8009f40 <HAL_UART_Transmit>
		  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8003eae:	4b45      	ldr	r3, [pc, #276]	@ (8003fc4 <main+0x634>)
 8003eb0:	edd3 7a00 	vldr	s15, [r3]
 8003eb4:	4b43      	ldr	r3, [pc, #268]	@ (8003fc4 <main+0x634>)
 8003eb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003eba:	4b42      	ldr	r3, [pc, #264]	@ (8003fc4 <main+0x634>)
 8003ebc:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ec0:	eeb0 1a66 	vmov.f32	s2, s13
 8003ec4:	eef0 0a47 	vmov.f32	s1, s14
 8003ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ecc:	2105      	movs	r1, #5
 8003ece:	4840      	ldr	r0, [pc, #256]	@ (8003fd0 <main+0x640>)
 8003ed0:	f001 fdd4 	bl	8005a7c <Encode_Msg_PID_Gain>
		  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8003ed4:	230a      	movs	r3, #10
 8003ed6:	2214      	movs	r2, #20
 8003ed8:	493d      	ldr	r1, [pc, #244]	@ (8003fd0 <main+0x640>)
 8003eda:	483e      	ldr	r0, [pc, #248]	@ (8003fd4 <main+0x644>)
 8003edc:	f006 f830 	bl	8009f40 <HAL_UART_Transmit>
		  printf("\nAll gains OK!\n\n");
 8003ee0:	483d      	ldr	r0, [pc, #244]	@ (8003fd8 <main+0x648>)
 8003ee2:	f008 ff41 	bl	800cd68 <puts>
	  }

	while(Is_iBus_Received() == 0)
 8003ee6:	e013      	b.n	8003f10 <main+0x580>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ee8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003eec:	4836      	ldr	r0, [pc, #216]	@ (8003fc8 <main+0x638>)
 8003eee:	f7ff fc7b 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 3000;
 8003ef2:	4b35      	ldr	r3, [pc, #212]	@ (8003fc8 <main+0x638>)
 8003ef4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003ef8:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003efa:	20c8      	movs	r0, #200	@ 0xc8
 8003efc:	f003 f82e 	bl	8006f5c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f04:	4830      	ldr	r0, [pc, #192]	@ (8003fc8 <main+0x638>)
 8003f06:	f7ff fc80 	bl	800380a <LL_TIM_CC_DisableChannel>
		HAL_Delay(200);
 8003f0a:	20c8      	movs	r0, #200	@ 0xc8
 8003f0c:	f003 f826 	bl	8006f5c <HAL_Delay>
	while(Is_iBus_Received() == 0)
 8003f10:	f001 f994 	bl	800523c <Is_iBus_Received>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0e6      	beq.n	8003ee8 <main+0x558>
	}
	if(iBus.SwC == 2000)
 8003f1a:	4b30      	ldr	r3, [pc, #192]	@ (8003fdc <main+0x64c>)
 8003f1c:	899b      	ldrh	r3, [r3, #12]
 8003f1e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003f22:	d17d      	bne.n	8004020 <main+0x690>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f28:	4827      	ldr	r0, [pc, #156]	@ (8003fc8 <main+0x638>)
 8003f2a:	f7ff fc5d 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1500;
 8003f2e:	4b26      	ldr	r3, [pc, #152]	@ (8003fc8 <main+0x638>)
 8003f30:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003f34:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003f36:	20c8      	movs	r0, #200	@ 0xc8
 8003f38:	f003 f810 	bl	8006f5c <HAL_Delay>
		TIM3->PSC = 2000;
 8003f3c:	4b22      	ldr	r3, [pc, #136]	@ (8003fc8 <main+0x638>)
 8003f3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003f42:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003f44:	20c8      	movs	r0, #200	@ 0xc8
 8003f46:	f003 f809 	bl	8006f5c <HAL_Delay>
		TIM3->PSC = 1500;
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc8 <main+0x638>)
 8003f4c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003f50:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003f52:	20c8      	movs	r0, #200	@ 0xc8
 8003f54:	f003 f802 	bl	8006f5c <HAL_Delay>
		TIM3->PSC = 2000;
 8003f58:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <main+0x638>)
 8003f5a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003f60:	20c8      	movs	r0, #200	@ 0xc8
 8003f62:	f002 fffb 	bl	8006f5c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f6a:	4817      	ldr	r0, [pc, #92]	@ (8003fc8 <main+0x638>)
 8003f6c:	f7ff fc4d 	bl	800380a <LL_TIM_CC_DisableChannel>

		ESC_Calibration();
 8003f70:	f001 f936 	bl	80051e0 <ESC_Calibration>
		while(iBus.SwC != 1000)
 8003f74:	e04e      	b.n	8004014 <main+0x684>
 8003f76:	bf00      	nop
 8003f78:	0800fb24 	.word	0x0800fb24
 8003f7c:	0800fb38 	.word	0x0800fb38
 8003f80:	20000318 	.word	0x20000318
 8003f84:	20000314 	.word	0x20000314
 8003f88:	20000310 	.word	0x20000310
 8003f8c:	20000350 	.word	0x20000350
 8003f90:	2000034c 	.word	0x2000034c
 8003f94:	20000348 	.word	0x20000348
 8003f98:	20000388 	.word	0x20000388
 8003f9c:	20000384 	.word	0x20000384
 8003fa0:	20000380 	.word	0x20000380
 8003fa4:	200003c0 	.word	0x200003c0
 8003fa8:	200003bc 	.word	0x200003bc
 8003fac:	200003b8 	.word	0x200003b8
 8003fb0:	200003f8 	.word	0x200003f8
 8003fb4:	200003f4 	.word	0x200003f4
 8003fb8:	200003f0 	.word	0x200003f0
 8003fbc:	20000430 	.word	0x20000430
 8003fc0:	2000042c 	.word	0x2000042c
 8003fc4:	20000428 	.word	0x20000428
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	0800fb4c 	.word	0x0800fb4c
 8003fd0:	20000568 	.word	0x20000568
 8003fd4:	200005e8 	.word	0x200005e8
 8003fd8:	0800fb68 	.word	0x0800fb68
 8003fdc:	200002c0 	.word	0x200002c0
		{
			Is_iBus_Received();
 8003fe0:	f001 f92c 	bl	800523c <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fe4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fe8:	4835      	ldr	r0, [pc, #212]	@ (80040c0 <main+0x730>)
 8003fea:	f7ff fbfd 	bl	80037e8 <LL_TIM_CC_EnableChannel>

			TIM3->PSC = 1500;
 8003fee:	4b34      	ldr	r3, [pc, #208]	@ (80040c0 <main+0x730>)
 8003ff0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ff4:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003ff6:	20c8      	movs	r0, #200	@ 0xc8
 8003ff8:	f002 ffb0 	bl	8006f5c <HAL_Delay>
			TIM3->PSC = 2000;
 8003ffc:	4b30      	ldr	r3, [pc, #192]	@ (80040c0 <main+0x730>)
 8003ffe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8004004:	20c8      	movs	r0, #200	@ 0xc8
 8004006:	f002 ffa9 	bl	8006f5c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800400a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800400e:	482c      	ldr	r0, [pc, #176]	@ (80040c0 <main+0x730>)
 8004010:	f7ff fbfb 	bl	800380a <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000)
 8004014:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <main+0x734>)
 8004016:	899b      	ldrh	r3, [r3, #12]
 8004018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800401c:	d1e0      	bne.n	8003fe0 <main+0x650>
 800401e:	e067      	b.n	80040f0 <main+0x760>
		}
	}

	else if(iBus.SwC == 1500)
 8004020:	4b28      	ldr	r3, [pc, #160]	@ (80040c4 <main+0x734>)
 8004022:	899b      	ldrh	r3, [r3, #12]
 8004024:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004028:	4293      	cmp	r3, r2
 800402a:	d161      	bne.n	80040f0 <main+0x760>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800402c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004030:	4823      	ldr	r0, [pc, #140]	@ (80040c0 <main+0x730>)
 8004032:	f7ff fbd9 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1500;
 8004036:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <main+0x730>)
 8004038:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800403c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 800403e:	20c8      	movs	r0, #200	@ 0xc8
 8004040:	f002 ff8c 	bl	8006f5c <HAL_Delay>
		TIM3->PSC = 2000;
 8004044:	4b1e      	ldr	r3, [pc, #120]	@ (80040c0 <main+0x730>)
 8004046:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 800404c:	20c8      	movs	r0, #200	@ 0xc8
 800404e:	f002 ff85 	bl	8006f5c <HAL_Delay>
		TIM3->PSC = 1500;
 8004052:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <main+0x730>)
 8004054:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004058:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 800405a:	20c8      	movs	r0, #200	@ 0xc8
 800405c:	f002 ff7e 	bl	8006f5c <HAL_Delay>
		TIM3->PSC = 2000;
 8004060:	4b17      	ldr	r3, [pc, #92]	@ (80040c0 <main+0x730>)
 8004062:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004066:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8004068:	20c8      	movs	r0, #200	@ 0xc8
 800406a:	f002 ff77 	bl	8006f5c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800406e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004072:	4813      	ldr	r0, [pc, #76]	@ (80040c0 <main+0x730>)
 8004074:	f7ff fbc9 	bl	800380a <LL_TIM_CC_DisableChannel>

		BNO080_Calibration();
 8004078:	f001 f900 	bl	800527c <BNO080_Calibration>
		while(iBus.SwC != 1000)
 800407c:	e019      	b.n	80040b2 <main+0x722>
		{
			Is_iBus_Received();
 800407e:	f001 f8dd 	bl	800523c <Is_iBus_Received>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004082:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004086:	480e      	ldr	r0, [pc, #56]	@ (80040c0 <main+0x730>)
 8004088:	f7ff fbae 	bl	80037e8 <LL_TIM_CC_EnableChannel>

			TIM3->PSC = 1500;
 800408c:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <main+0x730>)
 800408e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004092:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8004094:	20c8      	movs	r0, #200	@ 0xc8
 8004096:	f002 ff61 	bl	8006f5c <HAL_Delay>
			TIM3->PSC = 2000;
 800409a:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <main+0x730>)
 800409c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80040a0:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 80040a2:	20c8      	movs	r0, #200	@ 0xc8
 80040a4:	f002 ff5a 	bl	8006f5c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040ac:	4804      	ldr	r0, [pc, #16]	@ (80040c0 <main+0x730>)
 80040ae:	f7ff fbac 	bl	800380a <LL_TIM_CC_DisableChannel>
		while(iBus.SwC != 1000)
 80040b2:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <main+0x734>)
 80040b4:	899b      	ldrh	r3, [r3, #12]
 80040b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040ba:	d1e0      	bne.n	800407e <main+0x6ee>
		}
	}

	while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80040bc:	e018      	b.n	80040f0 <main+0x760>
 80040be:	bf00      	nop
 80040c0:	40000400 	.word	0x40000400
 80040c4:	200002c0 	.word	0x200002c0
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040cc:	489b      	ldr	r0, [pc, #620]	@ (800433c <main+0x9ac>)
 80040ce:	f7ff fb8b 	bl	80037e8 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 80040d2:	4b9a      	ldr	r3, [pc, #616]	@ (800433c <main+0x9ac>)
 80040d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040d8:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(70);
 80040da:	2046      	movs	r0, #70	@ 0x46
 80040dc:	f002 ff3e 	bl	8006f5c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80040e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040e4:	4895      	ldr	r0, [pc, #596]	@ (800433c <main+0x9ac>)
 80040e6:	f7ff fb90 	bl	800380a <LL_TIM_CC_DisableChannel>
		HAL_Delay(70);
 80040ea:	2046      	movs	r0, #70	@ 0x46
 80040ec:	f002 ff36 	bl	8006f5c <HAL_Delay>
	while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80040f0:	f001 f850 	bl	8005194 <Is_iBus_Throttle_Min>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0e6      	beq.n	80040c8 <main+0x738>
 80040fa:	4b91      	ldr	r3, [pc, #580]	@ (8004340 <main+0x9b0>)
 80040fc:	891b      	ldrh	r3, [r3, #8]
 80040fe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004102:	d0e1      	beq.n	80040c8 <main+0x738>
	}

	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004108:	488c      	ldr	r0, [pc, #560]	@ (800433c <main+0x9ac>)
 800410a:	f7ff fb6d 	bl	80037e8 <LL_TIM_CC_EnableChannel>

	TIM3->PSC = 2000;
 800410e:	4b8b      	ldr	r3, [pc, #556]	@ (800433c <main+0x9ac>)
 8004110:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004114:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8004116:	2064      	movs	r0, #100	@ 0x64
 8004118:	f002 ff20 	bl	8006f5c <HAL_Delay>
	TIM3->PSC = 1500;
 800411c:	4b87      	ldr	r3, [pc, #540]	@ (800433c <main+0x9ac>)
 800411e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8004124:	2064      	movs	r0, #100	@ 0x64
 8004126:	f002 ff19 	bl	8006f5c <HAL_Delay>
	TIM3->PSC = 1000;
 800412a:	4b84      	ldr	r3, [pc, #528]	@ (800433c <main+0x9ac>)
 800412c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004130:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8004132:	2064      	movs	r0, #100	@ 0x64
 8004134:	f002 ff12 	bl	8006f5c <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004138:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800413c:	487f      	ldr	r0, [pc, #508]	@ (800433c <main+0x9ac>)
 800413e:	f7ff fb64 	bl	800380a <LL_TIM_CC_DisableChannel>

	printf("Start\n");
 8004142:	4880      	ldr	r0, [pc, #512]	@ (8004344 <main+0x9b4>)
 8004144:	f008 fe10 	bl	800cd68 <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(tim7_1ms_flag == 1)
 8004148:	4b7f      	ldr	r3, [pc, #508]	@ (8004348 <main+0x9b8>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 81a8 	bne.w	80044a2 <main+0xb12>
		{
			tim7_1ms_flag = 0;
 8004152:	4b7d      	ldr	r3, [pc, #500]	@ (8004348 <main+0x9b8>)
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]

			Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV - 1500) * 0.1f, BNO080_Pitch, ICM20602.gyro_x);
 8004158:	4b79      	ldr	r3, [pc, #484]	@ (8004340 <main+0x9b0>)
 800415a:	885b      	ldrh	r3, [r3, #2]
 800415c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004168:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800434c <main+0x9bc>
 800416c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004170:	4b77      	ldr	r3, [pc, #476]	@ (8004350 <main+0x9c0>)
 8004172:	ed93 7a00 	vldr	s14, [r3]
 8004176:	4b77      	ldr	r3, [pc, #476]	@ (8004354 <main+0x9c4>)
 8004178:	edd3 6a07 	vldr	s13, [r3, #28]
 800417c:	eeb0 1a66 	vmov.f32	s2, s13
 8004180:	eef0 0a47 	vmov.f32	s1, s14
 8004184:	eeb0 0a67 	vmov.f32	s0, s15
 8004188:	4873      	ldr	r0, [pc, #460]	@ (8004358 <main+0x9c8>)
 800418a:	f7fe fd11 	bl	8002bb0 <Double_Roll_Pitch_PID_Calculation>
			Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH - 1500) * 0.1f, BNO080_Roll, ICM20602.gyro_y);
 800418e:	4b6c      	ldr	r3, [pc, #432]	@ (8004340 <main+0x9b0>)
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800419e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800434c <main+0x9bc>
 80041a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041a6:	4b6d      	ldr	r3, [pc, #436]	@ (800435c <main+0x9cc>)
 80041a8:	ed93 7a00 	vldr	s14, [r3]
 80041ac:	4b69      	ldr	r3, [pc, #420]	@ (8004354 <main+0x9c4>)
 80041ae:	edd3 6a08 	vldr	s13, [r3, #32]
 80041b2:	eeb0 1a66 	vmov.f32	s2, s13
 80041b6:	eef0 0a47 	vmov.f32	s1, s14
 80041ba:	eeb0 0a67 	vmov.f32	s0, s15
 80041be:	4868      	ldr	r0, [pc, #416]	@ (8004360 <main+0x9d0>)
 80041c0:	f7fe fcf6 	bl	8002bb0 <Double_Roll_Pitch_PID_Calculation>

			if(iBus.LV < 1030 || motor_arming_flag == 0)
 80041c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004340 <main+0x9b0>)
 80041c6:	889b      	ldrh	r3, [r3, #4]
 80041c8:	f240 4205 	movw	r2, #1029	@ 0x405
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d903      	bls.n	80041d8 <main+0x848>
 80041d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <main+0x84c>
			{
				Reset_All_PID_Integrator();
 80041d8:	f7fe ff42 	bl	8003060 <Reset_All_PID_Integrator>
			}

			if(iBus.LH < 1485 || iBus.LH > 1515)
 80041dc:	4b58      	ldr	r3, [pc, #352]	@ (8004340 <main+0x9b0>)
 80041de:	88db      	ldrh	r3, [r3, #6]
 80041e0:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d906      	bls.n	80041f6 <main+0x866>
 80041e8:	4b55      	ldr	r3, [pc, #340]	@ (8004340 <main+0x9b0>)
 80041ea:	88db      	ldrh	r3, [r3, #6]
 80041ec:	f240 52eb 	movw	r2, #1515	@ 0x5eb
 80041f0:	4293      	cmp	r3, r2
 80041f2:	f240 80bb 	bls.w	800436c <main+0x9dc>
			{
				yaw_heading_reference = BNO080_Yaw;
 80041f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004364 <main+0x9d4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH - 1500), ICM20602.gyro_z);
 80041fc:	4b50      	ldr	r3, [pc, #320]	@ (8004340 <main+0x9b0>)
 80041fe:	88db      	ldrh	r3, [r3, #6]
 8004200:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800420c:	4b51      	ldr	r3, [pc, #324]	@ (8004354 <main+0x9c4>)
 800420e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004212:	eef0 0a47 	vmov.f32	s1, s14
 8004216:	eeb0 0a67 	vmov.f32	s0, s15
 800421a:	4853      	ldr	r0, [pc, #332]	@ (8004368 <main+0x9d8>)
 800421c:	f7fe fe9c 	bl	8002f58 <Single_Yaw_Rate_PID_Calculation>

				ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_rate.pid_result;
 8004220:	4b47      	ldr	r3, [pc, #284]	@ (8004340 <main+0x9b0>)
 8004222:	889b      	ldrh	r3, [r3, #4]
 8004224:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8004234:	3338      	adds	r3, #56	@ 0x38
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800423e:	4b46      	ldr	r3, [pc, #280]	@ (8004358 <main+0x9c8>)
 8004240:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004248:	4b45      	ldr	r3, [pc, #276]	@ (8004360 <main+0x9d0>)
 800424a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800424e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004252:	4b45      	ldr	r3, [pc, #276]	@ (8004368 <main+0x9d8>)
 8004254:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800425c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004260:	ee17 3a90 	vmov	r3, s15
 8004264:	873b      	strh	r3, [r7, #56]	@ 0x38
				ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_rate.pid_result;
 8004266:	4b36      	ldr	r3, [pc, #216]	@ (8004340 <main+0x9b0>)
 8004268:	889b      	ldrh	r3, [r3, #4]
 800426a:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 800427a:	3338      	adds	r3, #56	@ 0x38
 800427c:	ee07 3a90 	vmov	s15, r3
 8004280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004284:	4b34      	ldr	r3, [pc, #208]	@ (8004358 <main+0x9c8>)
 8004286:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800428a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800428e:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <main+0x9d0>)
 8004290:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004298:	4b33      	ldr	r3, [pc, #204]	@ (8004368 <main+0x9d8>)
 800429a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800429e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a6:	ee17 3a90 	vmov	r3, s15
 80042aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
				ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_rate.pid_result;
 80042ac:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <main+0x9b0>)
 80042ae:	889b      	ldrh	r3, [r3, #4]
 80042b0:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80042c0:	3338      	adds	r3, #56	@ 0x38
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ca:	4b23      	ldr	r3, [pc, #140]	@ (8004358 <main+0x9c8>)
 80042cc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80042d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042d4:	4b22      	ldr	r3, [pc, #136]	@ (8004360 <main+0x9d0>)
 80042d6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80042da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042de:	4b22      	ldr	r3, [pc, #136]	@ (8004368 <main+0x9d8>)
 80042e0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80042e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ec:	ee17 3a90 	vmov	r3, s15
 80042f0:	86bb      	strh	r3, [r7, #52]	@ 0x34
				ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_rate.pid_result;
 80042f2:	4b13      	ldr	r3, [pc, #76]	@ (8004340 <main+0x9b0>)
 80042f4:	889b      	ldrh	r3, [r3, #4]
 80042f6:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8004306:	3338      	adds	r3, #56	@ 0x38
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004310:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <main+0x9c8>)
 8004312:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800431a:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <main+0x9d0>)
 800431c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004324:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <main+0x9d8>)
 8004326:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800432a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004332:	ee17 3a90 	vmov	r3, s15
 8004336:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004338:	e0b3      	b.n	80044a2 <main+0xb12>
 800433a:	bf00      	nop
 800433c:	40000400 	.word	0x40000400
 8004340:	200002c0 	.word	0x200002c0
 8004344:	0800fb78 	.word	0x0800fb78
 8004348:	200005da 	.word	0x200005da
 800434c:	3dcccccd 	.word	0x3dcccccd
 8004350:	20000464 	.word	0x20000464
 8004354:	200002d8 	.word	0x200002d8
 8004358:	20000380 	.word	0x20000380
 800435c:	20000460 	.word	0x20000460
 8004360:	20000310 	.word	0x20000310
 8004364:	20000468 	.word	0x20000468
 8004368:	20000428 	.word	0x20000428
			}
			else
			{
				Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 800436c:	4bb9      	ldr	r3, [pc, #740]	@ (8004654 <main+0xcc4>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	4bb9      	ldr	r3, [pc, #740]	@ (8004658 <main+0xcc8>)
 8004374:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004378:	eeb0 1a47 	vmov.f32	s2, s14
 800437c:	eef0 0a67 	vmov.f32	s1, s15
 8004380:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004384:	48b5      	ldr	r0, [pc, #724]	@ (800465c <main+0xccc>)
 8004386:	f7fe fd4d 	bl	8002e24 <Single_Yaw_Heading_PID_Calculation>

				ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result;
 800438a:	4bb5      	ldr	r3, [pc, #724]	@ (8004660 <main+0xcd0>)
 800438c:	889b      	ldrh	r3, [r3, #4]
 800438e:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 800439e:	3338      	adds	r3, #56	@ 0x38
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a8:	4bae      	ldr	r3, [pc, #696]	@ (8004664 <main+0xcd4>)
 80043aa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80043ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043b2:	4bad      	ldr	r3, [pc, #692]	@ (8004668 <main+0xcd8>)
 80043b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80043b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043bc:	4ba7      	ldr	r3, [pc, #668]	@ (800465c <main+0xccc>)
 80043be:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80043c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ca:	ee17 3a90 	vmov	r3, s15
 80043ce:	873b      	strh	r3, [r7, #56]	@ 0x38
				ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result;
 80043d0:	4ba3      	ldr	r3, [pc, #652]	@ (8004660 <main+0xcd0>)
 80043d2:	889b      	ldrh	r3, [r3, #4]
 80043d4:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80043e4:	3338      	adds	r3, #56	@ 0x38
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043ee:	4b9d      	ldr	r3, [pc, #628]	@ (8004664 <main+0xcd4>)
 80043f0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80043f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004668 <main+0xcd8>)
 80043fa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80043fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004402:	4b96      	ldr	r3, [pc, #600]	@ (800465c <main+0xccc>)
 8004404:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800440c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004410:	ee17 3a90 	vmov	r3, s15
 8004414:	86fb      	strh	r3, [r7, #54]	@ 0x36
				ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result;
 8004416:	4b92      	ldr	r3, [pc, #584]	@ (8004660 <main+0xcd0>)
 8004418:	889b      	ldrh	r3, [r3, #4]
 800441a:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 800442a:	3338      	adds	r3, #56	@ 0x38
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004434:	4b8b      	ldr	r3, [pc, #556]	@ (8004664 <main+0xcd4>)
 8004436:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800443a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800443e:	4b8a      	ldr	r3, [pc, #552]	@ (8004668 <main+0xcd8>)
 8004440:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004444:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004448:	4b84      	ldr	r3, [pc, #528]	@ (800465c <main+0xccc>)
 800444a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800444e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004456:	ee17 3a90 	vmov	r3, s15
 800445a:	86bb      	strh	r3, [r7, #52]	@ 0x34
				ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result;
 800445c:	4b80      	ldr	r3, [pc, #512]	@ (8004660 <main+0xcd0>)
 800445e:	889b      	ldrh	r3, [r3, #4]
 8004460:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8004470:	3338      	adds	r3, #56	@ 0x38
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800447a:	4b7a      	ldr	r3, [pc, #488]	@ (8004664 <main+0xcd4>)
 800447c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004484:	4b78      	ldr	r3, [pc, #480]	@ (8004668 <main+0xcd8>)
 8004486:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800448a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800448e:	4b73      	ldr	r3, [pc, #460]	@ (800465c <main+0xccc>)
 8004490:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449c:	ee17 3a90 	vmov	r3, s15
 80044a0:	867b      	strh	r3, [r7, #50]	@ 0x32
			//printf("%f\t%f\n", BNO080_Pitch, ICM20602.gyro_x);
			//printf("%f\t%f\n", BNO080_Roll, ICM20602.gyro_y);
			//printf("%f\t%f\n", BNO080_Yaw, ICM20602.gyro_z);
		}

		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 80044a2:	4b6f      	ldr	r3, [pc, #444]	@ (8004660 <main+0xcd0>)
 80044a4:	891b      	ldrh	r3, [r3, #8]
 80044a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80044aa:	d12e      	bne.n	800450a <main+0xb7a>
 80044ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80044ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80044b2:	d02a      	beq.n	800450a <main+0xb7a>
		{
			if(iBus.LV < 1010)
 80044b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004660 <main+0xcd0>)
 80044b6:	889b      	ldrh	r3, [r3, #4]
 80044b8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80044bc:	4293      	cmp	r3, r2
 80044be:	d81a      	bhi.n	80044f6 <main+0xb66>
			{
				motor_arming_flag = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				yaw_heading_reference = BNO080_Yaw;
 80044c6:	4b63      	ldr	r3, [pc, #396]	@ (8004654 <main+0xcc4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044cc:	e01d      	b.n	800450a <main+0xb7a>
			}
			else
			{
				while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
				{
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044d2:	4866      	ldr	r0, [pc, #408]	@ (800466c <main+0xcdc>)
 80044d4:	f7ff f988 	bl	80037e8 <LL_TIM_CC_EnableChannel>

					TIM3->PSC = 1000;
 80044d8:	4b64      	ldr	r3, [pc, #400]	@ (800466c <main+0xcdc>)
 80044da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28
					HAL_Delay(70);
 80044e0:	2046      	movs	r0, #70	@ 0x46
 80044e2:	f002 fd3b 	bl	8006f5c <HAL_Delay>
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044ea:	4860      	ldr	r0, [pc, #384]	@ (800466c <main+0xcdc>)
 80044ec:	f7ff f98d 	bl	800380a <LL_TIM_CC_DisableChannel>
					HAL_Delay(70);
 80044f0:	2046      	movs	r0, #70	@ 0x46
 80044f2:	f002 fd33 	bl	8006f5c <HAL_Delay>
				while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80044f6:	f000 fe4d 	bl	8005194 <Is_iBus_Throttle_Min>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0e6      	beq.n	80044ce <main+0xb3e>
 8004500:	4b57      	ldr	r3, [pc, #348]	@ (8004660 <main+0xcd0>)
 8004502:	891b      	ldrh	r3, [r3, #8]
 8004504:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004508:	d0e1      	beq.n	80044ce <main+0xb3e>
				}
			}
		}
		iBus_SwA_Prev = iBus.SwA;
 800450a:	4b55      	ldr	r3, [pc, #340]	@ (8004660 <main+0xcd0>)
 800450c:	891b      	ldrh	r3, [r3, #8]
 800450e:	87bb      	strh	r3, [r7, #60]	@ 0x3c


		if(iBus.SwA != 2000)
 8004510:	4b53      	ldr	r3, [pc, #332]	@ (8004660 <main+0xcd0>)
 8004512:	891b      	ldrh	r3, [r3, #8]
 8004514:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004518:	d002      	beq.n	8004520 <main+0xb90>
		{
			motor_arming_flag = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		}

		if(motor_arming_flag == 1)
 8004520:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004524:	2b01      	cmp	r3, #1
 8004526:	d170      	bne.n	800460a <main+0xc7a>
		{
			if(failsafe_flag == 0)
 8004528:	4b51      	ldr	r3, [pc, #324]	@ (8004670 <main+0xce0>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d15b      	bne.n	80045e8 <main+0xc58>
			{
				if(iBus.LV > 1030)
 8004530:	4b4b      	ldr	r3, [pc, #300]	@ (8004660 <main+0xcd0>)
 8004532:	889b      	ldrh	r3, [r3, #4]
 8004534:	f240 4206 	movw	r2, #1030	@ 0x406
 8004538:	4293      	cmp	r3, r2
 800453a:	d944      	bls.n	80045c6 <main+0xc36>
				{
					TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 800453c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800453e:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004542:	4293      	cmp	r3, r2
 8004544:	d807      	bhi.n	8004556 <main+0xbc6>
 8004546:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004548:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800454c:	4293      	cmp	r3, r2
 800454e:	bf38      	it	cc
 8004550:	4613      	movcc	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	e001      	b.n	800455a <main+0xbca>
 8004556:	f245 2308 	movw	r3, #21000	@ 0x5208
 800455a:	4a46      	ldr	r2, [pc, #280]	@ (8004674 <main+0xce4>)
 800455c:	6353      	str	r3, [r2, #52]	@ 0x34
					TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 800455e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004560:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004564:	4293      	cmp	r3, r2
 8004566:	d807      	bhi.n	8004578 <main+0xbe8>
 8004568:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800456a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 800456e:	4293      	cmp	r3, r2
 8004570:	bf38      	it	cc
 8004572:	4613      	movcc	r3, r2
 8004574:	b29b      	uxth	r3, r3
 8004576:	e001      	b.n	800457c <main+0xbec>
 8004578:	f245 2308 	movw	r3, #21000	@ 0x5208
 800457c:	4a3d      	ldr	r2, [pc, #244]	@ (8004674 <main+0xce4>)
 800457e:	6393      	str	r3, [r2, #56]	@ 0x38
					TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 8004580:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004582:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004586:	4293      	cmp	r3, r2
 8004588:	d807      	bhi.n	800459a <main+0xc0a>
 800458a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800458c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004590:	4293      	cmp	r3, r2
 8004592:	bf38      	it	cc
 8004594:	4613      	movcc	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	e001      	b.n	800459e <main+0xc0e>
 800459a:	f245 2308 	movw	r3, #21000	@ 0x5208
 800459e:	4a35      	ldr	r2, [pc, #212]	@ (8004674 <main+0xce4>)
 80045a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
					TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 80045a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80045a4:	f245 2208 	movw	r2, #21000	@ 0x5208
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d807      	bhi.n	80045bc <main+0xc2c>
 80045ac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80045ae:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80045b2:	4293      	cmp	r3, r2
 80045b4:	bf38      	it	cc
 80045b6:	4613      	movcc	r3, r2
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	e001      	b.n	80045c0 <main+0xc30>
 80045bc:	f245 2308 	movw	r3, #21000	@ 0x5208
 80045c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004674 <main+0xce4>)
 80045c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c4:	e031      	b.n	800462a <main+0xc9a>
				}
				else
				{
					TIM5->CCR1 = 11000;
 80045c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004674 <main+0xce4>)
 80045c8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80045cc:	635a      	str	r2, [r3, #52]	@ 0x34
					TIM5->CCR2 = 11000;
 80045ce:	4b29      	ldr	r3, [pc, #164]	@ (8004674 <main+0xce4>)
 80045d0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80045d4:	639a      	str	r2, [r3, #56]	@ 0x38
					TIM5->CCR3 = 11000;
 80045d6:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <main+0xce4>)
 80045d8:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80045dc:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM5->CCR4 = 11000;
 80045de:	4b25      	ldr	r3, [pc, #148]	@ (8004674 <main+0xce4>)
 80045e0:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80045e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80045e6:	e020      	b.n	800462a <main+0xc9a>
				}
			}
			else
			{
				TIM5->CCR1 = 10500;
 80045e8:	4b22      	ldr	r3, [pc, #136]	@ (8004674 <main+0xce4>)
 80045ea:	f642 1204 	movw	r2, #10500	@ 0x2904
 80045ee:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM5->CCR2 = 10500;
 80045f0:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <main+0xce4>)
 80045f2:	f642 1204 	movw	r2, #10500	@ 0x2904
 80045f6:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM5->CCR3 = 10500;
 80045f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <main+0xce4>)
 80045fa:	f642 1204 	movw	r2, #10500	@ 0x2904
 80045fe:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM5->CCR4 = 10500;
 8004600:	4b1c      	ldr	r3, [pc, #112]	@ (8004674 <main+0xce4>)
 8004602:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40
 8004608:	e00f      	b.n	800462a <main+0xc9a>
			}
		}
		else
		{
			TIM5->CCR1 = 10500;
 800460a:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <main+0xce4>)
 800460c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004610:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM5->CCR2 = 10500;
 8004612:	4b18      	ldr	r3, [pc, #96]	@ (8004674 <main+0xce4>)
 8004614:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004618:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM5->CCR3 = 10500;
 800461a:	4b16      	ldr	r3, [pc, #88]	@ (8004674 <main+0xce4>)
 800461c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004620:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM5->CCR4 = 10500;
 8004622:	4b14      	ldr	r3, [pc, #80]	@ (8004674 <main+0xce4>)
 8004624:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004628:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		if(telemetry_rx_cplt_flag == 1)
 800462a:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <main+0xce8>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	f040 839a 	bne.w	8004d68 <main+0x13d8>
		{
			telemetry_rx_cplt_flag = 0;
 8004634:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <main+0xce8>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]

			if(iBus.SwA == 1000)
 800463a:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <main+0xcd0>)
 800463c:	891b      	ldrh	r3, [r3, #8]
 800463e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004642:	f040 8391 	bne.w	8004d68 <main+0x13d8>
			{
				unsigned char chksum = 0xff;
 8004646:	23ff      	movs	r3, #255	@ 0xff
 8004648:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004650:	e020      	b.n	8004694 <main+0xd04>
 8004652:	bf00      	nop
 8004654:	20000468 	.word	0x20000468
 8004658:	200002d8 	.word	0x200002d8
 800465c:	200003f0 	.word	0x200003f0
 8004660:	200002c0 	.word	0x200002c0
 8004664:	20000380 	.word	0x20000380
 8004668:	20000310 	.word	0x20000310
 800466c:	40000400 	.word	0x40000400
 8004670:	200005ac 	.word	0x200005ac
 8004674:	40000c00 	.word	0x40000c00
 8004678:	200005a4 	.word	0x200005a4
 800467c:	4aac      	ldr	r2, [pc, #688]	@ (8004930 <main+0xfa0>)
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	4413      	add	r3, r2
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	3301      	adds	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	2b12      	cmp	r3, #18
 8004698:	ddf0      	ble.n	800467c <main+0xcec>

				if(chksum == telemetry_rx_buf[19])
 800469a:	4ba5      	ldr	r3, [pc, #660]	@ (8004930 <main+0xfa0>)
 800469c:	7cdb      	ldrb	r3, [r3, #19]
 800469e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80046a2:	429a      	cmp	r2, r3
 80046a4:	f040 8360 	bne.w	8004d68 <main+0x13d8>
				{
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80046a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046ac:	48a1      	ldr	r0, [pc, #644]	@ (8004934 <main+0xfa4>)
 80046ae:	f7ff f89b 	bl	80037e8 <LL_TIM_CC_EnableChannel>

					TIM3->PSC = 1000;
 80046b2:	4ba0      	ldr	r3, [pc, #640]	@ (8004934 <main+0xfa4>)
 80046b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046b8:	629a      	str	r2, [r3, #40]	@ 0x28
					HAL_Delay(10);
 80046ba:	200a      	movs	r0, #10
 80046bc:	f002 fc4e 	bl	8006f5c <HAL_Delay>

					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80046c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046c4:	489b      	ldr	r0, [pc, #620]	@ (8004934 <main+0xfa4>)
 80046c6:	f7ff f8a0 	bl	800380a <LL_TIM_CC_DisableChannel>

					switch(telemetry_rx_buf[2])
 80046ca:	4b99      	ldr	r3, [pc, #612]	@ (8004930 <main+0xfa0>)
 80046cc:	789b      	ldrb	r3, [r3, #2]
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	f200 834a 	bhi.w	8004d68 <main+0x13d8>
 80046d4:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <main+0xd4c>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	08004721 	.word	0x08004721
 80046e0:	080047a5 	.word	0x080047a5
 80046e4:	08004829 	.word	0x08004829
 80046e8:	080048ad 	.word	0x080048ad
 80046ec:	0800497d 	.word	0x0800497d
 80046f0:	08004a01 	.word	0x08004a01
 80046f4:	08004d69 	.word	0x08004d69
 80046f8:	08004d69 	.word	0x08004d69
 80046fc:	08004d69 	.word	0x08004d69
 8004700:	08004d69 	.word	0x08004d69
 8004704:	08004d69 	.word	0x08004d69
 8004708:	08004d69 	.word	0x08004d69
 800470c:	08004d69 	.word	0x08004d69
 8004710:	08004d69 	.word	0x08004d69
 8004714:	08004d69 	.word	0x08004d69
 8004718:	08004d69 	.word	0x08004d69
 800471c:	08004a85 	.word	0x08004a85
					{
					case 0:
						roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8004720:	4b85      	ldr	r3, [pc, #532]	@ (8004938 <main+0xfa8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a85      	ldr	r2, [pc, #532]	@ (800493c <main+0xfac>)
 8004726:	6013      	str	r3, [r2, #0]
						roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8004728:	4b85      	ldr	r3, [pc, #532]	@ (8004940 <main+0xfb0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a83      	ldr	r2, [pc, #524]	@ (800493c <main+0xfac>)
 800472e:	6053      	str	r3, [r2, #4]
						roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8004730:	4b84      	ldr	r3, [pc, #528]	@ (8004944 <main+0xfb4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a81      	ldr	r2, [pc, #516]	@ (800493c <main+0xfac>)
 8004736:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004738:	4b7d      	ldr	r3, [pc, #500]	@ (8004930 <main+0xfa0>)
 800473a:	789b      	ldrb	r3, [r3, #2]
 800473c:	4a7f      	ldr	r2, [pc, #508]	@ (800493c <main+0xfac>)
 800473e:	edd2 7a00 	vldr	s15, [r2]
 8004742:	4a7e      	ldr	r2, [pc, #504]	@ (800493c <main+0xfac>)
 8004744:	ed92 7a01 	vldr	s14, [r2, #4]
 8004748:	4a7c      	ldr	r2, [pc, #496]	@ (800493c <main+0xfac>)
 800474a:	edd2 6a02 	vldr	s13, [r2, #8]
 800474e:	eeb0 1a66 	vmov.f32	s2, s13
 8004752:	eef0 0a47 	vmov.f32	s1, s14
 8004756:	eeb0 0a67 	vmov.f32	s0, s15
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fc1a 	bl	8000f94 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8004760:	4b73      	ldr	r3, [pc, #460]	@ (8004930 <main+0xfa0>)
 8004762:	7898      	ldrb	r0, [r3, #2]
 8004764:	4b78      	ldr	r3, [pc, #480]	@ (8004948 <main+0xfb8>)
 8004766:	4a79      	ldr	r2, [pc, #484]	@ (800494c <main+0xfbc>)
 8004768:	4974      	ldr	r1, [pc, #464]	@ (800493c <main+0xfac>)
 800476a:	f7fc fca9 	bl	80010c0 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 800476e:	4b70      	ldr	r3, [pc, #448]	@ (8004930 <main+0xfa0>)
 8004770:	789b      	ldrb	r3, [r3, #2]
 8004772:	4a72      	ldr	r2, [pc, #456]	@ (800493c <main+0xfac>)
 8004774:	edd2 7a00 	vldr	s15, [r2]
 8004778:	4a70      	ldr	r2, [pc, #448]	@ (800493c <main+0xfac>)
 800477a:	ed92 7a01 	vldr	s14, [r2, #4]
 800477e:	4a6f      	ldr	r2, [pc, #444]	@ (800493c <main+0xfac>)
 8004780:	edd2 6a02 	vldr	s13, [r2, #8]
 8004784:	eeb0 1a66 	vmov.f32	s2, s13
 8004788:	eef0 0a47 	vmov.f32	s1, s14
 800478c:	eeb0 0a67 	vmov.f32	s0, s15
 8004790:	4619      	mov	r1, r3
 8004792:	486f      	ldr	r0, [pc, #444]	@ (8004950 <main+0xfc0>)
 8004794:	f001 f972 	bl	8005a7c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004798:	2214      	movs	r2, #20
 800479a:	496d      	ldr	r1, [pc, #436]	@ (8004950 <main+0xfc0>)
 800479c:	486d      	ldr	r0, [pc, #436]	@ (8004954 <main+0xfc4>)
 800479e:	f005 fc5a 	bl	800a056 <HAL_UART_Transmit_IT>
						break;
 80047a2:	e2e1      	b.n	8004d68 <main+0x13d8>
					case 1:
						roll.out.kp = *(float*)&telemetry_rx_buf[3];
 80047a4:	4b64      	ldr	r3, [pc, #400]	@ (8004938 <main+0xfa8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a64      	ldr	r2, [pc, #400]	@ (800493c <main+0xfac>)
 80047aa:	6393      	str	r3, [r2, #56]	@ 0x38
						roll.out.ki = *(float*)&telemetry_rx_buf[7];
 80047ac:	4b64      	ldr	r3, [pc, #400]	@ (8004940 <main+0xfb0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a62      	ldr	r2, [pc, #392]	@ (800493c <main+0xfac>)
 80047b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
						roll.out.kd = *(float*)&telemetry_rx_buf[11];
 80047b4:	4b63      	ldr	r3, [pc, #396]	@ (8004944 <main+0xfb4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a60      	ldr	r2, [pc, #384]	@ (800493c <main+0xfac>)
 80047ba:	6413      	str	r3, [r2, #64]	@ 0x40
						EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 80047bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004930 <main+0xfa0>)
 80047be:	789b      	ldrb	r3, [r3, #2]
 80047c0:	4a5e      	ldr	r2, [pc, #376]	@ (800493c <main+0xfac>)
 80047c2:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80047c6:	4a5d      	ldr	r2, [pc, #372]	@ (800493c <main+0xfac>)
 80047c8:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 80047cc:	4a5b      	ldr	r2, [pc, #364]	@ (800493c <main+0xfac>)
 80047ce:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 80047d2:	eeb0 1a66 	vmov.f32	s2, s13
 80047d6:	eef0 0a47 	vmov.f32	s1, s14
 80047da:	eeb0 0a67 	vmov.f32	s0, s15
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fc fbd8 	bl	8000f94 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 80047e4:	4b52      	ldr	r3, [pc, #328]	@ (8004930 <main+0xfa0>)
 80047e6:	7898      	ldrb	r0, [r3, #2]
 80047e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004958 <main+0xfc8>)
 80047ea:	4a5c      	ldr	r2, [pc, #368]	@ (800495c <main+0xfcc>)
 80047ec:	495c      	ldr	r1, [pc, #368]	@ (8004960 <main+0xfd0>)
 80047ee:	f7fc fc67 	bl	80010c0 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 80047f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004930 <main+0xfa0>)
 80047f4:	789b      	ldrb	r3, [r3, #2]
 80047f6:	4a51      	ldr	r2, [pc, #324]	@ (800493c <main+0xfac>)
 80047f8:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80047fc:	4a4f      	ldr	r2, [pc, #316]	@ (800493c <main+0xfac>)
 80047fe:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004802:	4a4e      	ldr	r2, [pc, #312]	@ (800493c <main+0xfac>)
 8004804:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004808:	eeb0 1a66 	vmov.f32	s2, s13
 800480c:	eef0 0a47 	vmov.f32	s1, s14
 8004810:	eeb0 0a67 	vmov.f32	s0, s15
 8004814:	4619      	mov	r1, r3
 8004816:	484e      	ldr	r0, [pc, #312]	@ (8004950 <main+0xfc0>)
 8004818:	f001 f930 	bl	8005a7c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800481c:	2214      	movs	r2, #20
 800481e:	494c      	ldr	r1, [pc, #304]	@ (8004950 <main+0xfc0>)
 8004820:	484c      	ldr	r0, [pc, #304]	@ (8004954 <main+0xfc4>)
 8004822:	f005 fc18 	bl	800a056 <HAL_UART_Transmit_IT>
						break;
 8004826:	e29f      	b.n	8004d68 <main+0x13d8>
					case 2:
						pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8004828:	4b43      	ldr	r3, [pc, #268]	@ (8004938 <main+0xfa8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a4d      	ldr	r2, [pc, #308]	@ (8004964 <main+0xfd4>)
 800482e:	6013      	str	r3, [r2, #0]
						pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 8004830:	4b43      	ldr	r3, [pc, #268]	@ (8004940 <main+0xfb0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a4b      	ldr	r2, [pc, #300]	@ (8004964 <main+0xfd4>)
 8004836:	6053      	str	r3, [r2, #4]
						pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 8004838:	4b42      	ldr	r3, [pc, #264]	@ (8004944 <main+0xfb4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a49      	ldr	r2, [pc, #292]	@ (8004964 <main+0xfd4>)
 800483e:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004840:	4b3b      	ldr	r3, [pc, #236]	@ (8004930 <main+0xfa0>)
 8004842:	789b      	ldrb	r3, [r3, #2]
 8004844:	4a47      	ldr	r2, [pc, #284]	@ (8004964 <main+0xfd4>)
 8004846:	edd2 7a00 	vldr	s15, [r2]
 800484a:	4a46      	ldr	r2, [pc, #280]	@ (8004964 <main+0xfd4>)
 800484c:	ed92 7a01 	vldr	s14, [r2, #4]
 8004850:	4a44      	ldr	r2, [pc, #272]	@ (8004964 <main+0xfd4>)
 8004852:	edd2 6a02 	vldr	s13, [r2, #8]
 8004856:	eeb0 1a66 	vmov.f32	s2, s13
 800485a:	eef0 0a47 	vmov.f32	s1, s14
 800485e:	eeb0 0a67 	vmov.f32	s0, s15
 8004862:	4618      	mov	r0, r3
 8004864:	f7fc fb96 	bl	8000f94 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 8004868:	4b31      	ldr	r3, [pc, #196]	@ (8004930 <main+0xfa0>)
 800486a:	7898      	ldrb	r0, [r3, #2]
 800486c:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <main+0xfd8>)
 800486e:	4a3f      	ldr	r2, [pc, #252]	@ (800496c <main+0xfdc>)
 8004870:	493c      	ldr	r1, [pc, #240]	@ (8004964 <main+0xfd4>)
 8004872:	f7fc fc25 	bl	80010c0 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004876:	4b2e      	ldr	r3, [pc, #184]	@ (8004930 <main+0xfa0>)
 8004878:	789b      	ldrb	r3, [r3, #2]
 800487a:	4a3a      	ldr	r2, [pc, #232]	@ (8004964 <main+0xfd4>)
 800487c:	edd2 7a00 	vldr	s15, [r2]
 8004880:	4a38      	ldr	r2, [pc, #224]	@ (8004964 <main+0xfd4>)
 8004882:	ed92 7a01 	vldr	s14, [r2, #4]
 8004886:	4a37      	ldr	r2, [pc, #220]	@ (8004964 <main+0xfd4>)
 8004888:	edd2 6a02 	vldr	s13, [r2, #8]
 800488c:	eeb0 1a66 	vmov.f32	s2, s13
 8004890:	eef0 0a47 	vmov.f32	s1, s14
 8004894:	eeb0 0a67 	vmov.f32	s0, s15
 8004898:	4619      	mov	r1, r3
 800489a:	482d      	ldr	r0, [pc, #180]	@ (8004950 <main+0xfc0>)
 800489c:	f001 f8ee 	bl	8005a7c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80048a0:	2214      	movs	r2, #20
 80048a2:	492b      	ldr	r1, [pc, #172]	@ (8004950 <main+0xfc0>)
 80048a4:	482b      	ldr	r0, [pc, #172]	@ (8004954 <main+0xfc4>)
 80048a6:	f005 fbd6 	bl	800a056 <HAL_UART_Transmit_IT>
						break;
 80048aa:	e25d      	b.n	8004d68 <main+0x13d8>
					case 3:
						pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 80048ac:	4b22      	ldr	r3, [pc, #136]	@ (8004938 <main+0xfa8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004964 <main+0xfd4>)
 80048b2:	6393      	str	r3, [r2, #56]	@ 0x38
						pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 80048b4:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <main+0xfb0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004964 <main+0xfd4>)
 80048ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
						pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <main+0xfb4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a28      	ldr	r2, [pc, #160]	@ (8004964 <main+0xfd4>)
 80048c2:	6413      	str	r3, [r2, #64]	@ 0x40
						EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80048c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <main+0xfa0>)
 80048c6:	789b      	ldrb	r3, [r3, #2]
 80048c8:	4a26      	ldr	r2, [pc, #152]	@ (8004964 <main+0xfd4>)
 80048ca:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 80048ce:	4a25      	ldr	r2, [pc, #148]	@ (8004964 <main+0xfd4>)
 80048d0:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 80048d4:	4a23      	ldr	r2, [pc, #140]	@ (8004964 <main+0xfd4>)
 80048d6:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 80048da:	eeb0 1a66 	vmov.f32	s2, s13
 80048de:	eef0 0a47 	vmov.f32	s1, s14
 80048e2:	eeb0 0a67 	vmov.f32	s0, s15
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fb54 	bl	8000f94 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 80048ec:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <main+0xfa0>)
 80048ee:	7898      	ldrb	r0, [r3, #2]
 80048f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004970 <main+0xfe0>)
 80048f2:	4a20      	ldr	r2, [pc, #128]	@ (8004974 <main+0xfe4>)
 80048f4:	4920      	ldr	r1, [pc, #128]	@ (8004978 <main+0xfe8>)
 80048f6:	f7fc fbe3 	bl	80010c0 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80048fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004930 <main+0xfa0>)
 80048fc:	789b      	ldrb	r3, [r3, #2]
 80048fe:	4a19      	ldr	r2, [pc, #100]	@ (8004964 <main+0xfd4>)
 8004900:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004904:	4a17      	ldr	r2, [pc, #92]	@ (8004964 <main+0xfd4>)
 8004906:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 800490a:	4a16      	ldr	r2, [pc, #88]	@ (8004964 <main+0xfd4>)
 800490c:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004910:	eeb0 1a66 	vmov.f32	s2, s13
 8004914:	eef0 0a47 	vmov.f32	s1, s14
 8004918:	eeb0 0a67 	vmov.f32	s0, s15
 800491c:	4619      	mov	r1, r3
 800491e:	480c      	ldr	r0, [pc, #48]	@ (8004950 <main+0xfc0>)
 8004920:	f001 f8ac 	bl	8005a7c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004924:	2214      	movs	r2, #20
 8004926:	490a      	ldr	r1, [pc, #40]	@ (8004950 <main+0xfc0>)
 8004928:	480a      	ldr	r0, [pc, #40]	@ (8004954 <main+0xfc4>)
 800492a:	f005 fb94 	bl	800a056 <HAL_UART_Transmit_IT>
						break;
 800492e:	e21b      	b.n	8004d68 <main+0x13d8>
 8004930:	20000590 	.word	0x20000590
 8004934:	40000400 	.word	0x40000400
 8004938:	20000593 	.word	0x20000593
 800493c:	20000310 	.word	0x20000310
 8004940:	20000597 	.word	0x20000597
 8004944:	2000059b 	.word	0x2000059b
 8004948:	20000318 	.word	0x20000318
 800494c:	20000314 	.word	0x20000314
 8004950:	20000568 	.word	0x20000568
 8004954:	200005e8 	.word	0x200005e8
 8004958:	20000350 	.word	0x20000350
 800495c:	2000034c 	.word	0x2000034c
 8004960:	20000348 	.word	0x20000348
 8004964:	20000380 	.word	0x20000380
 8004968:	20000388 	.word	0x20000388
 800496c:	20000384 	.word	0x20000384
 8004970:	200003c0 	.word	0x200003c0
 8004974:	200003bc 	.word	0x200003bc
 8004978:	200003b8 	.word	0x200003b8
					case 4:
						yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 800497c:	4ba0      	ldr	r3, [pc, #640]	@ (8004c00 <main+0x1270>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4aa0      	ldr	r2, [pc, #640]	@ (8004c04 <main+0x1274>)
 8004982:	6013      	str	r3, [r2, #0]
						yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 8004984:	4ba0      	ldr	r3, [pc, #640]	@ (8004c08 <main+0x1278>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a9e      	ldr	r2, [pc, #632]	@ (8004c04 <main+0x1274>)
 800498a:	6053      	str	r3, [r2, #4]
						yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 800498c:	4b9f      	ldr	r3, [pc, #636]	@ (8004c0c <main+0x127c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a9c      	ldr	r2, [pc, #624]	@ (8004c04 <main+0x1274>)
 8004992:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8004994:	4b9e      	ldr	r3, [pc, #632]	@ (8004c10 <main+0x1280>)
 8004996:	789b      	ldrb	r3, [r3, #2]
 8004998:	4a9a      	ldr	r2, [pc, #616]	@ (8004c04 <main+0x1274>)
 800499a:	edd2 7a00 	vldr	s15, [r2]
 800499e:	4a99      	ldr	r2, [pc, #612]	@ (8004c04 <main+0x1274>)
 80049a0:	ed92 7a01 	vldr	s14, [r2, #4]
 80049a4:	4a97      	ldr	r2, [pc, #604]	@ (8004c04 <main+0x1274>)
 80049a6:	edd2 6a02 	vldr	s13, [r2, #8]
 80049aa:	eeb0 1a66 	vmov.f32	s2, s13
 80049ae:	eef0 0a47 	vmov.f32	s1, s14
 80049b2:	eeb0 0a67 	vmov.f32	s0, s15
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fc faec 	bl	8000f94 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 80049bc:	4b94      	ldr	r3, [pc, #592]	@ (8004c10 <main+0x1280>)
 80049be:	7898      	ldrb	r0, [r3, #2]
 80049c0:	4b94      	ldr	r3, [pc, #592]	@ (8004c14 <main+0x1284>)
 80049c2:	4a95      	ldr	r2, [pc, #596]	@ (8004c18 <main+0x1288>)
 80049c4:	498f      	ldr	r1, [pc, #572]	@ (8004c04 <main+0x1274>)
 80049c6:	f7fc fb7b 	bl	80010c0 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80049ca:	4b91      	ldr	r3, [pc, #580]	@ (8004c10 <main+0x1280>)
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	4a8d      	ldr	r2, [pc, #564]	@ (8004c04 <main+0x1274>)
 80049d0:	edd2 7a00 	vldr	s15, [r2]
 80049d4:	4a8b      	ldr	r2, [pc, #556]	@ (8004c04 <main+0x1274>)
 80049d6:	ed92 7a01 	vldr	s14, [r2, #4]
 80049da:	4a8a      	ldr	r2, [pc, #552]	@ (8004c04 <main+0x1274>)
 80049dc:	edd2 6a02 	vldr	s13, [r2, #8]
 80049e0:	eeb0 1a66 	vmov.f32	s2, s13
 80049e4:	eef0 0a47 	vmov.f32	s1, s14
 80049e8:	eeb0 0a67 	vmov.f32	s0, s15
 80049ec:	4619      	mov	r1, r3
 80049ee:	488b      	ldr	r0, [pc, #556]	@ (8004c1c <main+0x128c>)
 80049f0:	f001 f844 	bl	8005a7c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 80049f4:	2214      	movs	r2, #20
 80049f6:	4989      	ldr	r1, [pc, #548]	@ (8004c1c <main+0x128c>)
 80049f8:	4889      	ldr	r0, [pc, #548]	@ (8004c20 <main+0x1290>)
 80049fa:	f005 fb2c 	bl	800a056 <HAL_UART_Transmit_IT>
						break;
 80049fe:	e1b3      	b.n	8004d68 <main+0x13d8>
					case 5:
						yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 8004a00:	4b7f      	ldr	r3, [pc, #508]	@ (8004c00 <main+0x1270>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a87      	ldr	r2, [pc, #540]	@ (8004c24 <main+0x1294>)
 8004a06:	6013      	str	r3, [r2, #0]
						yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 8004a08:	4b7f      	ldr	r3, [pc, #508]	@ (8004c08 <main+0x1278>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a85      	ldr	r2, [pc, #532]	@ (8004c24 <main+0x1294>)
 8004a0e:	6053      	str	r3, [r2, #4]
						yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 8004a10:	4b7e      	ldr	r3, [pc, #504]	@ (8004c0c <main+0x127c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a83      	ldr	r2, [pc, #524]	@ (8004c24 <main+0x1294>)
 8004a16:	6093      	str	r3, [r2, #8]
						EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004a18:	4b7d      	ldr	r3, [pc, #500]	@ (8004c10 <main+0x1280>)
 8004a1a:	789b      	ldrb	r3, [r3, #2]
 8004a1c:	4a81      	ldr	r2, [pc, #516]	@ (8004c24 <main+0x1294>)
 8004a1e:	edd2 7a00 	vldr	s15, [r2]
 8004a22:	4a80      	ldr	r2, [pc, #512]	@ (8004c24 <main+0x1294>)
 8004a24:	ed92 7a01 	vldr	s14, [r2, #4]
 8004a28:	4a7e      	ldr	r2, [pc, #504]	@ (8004c24 <main+0x1294>)
 8004a2a:	edd2 6a02 	vldr	s13, [r2, #8]
 8004a2e:	eeb0 1a66 	vmov.f32	s2, s13
 8004a32:	eef0 0a47 	vmov.f32	s1, s14
 8004a36:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fc faaa 	bl	8000f94 <EP_PIDGain_Write>
						EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 8004a40:	4b73      	ldr	r3, [pc, #460]	@ (8004c10 <main+0x1280>)
 8004a42:	7898      	ldrb	r0, [r3, #2]
 8004a44:	4b78      	ldr	r3, [pc, #480]	@ (8004c28 <main+0x1298>)
 8004a46:	4a79      	ldr	r2, [pc, #484]	@ (8004c2c <main+0x129c>)
 8004a48:	4976      	ldr	r1, [pc, #472]	@ (8004c24 <main+0x1294>)
 8004a4a:	f7fc fb39 	bl	80010c0 <EP_PIDGain_Read>
						Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004a4e:	4b70      	ldr	r3, [pc, #448]	@ (8004c10 <main+0x1280>)
 8004a50:	789b      	ldrb	r3, [r3, #2]
 8004a52:	4a74      	ldr	r2, [pc, #464]	@ (8004c24 <main+0x1294>)
 8004a54:	edd2 7a00 	vldr	s15, [r2]
 8004a58:	4a72      	ldr	r2, [pc, #456]	@ (8004c24 <main+0x1294>)
 8004a5a:	ed92 7a01 	vldr	s14, [r2, #4]
 8004a5e:	4a71      	ldr	r2, [pc, #452]	@ (8004c24 <main+0x1294>)
 8004a60:	edd2 6a02 	vldr	s13, [r2, #8]
 8004a64:	eeb0 1a66 	vmov.f32	s2, s13
 8004a68:	eef0 0a47 	vmov.f32	s1, s14
 8004a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a70:	4619      	mov	r1, r3
 8004a72:	486a      	ldr	r0, [pc, #424]	@ (8004c1c <main+0x128c>)
 8004a74:	f001 f802 	bl	8005a7c <Encode_Msg_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004a78:	2214      	movs	r2, #20
 8004a7a:	4968      	ldr	r1, [pc, #416]	@ (8004c1c <main+0x128c>)
 8004a7c:	4868      	ldr	r0, [pc, #416]	@ (8004c20 <main+0x1290>)
 8004a7e:	f005 faea 	bl	800a056 <HAL_UART_Transmit_IT>
						break;
 8004a82:	e171      	b.n	8004d68 <main+0x13d8>
					case 0x10:
						switch(telemetry_rx_buf[3])
 8004a84:	4b62      	ldr	r3, [pc, #392]	@ (8004c10 <main+0x1280>)
 8004a86:	78db      	ldrb	r3, [r3, #3]
 8004a88:	2b06      	cmp	r3, #6
 8004a8a:	f200 816c 	bhi.w	8004d66 <main+0x13d6>
 8004a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <main+0x1104>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004ab1 	.word	0x08004ab1
 8004a98:	08004ae9 	.word	0x08004ae9
 8004a9c:	08004b21 	.word	0x08004b21
 8004aa0:	08004b59 	.word	0x08004b59
 8004aa4:	08004b91 	.word	0x08004b91
 8004aa8:	08004bc9 	.word	0x08004bc9
 8004aac:	08004c39 	.word	0x08004c39
						{
						case 0:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 8004ab0:	4b57      	ldr	r3, [pc, #348]	@ (8004c10 <main+0x1280>)
 8004ab2:	78db      	ldrb	r3, [r3, #3]
 8004ab4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c30 <main+0x12a0>)
 8004ab6:	edd2 7a00 	vldr	s15, [r2]
 8004aba:	4a5d      	ldr	r2, [pc, #372]	@ (8004c30 <main+0x12a0>)
 8004abc:	ed92 7a01 	vldr	s14, [r2, #4]
 8004ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8004c30 <main+0x12a0>)
 8004ac2:	edd2 6a02 	vldr	s13, [r2, #8]
 8004ac6:	eeb0 1a66 	vmov.f32	s2, s13
 8004aca:	eef0 0a47 	vmov.f32	s1, s14
 8004ace:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4851      	ldr	r0, [pc, #324]	@ (8004c1c <main+0x128c>)
 8004ad6:	f000 ffd1 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004ada:	230a      	movs	r3, #10
 8004adc:	2214      	movs	r2, #20
 8004ade:	494f      	ldr	r1, [pc, #316]	@ (8004c1c <main+0x128c>)
 8004ae0:	484f      	ldr	r0, [pc, #316]	@ (8004c20 <main+0x1290>)
 8004ae2:	f005 fa2d 	bl	8009f40 <HAL_UART_Transmit>
							break;
 8004ae6:	e13e      	b.n	8004d66 <main+0x13d6>
						case 1:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 8004ae8:	4b49      	ldr	r3, [pc, #292]	@ (8004c10 <main+0x1280>)
 8004aea:	78db      	ldrb	r3, [r3, #3]
 8004aec:	4a50      	ldr	r2, [pc, #320]	@ (8004c30 <main+0x12a0>)
 8004aee:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004af2:	4a4f      	ldr	r2, [pc, #316]	@ (8004c30 <main+0x12a0>)
 8004af4:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004af8:	4a4d      	ldr	r2, [pc, #308]	@ (8004c30 <main+0x12a0>)
 8004afa:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004afe:	eeb0 1a66 	vmov.f32	s2, s13
 8004b02:	eef0 0a47 	vmov.f32	s1, s14
 8004b06:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4843      	ldr	r0, [pc, #268]	@ (8004c1c <main+0x128c>)
 8004b0e:	f000 ffb5 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004b12:	230a      	movs	r3, #10
 8004b14:	2214      	movs	r2, #20
 8004b16:	4941      	ldr	r1, [pc, #260]	@ (8004c1c <main+0x128c>)
 8004b18:	4841      	ldr	r0, [pc, #260]	@ (8004c20 <main+0x1290>)
 8004b1a:	f005 fa11 	bl	8009f40 <HAL_UART_Transmit>
							break;
 8004b1e:	e122      	b.n	8004d66 <main+0x13d6>
						case 2:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004b20:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <main+0x1280>)
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	4a43      	ldr	r2, [pc, #268]	@ (8004c34 <main+0x12a4>)
 8004b26:	edd2 7a00 	vldr	s15, [r2]
 8004b2a:	4a42      	ldr	r2, [pc, #264]	@ (8004c34 <main+0x12a4>)
 8004b2c:	ed92 7a01 	vldr	s14, [r2, #4]
 8004b30:	4a40      	ldr	r2, [pc, #256]	@ (8004c34 <main+0x12a4>)
 8004b32:	edd2 6a02 	vldr	s13, [r2, #8]
 8004b36:	eeb0 1a66 	vmov.f32	s2, s13
 8004b3a:	eef0 0a47 	vmov.f32	s1, s14
 8004b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b42:	4619      	mov	r1, r3
 8004b44:	4835      	ldr	r0, [pc, #212]	@ (8004c1c <main+0x128c>)
 8004b46:	f000 ff99 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004b4a:	230a      	movs	r3, #10
 8004b4c:	2214      	movs	r2, #20
 8004b4e:	4933      	ldr	r1, [pc, #204]	@ (8004c1c <main+0x128c>)
 8004b50:	4833      	ldr	r0, [pc, #204]	@ (8004c20 <main+0x1290>)
 8004b52:	f005 f9f5 	bl	8009f40 <HAL_UART_Transmit>
							break;
 8004b56:	e106      	b.n	8004d66 <main+0x13d6>
						case 3:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004b58:	4b2d      	ldr	r3, [pc, #180]	@ (8004c10 <main+0x1280>)
 8004b5a:	78db      	ldrb	r3, [r3, #3]
 8004b5c:	4a35      	ldr	r2, [pc, #212]	@ (8004c34 <main+0x12a4>)
 8004b5e:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004b62:	4a34      	ldr	r2, [pc, #208]	@ (8004c34 <main+0x12a4>)
 8004b64:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004b68:	4a32      	ldr	r2, [pc, #200]	@ (8004c34 <main+0x12a4>)
 8004b6a:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004b6e:	eeb0 1a66 	vmov.f32	s2, s13
 8004b72:	eef0 0a47 	vmov.f32	s1, s14
 8004b76:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4827      	ldr	r0, [pc, #156]	@ (8004c1c <main+0x128c>)
 8004b7e:	f000 ff7d 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004b82:	230a      	movs	r3, #10
 8004b84:	2214      	movs	r2, #20
 8004b86:	4925      	ldr	r1, [pc, #148]	@ (8004c1c <main+0x128c>)
 8004b88:	4825      	ldr	r0, [pc, #148]	@ (8004c20 <main+0x1290>)
 8004b8a:	f005 f9d9 	bl	8009f40 <HAL_UART_Transmit>
							break;
 8004b8e:	e0ea      	b.n	8004d66 <main+0x13d6>
						case 4:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8004b90:	4b1f      	ldr	r3, [pc, #124]	@ (8004c10 <main+0x1280>)
 8004b92:	78db      	ldrb	r3, [r3, #3]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	@ (8004c04 <main+0x1274>)
 8004b96:	edd2 7a00 	vldr	s15, [r2]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c04 <main+0x1274>)
 8004b9c:	ed92 7a01 	vldr	s14, [r2, #4]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <main+0x1274>)
 8004ba2:	edd2 6a02 	vldr	s13, [r2, #8]
 8004ba6:	eeb0 1a66 	vmov.f32	s2, s13
 8004baa:	eef0 0a47 	vmov.f32	s1, s14
 8004bae:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4819      	ldr	r0, [pc, #100]	@ (8004c1c <main+0x128c>)
 8004bb6:	f000 ff61 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004bba:	230a      	movs	r3, #10
 8004bbc:	2214      	movs	r2, #20
 8004bbe:	4917      	ldr	r1, [pc, #92]	@ (8004c1c <main+0x128c>)
 8004bc0:	4817      	ldr	r0, [pc, #92]	@ (8004c20 <main+0x1290>)
 8004bc2:	f005 f9bd 	bl	8009f40 <HAL_UART_Transmit>
							break;
 8004bc6:	e0ce      	b.n	8004d66 <main+0x13d6>
						case 5:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <main+0x1280>)
 8004bca:	78db      	ldrb	r3, [r3, #3]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	@ (8004c24 <main+0x1294>)
 8004bce:	edd2 7a00 	vldr	s15, [r2]
 8004bd2:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <main+0x1294>)
 8004bd4:	ed92 7a01 	vldr	s14, [r2, #4]
 8004bd8:	4a12      	ldr	r2, [pc, #72]	@ (8004c24 <main+0x1294>)
 8004bda:	edd2 6a02 	vldr	s13, [r2, #8]
 8004bde:	eeb0 1a66 	vmov.f32	s2, s13
 8004be2:	eef0 0a47 	vmov.f32	s1, s14
 8004be6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bea:	4619      	mov	r1, r3
 8004bec:	480b      	ldr	r0, [pc, #44]	@ (8004c1c <main+0x128c>)
 8004bee:	f000 ff45 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004bf2:	230a      	movs	r3, #10
 8004bf4:	2214      	movs	r2, #20
 8004bf6:	4909      	ldr	r1, [pc, #36]	@ (8004c1c <main+0x128c>)
 8004bf8:	4809      	ldr	r0, [pc, #36]	@ (8004c20 <main+0x1290>)
 8004bfa:	f005 f9a1 	bl	8009f40 <HAL_UART_Transmit>
							break;
 8004bfe:	e0b2      	b.n	8004d66 <main+0x13d6>
 8004c00:	20000593 	.word	0x20000593
 8004c04:	200003f0 	.word	0x200003f0
 8004c08:	20000597 	.word	0x20000597
 8004c0c:	2000059b 	.word	0x2000059b
 8004c10:	20000590 	.word	0x20000590
 8004c14:	200003f8 	.word	0x200003f8
 8004c18:	200003f4 	.word	0x200003f4
 8004c1c:	20000568 	.word	0x20000568
 8004c20:	200005e8 	.word	0x200005e8
 8004c24:	20000428 	.word	0x20000428
 8004c28:	20000430 	.word	0x20000430
 8004c2c:	2000042c 	.word	0x2000042c
 8004c30:	20000310 	.word	0x20000310
 8004c34:	20000380 	.word	0x20000380
						case 6:
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 8004c38:	4b6f      	ldr	r3, [pc, #444]	@ (8004df8 <main+0x1468>)
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
 8004c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004df8 <main+0x1468>)
 8004c40:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c44:	4b6c      	ldr	r3, [pc, #432]	@ (8004df8 <main+0x1468>)
 8004c46:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c4a:	eeb0 1a66 	vmov.f32	s2, s13
 8004c4e:	eef0 0a47 	vmov.f32	s1, s14
 8004c52:	eeb0 0a67 	vmov.f32	s0, s15
 8004c56:	2100      	movs	r1, #0
 8004c58:	4868      	ldr	r0, [pc, #416]	@ (8004dfc <main+0x146c>)
 8004c5a:	f000 ff0f 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004c5e:	230a      	movs	r3, #10
 8004c60:	2214      	movs	r2, #20
 8004c62:	4966      	ldr	r1, [pc, #408]	@ (8004dfc <main+0x146c>)
 8004c64:	4866      	ldr	r0, [pc, #408]	@ (8004e00 <main+0x1470>)
 8004c66:	f005 f96b 	bl	8009f40 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 8004c6a:	4b63      	ldr	r3, [pc, #396]	@ (8004df8 <main+0x1468>)
 8004c6c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004c70:	4b61      	ldr	r3, [pc, #388]	@ (8004df8 <main+0x1468>)
 8004c72:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004c76:	4b60      	ldr	r3, [pc, #384]	@ (8004df8 <main+0x1468>)
 8004c78:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8004c7c:	eeb0 1a66 	vmov.f32	s2, s13
 8004c80:	eef0 0a47 	vmov.f32	s1, s14
 8004c84:	eeb0 0a67 	vmov.f32	s0, s15
 8004c88:	2101      	movs	r1, #1
 8004c8a:	485c      	ldr	r0, [pc, #368]	@ (8004dfc <main+0x146c>)
 8004c8c:	f000 fef6 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004c90:	230a      	movs	r3, #10
 8004c92:	2214      	movs	r2, #20
 8004c94:	4959      	ldr	r1, [pc, #356]	@ (8004dfc <main+0x146c>)
 8004c96:	485a      	ldr	r0, [pc, #360]	@ (8004e00 <main+0x1470>)
 8004c98:	f005 f952 	bl	8009f40 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004c9c:	4b59      	ldr	r3, [pc, #356]	@ (8004e04 <main+0x1474>)
 8004c9e:	edd3 7a00 	vldr	s15, [r3]
 8004ca2:	4b58      	ldr	r3, [pc, #352]	@ (8004e04 <main+0x1474>)
 8004ca4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ca8:	4b56      	ldr	r3, [pc, #344]	@ (8004e04 <main+0x1474>)
 8004caa:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cae:	eeb0 1a66 	vmov.f32	s2, s13
 8004cb2:	eef0 0a47 	vmov.f32	s1, s14
 8004cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cba:	2102      	movs	r1, #2
 8004cbc:	484f      	ldr	r0, [pc, #316]	@ (8004dfc <main+0x146c>)
 8004cbe:	f000 fedd 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004cc2:	230a      	movs	r3, #10
 8004cc4:	2214      	movs	r2, #20
 8004cc6:	494d      	ldr	r1, [pc, #308]	@ (8004dfc <main+0x146c>)
 8004cc8:	484d      	ldr	r0, [pc, #308]	@ (8004e00 <main+0x1470>)
 8004cca:	f005 f939 	bl	8009f40 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004cce:	4b4d      	ldr	r3, [pc, #308]	@ (8004e04 <main+0x1474>)
 8004cd0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004e04 <main+0x1474>)
 8004cd6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004cda:	4b4a      	ldr	r3, [pc, #296]	@ (8004e04 <main+0x1474>)
 8004cdc:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8004ce0:	eeb0 1a66 	vmov.f32	s2, s13
 8004ce4:	eef0 0a47 	vmov.f32	s1, s14
 8004ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8004cec:	2103      	movs	r1, #3
 8004cee:	4843      	ldr	r0, [pc, #268]	@ (8004dfc <main+0x146c>)
 8004cf0:	f000 fec4 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004cf4:	230a      	movs	r3, #10
 8004cf6:	2214      	movs	r2, #20
 8004cf8:	4940      	ldr	r1, [pc, #256]	@ (8004dfc <main+0x146c>)
 8004cfa:	4841      	ldr	r0, [pc, #260]	@ (8004e00 <main+0x1470>)
 8004cfc:	f005 f920 	bl	8009f40 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8004d00:	4b41      	ldr	r3, [pc, #260]	@ (8004e08 <main+0x1478>)
 8004d02:	edd3 7a00 	vldr	s15, [r3]
 8004d06:	4b40      	ldr	r3, [pc, #256]	@ (8004e08 <main+0x1478>)
 8004d08:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e08 <main+0x1478>)
 8004d0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d12:	eeb0 1a66 	vmov.f32	s2, s13
 8004d16:	eef0 0a47 	vmov.f32	s1, s14
 8004d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d1e:	2104      	movs	r1, #4
 8004d20:	4836      	ldr	r0, [pc, #216]	@ (8004dfc <main+0x146c>)
 8004d22:	f000 feab 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004d26:	230a      	movs	r3, #10
 8004d28:	2214      	movs	r2, #20
 8004d2a:	4934      	ldr	r1, [pc, #208]	@ (8004dfc <main+0x146c>)
 8004d2c:	4834      	ldr	r0, [pc, #208]	@ (8004e00 <main+0x1470>)
 8004d2e:	f005 f907 	bl	8009f40 <HAL_UART_Transmit>
							Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004d32:	4b36      	ldr	r3, [pc, #216]	@ (8004e0c <main+0x147c>)
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <main+0x147c>)
 8004d3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d3e:	4b33      	ldr	r3, [pc, #204]	@ (8004e0c <main+0x147c>)
 8004d40:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d44:	eeb0 1a66 	vmov.f32	s2, s13
 8004d48:	eef0 0a47 	vmov.f32	s1, s14
 8004d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d50:	2105      	movs	r1, #5
 8004d52:	482a      	ldr	r0, [pc, #168]	@ (8004dfc <main+0x146c>)
 8004d54:	f000 fe92 	bl	8005a7c <Encode_Msg_PID_Gain>
							HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004d58:	230a      	movs	r3, #10
 8004d5a:	2214      	movs	r2, #20
 8004d5c:	4927      	ldr	r1, [pc, #156]	@ (8004dfc <main+0x146c>)
 8004d5e:	4828      	ldr	r0, [pc, #160]	@ (8004e00 <main+0x1470>)
 8004d60:	f005 f8ee 	bl	8009f40 <HAL_UART_Transmit>
							break;
 8004d64:	bf00      	nop
						}
						break;
 8004d66:	bf00      	nop

					}
				}
			}
		}
		if(tim7_20ms_flag == 1 && tim7_100ms_flag != 1)
 8004d68:	4b29      	ldr	r3, [pc, #164]	@ (8004e10 <main+0x1480>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d10f      	bne.n	8004d90 <main+0x1400>
 8004d70:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <main+0x1484>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d00b      	beq.n	8004d90 <main+0x1400>
		{
			tim7_20ms_flag = 0;
 8004d78:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <main+0x1480>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]

			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 8004d7e:	481f      	ldr	r0, [pc, #124]	@ (8004dfc <main+0x146c>)
 8004d80:	f000 fc58 	bl	8005634 <Encode_Msg_AHRS>

			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8004d84:	2214      	movs	r2, #20
 8004d86:	491d      	ldr	r1, [pc, #116]	@ (8004dfc <main+0x146c>)
 8004d88:	481d      	ldr	r0, [pc, #116]	@ (8004e00 <main+0x1470>)
 8004d8a:	f005 f964 	bl	800a056 <HAL_UART_Transmit_IT>
 8004d8e:	e018      	b.n	8004dc2 <main+0x1432>
		}

		else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 8004d90:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <main+0x1480>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d114      	bne.n	8004dc2 <main+0x1432>
 8004d98:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <main+0x1484>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d110      	bne.n	8004dc2 <main+0x1432>
		{
			tim7_20ms_flag = 0;
 8004da0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <main+0x1480>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 0;
 8004da6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e14 <main+0x1484>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]

			Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 8004dac:	4813      	ldr	r0, [pc, #76]	@ (8004dfc <main+0x146c>)
 8004dae:	f000 fc41 	bl	8005634 <Encode_Msg_AHRS>
			Encode_Msg_GPS(&telemetry_tx_buf[20]);
 8004db2:	4819      	ldr	r0, [pc, #100]	@ (8004e18 <main+0x1488>)
 8004db4:	f000 fdba 	bl	800592c <Encode_Msg_GPS>

			HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 8004db8:	2228      	movs	r2, #40	@ 0x28
 8004dba:	4910      	ldr	r1, [pc, #64]	@ (8004dfc <main+0x146c>)
 8004dbc:	4810      	ldr	r0, [pc, #64]	@ (8004e00 <main+0x1470>)
 8004dbe:	f005 f94a 	bl	800a056 <HAL_UART_Transmit_IT>
		}


		batVolt = adcVal * 0.003619f;
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dcc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004e1c <main+0x148c>
 8004dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd4:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <main+0x1490>)
 8004dd6:	edc3 7a00 	vstr	s15, [r3]
		//printf("%d\t%.2f\n", adcVal, batVolt);
		if(batVolt < 10.0f)
 8004dda:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <main+0x1490>)
 8004ddc:	edd3 7a00 	vldr	s15, [r3]
 8004de0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dec:	d51c      	bpl.n	8004e28 <main+0x1498>
		{
			low_bat_flag = 1;
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <main+0x1494>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e01b      	b.n	8004e2e <main+0x149e>
 8004df6:	bf00      	nop
 8004df8:	20000310 	.word	0x20000310
 8004dfc:	20000568 	.word	0x20000568
 8004e00:	200005e8 	.word	0x200005e8
 8004e04:	20000380 	.word	0x20000380
 8004e08:	200003f0 	.word	0x200003f0
 8004e0c:	20000428 	.word	0x20000428
 8004e10:	200005db 	.word	0x200005db
 8004e14:	200005dc 	.word	0x200005dc
 8004e18:	2000057c 	.word	0x2000057c
 8004e1c:	3b6d2cbf 	.word	0x3b6d2cbf
 8004e20:	200005a8 	.word	0x200005a8
 8004e24:	200005ad 	.word	0x200005ad
		}
		else
		{
			low_bat_flag = 0;
 8004e28:	4b91      	ldr	r3, [pc, #580]	@ (8005070 <main+0x16e0>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
		}

		if(BNO080_dataAvailable() == 1)
 8004e2e:	f7fc fbff 	bl	8001630 <BNO080_dataAvailable>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d134      	bne.n	8004ea2 <main+0x1512>
		{
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8004e38:	2101      	movs	r1, #1
 8004e3a:	488e      	ldr	r0, [pc, #568]	@ (8005074 <main+0x16e4>)
 8004e3c:	f7fe fd69 	bl	8003912 <LL_GPIO_TogglePin>

			q[0] = BNO080_getQuatI();
 8004e40:	f7fc fdb0 	bl	80019a4 <BNO080_getQuatI>
 8004e44:	eef0 7a40 	vmov.f32	s15, s0
 8004e48:	edc7 7a02 	vstr	s15, [r7, #8]
			q[1] = BNO080_getQuatJ();
 8004e4c:	f7fc fdc0 	bl	80019d0 <BNO080_getQuatJ>
 8004e50:	eef0 7a40 	vmov.f32	s15, s0
 8004e54:	edc7 7a03 	vstr	s15, [r7, #12]
			q[2] = BNO080_getQuatK();
 8004e58:	f7fc fdd0 	bl	80019fc <BNO080_getQuatK>
 8004e5c:	eef0 7a40 	vmov.f32	s15, s0
 8004e60:	edc7 7a04 	vstr	s15, [r7, #16]
			q[3] = BNO080_getQuatReal();
 8004e64:	f7fc fde0 	bl	8001a28 <BNO080_getQuatReal>
 8004e68:	eef0 7a40 	vmov.f32	s15, s0
 8004e6c:	edc7 7a05 	vstr	s15, [r7, #20]
			quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8004e70:	f7fc fdf0 	bl	8001a54 <BNO080_getQuatRadianAccuracy>
 8004e74:	ed87 0a06 	vstr	s0, [r7, #24]

			Quaternion_Update(&q[0]);
 8004e78:	f107 0308 	add.w	r3, r7, #8
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe f911 	bl	80030a4 <Quaternion_Update>

			BNO080_Roll = -BNO080_Roll;
 8004e82:	4b7d      	ldr	r3, [pc, #500]	@ (8005078 <main+0x16e8>)
 8004e84:	edd3 7a00 	vldr	s15, [r3]
 8004e88:	eef1 7a67 	vneg.f32	s15, s15
 8004e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8005078 <main+0x16e8>)
 8004e8e:	edc3 7a00 	vstr	s15, [r3]
			BNO080_Pitch = -BNO080_Pitch;
 8004e92:	4b7a      	ldr	r3, [pc, #488]	@ (800507c <main+0x16ec>)
 8004e94:	edd3 7a00 	vldr	s15, [r3]
 8004e98:	eef1 7a67 	vneg.f32	s15, s15
 8004e9c:	4b77      	ldr	r3, [pc, #476]	@ (800507c <main+0x16ec>)
 8004e9e:	edc3 7a00 	vstr	s15, [r3]

			//printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
			//printf("%.2f\n", BNO080_Yaw);
		}

		if(ICM20602_DataReady() == 1)
 8004ea2:	f7fd fbb9 	bl	8002618 <ICM20602_DataReady>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d14c      	bne.n	8004f46 <main+0x15b6>
		{
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8004eac:	2102      	movs	r1, #2
 8004eae:	4871      	ldr	r0, [pc, #452]	@ (8005074 <main+0x16e4>)
 8004eb0:	f7fe fd2f 	bl	8003912 <LL_GPIO_TogglePin>

			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8004eb4:	4872      	ldr	r0, [pc, #456]	@ (8005080 <main+0x16f0>)
 8004eb6:	f7fd fb83 	bl	80025c0 <ICM20602_Get3AxisGyroRawData>

			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8004eba:	4b72      	ldr	r3, [pc, #456]	@ (8005084 <main+0x16f4>)
 8004ebc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ec0:	ee07 3a90 	vmov	s15, r3
 8004ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ec8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8005088 <main+0x16f8>
 8004ecc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ed0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800508c <main+0x16fc>
 8004ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8005084 <main+0x16f4>)
 8004eda:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8004ede:	4b69      	ldr	r3, [pc, #420]	@ (8005084 <main+0x16f4>)
 8004ee0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eec:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8005088 <main+0x16f8>
 8004ef0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ef4:	eddf 6a65 	vldr	s13, [pc, #404]	@ 800508c <main+0x16fc>
 8004ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004efc:	4b61      	ldr	r3, [pc, #388]	@ (8005084 <main+0x16f4>)
 8004efe:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8004f02:	4b60      	ldr	r3, [pc, #384]	@ (8005084 <main+0x16f4>)
 8004f04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004f08:	ee07 3a90 	vmov	s15, r3
 8004f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f10:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8005088 <main+0x16f8>
 8004f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f18:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 800508c <main+0x16fc>
 8004f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f20:	4b58      	ldr	r3, [pc, #352]	@ (8005084 <main+0x16f4>)
 8004f22:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			ICM20602.gyro_x = -ICM20602.gyro_x;
 8004f26:	4b57      	ldr	r3, [pc, #348]	@ (8005084 <main+0x16f4>)
 8004f28:	edd3 7a07 	vldr	s15, [r3, #28]
 8004f2c:	eef1 7a67 	vneg.f32	s15, s15
 8004f30:	4b54      	ldr	r3, [pc, #336]	@ (8005084 <main+0x16f4>)
 8004f32:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_z = -ICM20602.gyro_z;
 8004f36:	4b53      	ldr	r3, [pc, #332]	@ (8005084 <main+0x16f4>)
 8004f38:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004f3c:	eef1 7a67 	vneg.f32	s15, s15
 8004f40:	4b50      	ldr	r3, [pc, #320]	@ (8005084 <main+0x16f4>)
 8004f42:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			//printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
			//printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
		}

		if(LPS22HH_DataReady() == 1)
 8004f46:	f7fd fdd9 	bl	8002afc <LPS22HH_DataReady>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d138      	bne.n	8004fc2 <main+0x1632>
		{
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8004f50:	484f      	ldr	r0, [pc, #316]	@ (8005090 <main+0x1700>)
 8004f52:	f7fd fddf 	bl	8002b14 <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8004f56:	484f      	ldr	r0, [pc, #316]	@ (8005094 <main+0x1704>)
 8004f58:	f7fd fde9 	bl	8002b2e <LPS22HH_GetTemperature>

			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 8004f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8005090 <main+0x1700>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f68:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8005098 <main+0x1708>
 8004f6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004f70:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <main+0x1700>)
 8004f72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f7e:	ed9f 6a47 	vldr	s12, [pc, #284]	@ 800509c <main+0x170c>
 8004f82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004f86:	eef0 0a66 	vmov.f32	s1, s13
 8004f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f8e:	f7fd fddb 	bl	8002b48 <getAltitude2>
 8004f92:	eef0 7a40 	vmov.f32	s15, s0
 8004f96:	4b3e      	ldr	r3, [pc, #248]	@ (8005090 <main+0x1700>)
 8004f98:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f
			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 8004f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005090 <main+0x1700>)
 8004f9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fa2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80050a0 <main+0x1710>
 8004fa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004faa:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <main+0x1700>)
 8004fac:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fb0:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80050a4 <main+0x1714>
 8004fb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fbc:	4b34      	ldr	r3, [pc, #208]	@ (8005090 <main+0x1700>)
 8004fbe:	edc3 7a03 	vstr	s15, [r3, #12]

			//printf("%d,%d\n", (int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
		}

		if(ibus_rx_cplt_flag == 1)
 8004fc2:	4b39      	ldr	r3, [pc, #228]	@ (80050a8 <main+0x1718>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d123      	bne.n	8005012 <main+0x1682>
		{
			ibus_rx_cplt_flag = 0;
 8004fca:	4b37      	ldr	r3, [pc, #220]	@ (80050a8 <main+0x1718>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8004fd0:	2120      	movs	r1, #32
 8004fd2:	4836      	ldr	r0, [pc, #216]	@ (80050ac <main+0x171c>)
 8004fd4:	f7fc ffde 	bl	8001f94 <iBus_Check_CHKSUM>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d119      	bne.n	8005012 <main+0x1682>
			{
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8004fde:	2104      	movs	r1, #4
 8004fe0:	4824      	ldr	r0, [pc, #144]	@ (8005074 <main+0x16e4>)
 8004fe2:	f7fe fc96 	bl	8003912 <LL_GPIO_TogglePin>

				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004fe6:	4932      	ldr	r1, [pc, #200]	@ (80050b0 <main+0x1720>)
 8004fe8:	4830      	ldr	r0, [pc, #192]	@ (80050ac <main+0x171c>)
 8004fea:	f7fd f808 	bl	8001ffe <iBus_Parsing>
				iBus_rx_cnt++;
 8004fee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

				if(iBus_isActiveFailsafe(&iBus) == 1)
 8004ff8:	482d      	ldr	r0, [pc, #180]	@ (80050b0 <main+0x1720>)
 8004ffa:	f7fd f878 	bl	80020ee <iBus_isActiveFailsafe>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b01      	cmp	r3, #1
 8005002:	d103      	bne.n	800500c <main+0x167c>
				{
					failsafe_flag = 1;
 8005004:	4b2b      	ldr	r3, [pc, #172]	@ (80050b4 <main+0x1724>)
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e002      	b.n	8005012 <main+0x1682>
				}
				else
				{
					failsafe_flag = 0;
 800500c:	4b29      	ldr	r3, [pc, #164]	@ (80050b4 <main+0x1724>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
				//					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
				//			  HAL_Delay(100);
			}
		}

		if(tim7_1000ms_flag == 1)
 8005012:	4b29      	ldr	r3, [pc, #164]	@ (80050b8 <main+0x1728>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10c      	bne.n	8005034 <main+0x16a4>
		{
			tim7_1000ms_flag = 0;
 800501a:	4b27      	ldr	r3, [pc, #156]	@ (80050b8 <main+0x1728>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
			if(iBus_rx_cnt == 0)
 8005020:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <main+0x169e>
			{
				failsafe_flag = 2;
 8005028:	4b22      	ldr	r3, [pc, #136]	@ (80050b4 <main+0x1724>)
 800502a:	2202      	movs	r2, #2
 800502c:	701a      	strb	r2, [r3, #0]
			}
			iBus_rx_cnt = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}

		if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 8005034:	4b1f      	ldr	r3, [pc, #124]	@ (80050b4 <main+0x1724>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d00c      	beq.n	8005056 <main+0x16c6>
 800503c:	4b1d      	ldr	r3, [pc, #116]	@ (80050b4 <main+0x1724>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d008      	beq.n	8005056 <main+0x16c6>
 8005044:	4b0a      	ldr	r3, [pc, #40]	@ (8005070 <main+0x16e0>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d004      	beq.n	8005056 <main+0x16c6>
 800504c:	4b18      	ldr	r3, [pc, #96]	@ (80050b0 <main+0x1720>)
 800504e:	899b      	ldrh	r3, [r3, #12]
 8005050:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005054:	d105      	bne.n	8005062 <main+0x16d2>
		{
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800505a:	4818      	ldr	r0, [pc, #96]	@ (80050bc <main+0x172c>)
 800505c:	f7fe fbc4 	bl	80037e8 <LL_TIM_CC_EnableChannel>
 8005060:	e004      	b.n	800506c <main+0x16dc>
		}
		else
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005066:	4815      	ldr	r0, [pc, #84]	@ (80050bc <main+0x172c>)
 8005068:	f7fe fbcf 	bl	800380a <LL_TIM_CC_DisableChannel>
		if(tim7_1ms_flag == 1)
 800506c:	f7ff b86c 	b.w	8004148 <main+0x7b8>
 8005070:	200005ad 	.word	0x200005ad
 8005074:	40020800 	.word	0x40020800
 8005078:	20000460 	.word	0x20000460
 800507c:	20000464 	.word	0x20000464
 8005080:	200002e0 	.word	0x200002e0
 8005084:	200002d8 	.word	0x200002d8
 8005088:	44fa0000 	.word	0x44fa0000
 800508c:	47000000 	.word	0x47000000
 8005090:	20000300 	.word	0x20000300
 8005094:	20000304 	.word	0x20000304
 8005098:	45800000 	.word	0x45800000
 800509c:	42c80000 	.word	0x42c80000
 80050a0:	3f666666 	.word	0x3f666666
 80050a4:	3dccccd0 	.word	0x3dccccd0
 80050a8:	200005d8 	.word	0x200005d8
 80050ac:	200005b8 	.word	0x200005b8
 80050b0:	200002c0 	.word	0x200002c0
 80050b4:	200005ac 	.word	0x200005ac
 80050b8:	200005dd 	.word	0x200005dd
 80050bc:	40000400 	.word	0x40000400

080050c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b094      	sub	sp, #80	@ 0x50
 80050c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050c6:	f107 0320 	add.w	r3, r7, #32
 80050ca:	2230      	movs	r2, #48	@ 0x30
 80050cc:	2100      	movs	r1, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	f007 ff2a 	bl	800cf28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	2300      	movs	r3, #0
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	4b28      	ldr	r3, [pc, #160]	@ (800518c <SystemClock_Config+0xcc>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	4a27      	ldr	r2, [pc, #156]	@ (800518c <SystemClock_Config+0xcc>)
 80050ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80050f4:	4b25      	ldr	r3, [pc, #148]	@ (800518c <SystemClock_Config+0xcc>)
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005100:	2300      	movs	r3, #0
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <SystemClock_Config+0xd0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a21      	ldr	r2, [pc, #132]	@ (8005190 <SystemClock_Config+0xd0>)
 800510a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	4b1f      	ldr	r3, [pc, #124]	@ (8005190 <SystemClock_Config+0xd0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800511c:	2301      	movs	r3, #1
 800511e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005120:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005126:	2302      	movs	r3, #2
 8005128:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800512a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800512e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8005130:	2304      	movs	r3, #4
 8005132:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8005134:	23a8      	movs	r3, #168	@ 0xa8
 8005136:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005138:	2302      	movs	r3, #2
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800513c:	2304      	movs	r3, #4
 800513e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005140:	f107 0320 	add.w	r3, r7, #32
 8005144:	4618      	mov	r0, r3
 8005146:	f004 fa13 	bl	8009570 <HAL_RCC_OscConfig>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8005150:	f000 fce7 	bl	8005b22 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005154:	230f      	movs	r3, #15
 8005156:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005158:	2302      	movs	r3, #2
 800515a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005160:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005164:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800516a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	2105      	movs	r1, #5
 8005172:	4618      	mov	r0, r3
 8005174:	f004 fc74 	bl	8009a60 <HAL_RCC_ClockConfig>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800517e:	f000 fcd0 	bl	8005b22 <Error_Handler>
	}
}
 8005182:	bf00      	nop
 8005184:	3750      	adds	r7, #80	@ 0x50
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	40007000 	.word	0x40007000

08005194 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8005198:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <Is_iBus_Throttle_Min+0x40>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d115      	bne.n	80051cc <Is_iBus_Throttle_Min+0x38>
	{
		ibus_rx_cplt_flag = 0;
 80051a0:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <Is_iBus_Throttle_Min+0x40>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 80051a6:	2120      	movs	r1, #32
 80051a8:	480b      	ldr	r0, [pc, #44]	@ (80051d8 <Is_iBus_Throttle_Min+0x44>)
 80051aa:	f7fc fef3 	bl	8001f94 <iBus_Check_CHKSUM>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10b      	bne.n	80051cc <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80051b4:	4909      	ldr	r1, [pc, #36]	@ (80051dc <Is_iBus_Throttle_Min+0x48>)
 80051b6:	4808      	ldr	r0, [pc, #32]	@ (80051d8 <Is_iBus_Throttle_Min+0x44>)
 80051b8:	f7fc ff21 	bl	8001ffe <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <Is_iBus_Throttle_Min+0x48>)
 80051be:	889b      	ldrh	r3, [r3, #4]
 80051c0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d801      	bhi.n	80051cc <Is_iBus_Throttle_Min+0x38>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <Is_iBus_Throttle_Min+0x3a>
		}
	}

	return 0;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200005d8 	.word	0x200005d8
 80051d8:	200005b8 	.word	0x200005b8
 80051dc:	200002c0 	.word	0x200002c0

080051e0 <ESC_Calibration>:

void ESC_Calibration(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 21000;
 80051e4:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <ESC_Calibration+0x58>)
 80051e6:	f245 2208 	movw	r2, #21000	@ 0x5208
 80051ea:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 21000;
 80051ec:	4b12      	ldr	r3, [pc, #72]	@ (8005238 <ESC_Calibration+0x58>)
 80051ee:	f245 2208 	movw	r2, #21000	@ 0x5208
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 21000;
 80051f4:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <ESC_Calibration+0x58>)
 80051f6:	f245 2208 	movw	r2, #21000	@ 0x5208
 80051fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 21000;
 80051fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <ESC_Calibration+0x58>)
 80051fe:	f245 2208 	movw	r2, #21000	@ 0x5208
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(7000);
 8005204:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8005208:	f001 fea8 	bl	8006f5c <HAL_Delay>
	TIM5->CCR1 = 10500;
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <ESC_Calibration+0x58>)
 800520e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005212:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 10500;
 8005214:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <ESC_Calibration+0x58>)
 8005216:	f642 1204 	movw	r2, #10500	@ 0x2904
 800521a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 10500;
 800521c:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <ESC_Calibration+0x58>)
 800521e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005222:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 10500;
 8005224:	4b04      	ldr	r3, [pc, #16]	@ (8005238 <ESC_Calibration+0x58>)
 8005226:	f642 1204 	movw	r2, #10500	@ 0x2904
 800522a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(8000);
 800522c:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8005230:	f001 fe94 	bl	8006f5c <HAL_Delay>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40000c00 	.word	0x40000c00

0800523c <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <Is_iBus_Received+0x34>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d10f      	bne.n	8005268 <Is_iBus_Received+0x2c>
	{
		ibus_rx_cplt_flag = 0;
 8005248:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <Is_iBus_Received+0x34>)
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800524e:	2120      	movs	r1, #32
 8005250:	4808      	ldr	r0, [pc, #32]	@ (8005274 <Is_iBus_Received+0x38>)
 8005252:	f7fc fe9f 	bl	8001f94 <iBus_Check_CHKSUM>
 8005256:	4603      	mov	r3, r0
 8005258:	2b01      	cmp	r3, #1
 800525a:	d105      	bne.n	8005268 <Is_iBus_Received+0x2c>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800525c:	4906      	ldr	r1, [pc, #24]	@ (8005278 <Is_iBus_Received+0x3c>)
 800525e:	4805      	ldr	r0, [pc, #20]	@ (8005274 <Is_iBus_Received+0x38>)
 8005260:	f7fc fecd 	bl	8001ffe <iBus_Parsing>
			return 1;
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <Is_iBus_Received+0x2e>
		}
	}

	return 0;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200005d8 	.word	0x200005d8
 8005274:	200005b8 	.word	0x200005b8
 8005278:	200002c0 	.word	0x200002c0

0800527c <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 800527c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005280:	b090      	sub	sp, #64	@ 0x40
 8005282:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8005284:	f7fc f93e 	bl	8001504 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8005288:	f7fc fc99 	bl	8001bbe <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 800528c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8005290:	f7fc fc77 	bl	8001b82 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8005294:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8005298:	f7fc fc82 	bl	8001ba0 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 800529c:	489d      	ldr	r0, [pc, #628]	@ (8005514 <BNO080_Calibration+0x298>)
 800529e:	f007 fd63 	bl	800cd68 <puts>
	printf("Output in form x, y, z, in uTesla\n\n");
 80052a2:	489d      	ldr	r0, [pc, #628]	@ (8005518 <BNO080_Calibration+0x29c>)
 80052a4:	f007 fd60 	bl	800cd68 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 80052a8:	e0b8      	b.n	800541c <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 80052aa:	f7fc f9c1 	bl	8001630 <BNO080_dataAvailable>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	f040 80ae 	bne.w	8005412 <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 80052b6:	f7fc fbef 	bl	8001a98 <BNO080_getMagX>
 80052ba:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 80052be:	f7fc fc01 	bl	8001ac4 <BNO080_getMagY>
 80052c2:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 80052c6:	f7fc fc13 	bl	8001af0 <BNO080_getMagZ>
 80052ca:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 80052ce:	f7fc fc25 	bl	8001b1c <BNO080_getMagAccuracy>
 80052d2:	4603      	mov	r3, r0
 80052d4:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 80052d6:	f7fc fb65 	bl	80019a4 <BNO080_getQuatI>
 80052da:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 80052de:	f7fc fb77 	bl	80019d0 <BNO080_getQuatJ>
 80052e2:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 80052e6:	f7fc fb89 	bl	80019fc <BNO080_getQuatK>
 80052ea:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 80052ee:	f7fc fb9b 	bl	8001a28 <BNO080_getQuatReal>
 80052f2:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 80052f6:	f7fc fbc3 	bl	8001a80 <BNO080_getQuatAccuracy>
 80052fa:	4603      	mov	r3, r0
 80052fc:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 80052fe:	6a38      	ldr	r0, [r7, #32]
 8005300:	f7fb f922 	bl	8000548 <__aeabi_f2d>
 8005304:	4680      	mov	r8, r0
 8005306:	4689      	mov	r9, r1
 8005308:	69f8      	ldr	r0, [r7, #28]
 800530a:	f7fb f91d 	bl	8000548 <__aeabi_f2d>
 800530e:	4604      	mov	r4, r0
 8005310:	460d      	mov	r5, r1
 8005312:	69b8      	ldr	r0, [r7, #24]
 8005314:	f7fb f918 	bl	8000548 <__aeabi_f2d>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005320:	e9cd 4500 	strd	r4, r5, [sp]
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	487c      	ldr	r0, [pc, #496]	@ (800551c <BNO080_Calibration+0x2a0>)
 800532a:	f007 fcb5 	bl	800cc98 <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d103      	bne.n	800533c <BNO080_Calibration+0xc0>
 8005334:	487a      	ldr	r0, [pc, #488]	@ (8005520 <BNO080_Calibration+0x2a4>)
 8005336:	f007 fcaf 	bl	800cc98 <iprintf>
 800533a:	e013      	b.n	8005364 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d103      	bne.n	800534a <BNO080_Calibration+0xce>
 8005342:	4878      	ldr	r0, [pc, #480]	@ (8005524 <BNO080_Calibration+0x2a8>)
 8005344:	f007 fca8 	bl	800cc98 <iprintf>
 8005348:	e00c      	b.n	8005364 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d103      	bne.n	8005358 <BNO080_Calibration+0xdc>
 8005350:	4875      	ldr	r0, [pc, #468]	@ (8005528 <BNO080_Calibration+0x2ac>)
 8005352:	f007 fca1 	bl	800cc98 <iprintf>
 8005356:	e005      	b.n	8005364 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d102      	bne.n	8005364 <BNO080_Calibration+0xe8>
 800535e:	4873      	ldr	r0, [pc, #460]	@ (800552c <BNO080_Calibration+0x2b0>)
 8005360:	f007 fc9a 	bl	800cc98 <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 8005364:	6938      	ldr	r0, [r7, #16]
 8005366:	f7fb f8ef 	bl	8000548 <__aeabi_f2d>
 800536a:	4682      	mov	sl, r0
 800536c:	468b      	mov	fp, r1
 800536e:	6938      	ldr	r0, [r7, #16]
 8005370:	f7fb f8ea 	bl	8000548 <__aeabi_f2d>
 8005374:	4604      	mov	r4, r0
 8005376:	460d      	mov	r5, r1
 8005378:	6938      	ldr	r0, [r7, #16]
 800537a:	f7fb f8e5 	bl	8000548 <__aeabi_f2d>
 800537e:	4680      	mov	r8, r0
 8005380:	4689      	mov	r9, r1
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fb f8e0 	bl	8000548 <__aeabi_f2d>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005390:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005394:	e9cd 4500 	strd	r4, r5, [sp]
 8005398:	4652      	mov	r2, sl
 800539a:	465b      	mov	r3, fp
 800539c:	4864      	ldr	r0, [pc, #400]	@ (8005530 <BNO080_Calibration+0x2b4>)
 800539e:	f007 fc7b 	bl	800cc98 <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d103      	bne.n	80053b0 <BNO080_Calibration+0x134>
 80053a8:	4862      	ldr	r0, [pc, #392]	@ (8005534 <BNO080_Calibration+0x2b8>)
 80053aa:	f007 fcdd 	bl	800cd68 <puts>
 80053ae:	e013      	b.n	80053d8 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d103      	bne.n	80053be <BNO080_Calibration+0x142>
 80053b6:	4860      	ldr	r0, [pc, #384]	@ (8005538 <BNO080_Calibration+0x2bc>)
 80053b8:	f007 fcd6 	bl	800cd68 <puts>
 80053bc:	e00c      	b.n	80053d8 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d103      	bne.n	80053cc <BNO080_Calibration+0x150>
 80053c4:	485d      	ldr	r0, [pc, #372]	@ (800553c <BNO080_Calibration+0x2c0>)
 80053c6:	f007 fccf 	bl	800cd68 <puts>
 80053ca:	e005      	b.n	80053d8 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d102      	bne.n	80053d8 <BNO080_Calibration+0x15c>
 80053d2:	485b      	ldr	r0, [pc, #364]	@ (8005540 <BNO080_Calibration+0x2c4>)
 80053d4:	f007 fcc8 	bl	800cd68 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d110      	bne.n	8005400 <BNO080_Calibration+0x184>
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d10d      	bne.n	8005400 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 80053e4:	2107      	movs	r1, #7
 80053e6:	4857      	ldr	r0, [pc, #348]	@ (8005544 <BNO080_Calibration+0x2c8>)
 80053e8:	f7fe fa76 	bl	80038d8 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 80053ec:	4b56      	ldr	r3, [pc, #344]	@ (8005548 <BNO080_Calibration+0x2cc>)
 80053ee:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80053f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053f8:	4853      	ldr	r0, [pc, #332]	@ (8005548 <BNO080_Calibration+0x2cc>)
 80053fa:	f7fe f9f5 	bl	80037e8 <LL_TIM_CC_EnableChannel>
 80053fe:	e008      	b.n	8005412 <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005400:	2107      	movs	r1, #7
 8005402:	4850      	ldr	r0, [pc, #320]	@ (8005544 <BNO080_Calibration+0x2c8>)
 8005404:	f7fe fa76 	bl	80038f4 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800540c:	484e      	ldr	r0, [pc, #312]	@ (8005548 <BNO080_Calibration+0x2cc>)
 800540e:	f7fe f9fc 	bl	800380a <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 8005412:	f7ff ff13 	bl	800523c <Is_iBus_Received>
		HAL_Delay(100);
 8005416:	2064      	movs	r0, #100	@ 0x64
 8005418:	f001 fda0 	bl	8006f5c <HAL_Delay>
	while(iBus.SwC == 1500)
 800541c:	4b4b      	ldr	r3, [pc, #300]	@ (800554c <BNO080_Calibration+0x2d0>)
 800541e:	899b      	ldrh	r3, [r3, #12]
 8005420:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005424:	4293      	cmp	r3, r2
 8005426:	f43f af40 	beq.w	80052aa <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800542a:	2107      	movs	r1, #7
 800542c:	4845      	ldr	r0, [pc, #276]	@ (8005544 <BNO080_Calibration+0x2c8>)
 800542e:	f7fe fa61 	bl	80038f4 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005432:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005436:	4844      	ldr	r0, [pc, #272]	@ (8005548 <BNO080_Calibration+0x2cc>)
 8005438:	f7fe f9e7 	bl	800380a <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 800543c:	f7fc fcac 	bl	8001d98 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8005440:	f7fc fc8e 	bl	8001d60 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8005444:	2364      	movs	r3, #100	@ 0x64
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
	while(1)
	{
		if(--counter == 0) break;
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	3b01      	subs	r3, #1
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02f      	beq.n	80054b4 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 8005454:	f7fc f8ec 	bl	8001630 <BNO080_dataAvailable>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d026      	beq.n	80054ac <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 800545e:	f7fc fbb5 	bl	8001bcc <BNO080_calibrationComplete>
 8005462:	4603      	mov	r3, r0
 8005464:	2b01      	cmp	r3, #1
 8005466:	d121      	bne.n	80054ac <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 8005468:	4839      	ldr	r0, [pc, #228]	@ (8005550 <BNO080_Calibration+0x2d4>)
 800546a:	f007 fc7d 	bl	800cd68 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800546e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005472:	4835      	ldr	r0, [pc, #212]	@ (8005548 <BNO080_Calibration+0x2cc>)
 8005474:	f7fe f9b8 	bl	80037e8 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 8005478:	4b33      	ldr	r3, [pc, #204]	@ (8005548 <BNO080_Calibration+0x2cc>)
 800547a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800547e:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 8005480:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005484:	f001 fd6a 	bl	8006f5c <HAL_Delay>
				TIM3->PSC = 1500;
 8005488:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <BNO080_Calibration+0x2cc>)
 800548a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 8005490:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005494:	f001 fd62 	bl	8006f5c <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005498:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800549c:	482a      	ldr	r0, [pc, #168]	@ (8005548 <BNO080_Calibration+0x2cc>)
 800549e:	f7fe f9b4 	bl	800380a <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 80054a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054a6:	f001 fd59 	bl	8006f5c <HAL_Delay>
				break;
 80054aa:	e004      	b.n	80054b6 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 80054ac:	200a      	movs	r0, #10
 80054ae:	f001 fd55 	bl	8006f5c <HAL_Delay>
		if(--counter == 0) break;
 80054b2:	e7c9      	b.n	8005448 <BNO080_Calibration+0x1cc>
 80054b4:	bf00      	nop
	}
	if(counter == 0)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d120      	bne.n	80054fe <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 80054bc:	4825      	ldr	r0, [pc, #148]	@ (8005554 <BNO080_Calibration+0x2d8>)
 80054be:	f007 fc53 	bl	800cd68 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80054c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054c6:	4820      	ldr	r0, [pc, #128]	@ (8005548 <BNO080_Calibration+0x2cc>)
 80054c8:	f7fe f98e 	bl	80037e8 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 80054cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <BNO080_Calibration+0x2cc>)
 80054ce:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 80054d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80054d8:	f001 fd40 	bl	8006f5c <HAL_Delay>
		TIM3->PSC = 2000;
 80054dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <BNO080_Calibration+0x2cc>)
 80054de:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80054e2:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 80054e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80054e8:	f001 fd38 	bl	8006f5c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80054ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054f0:	4815      	ldr	r0, [pc, #84]	@ (8005548 <BNO080_Calibration+0x2cc>)
 80054f2:	f7fe f98a 	bl	800380a <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 80054f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80054fa:	f001 fd2f 	bl	8006f5c <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 80054fe:	f7fc f801 	bl	8001504 <BNO080_Initialization>
	//BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
	BNO080_enableGameRotationVector(2500);
 8005502:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8005506:	f7fc fb3c 	bl	8001b82 <BNO080_enableGameRotationVector>
}
 800550a:	bf00      	nop
 800550c:	3728      	adds	r7, #40	@ 0x28
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005514:	0800fb80 	.word	0x0800fb80
 8005518:	0800fbcc 	.word	0x0800fbcc
 800551c:	0800fbf0 	.word	0x0800fbf0
 8005520:	0800fbfc 	.word	0x0800fbfc
 8005524:	0800fc08 	.word	0x0800fc08
 8005528:	0800fc10 	.word	0x0800fc10
 800552c:	0800fc18 	.word	0x0800fc18
 8005530:	0800fc20 	.word	0x0800fc20
 8005534:	0800fc30 	.word	0x0800fc30
 8005538:	0800fc3c 	.word	0x0800fc3c
 800553c:	0800fc40 	.word	0x0800fc40
 8005540:	0800fc48 	.word	0x0800fc48
 8005544:	40020800 	.word	0x40020800
 8005548:	40000400 	.word	0x40000400
 800554c:	200002c0 	.word	0x200002c0
 8005550:	0800fc50 	.word	0x0800fc50
 8005554:	0800fc78 	.word	0x0800fc78

08005558 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2d      	ldr	r2, [pc, #180]	@ (800561c <HAL_UART_RxCpltCallback+0xc4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d154      	bne.n	8005614 <HAL_UART_RxCpltCallback+0xbc>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800556a:	2201      	movs	r2, #1
 800556c:	492c      	ldr	r1, [pc, #176]	@ (8005620 <HAL_UART_RxCpltCallback+0xc8>)
 800556e:	482d      	ldr	r0, [pc, #180]	@ (8005624 <HAL_UART_RxCpltCallback+0xcc>)
 8005570:	f004 fda7 	bl	800a0c2 <HAL_UART_Receive_IT>

		switch(cnt)
 8005574:	4b2c      	ldr	r3, [pc, #176]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b13      	cmp	r3, #19
 800557a:	d02e      	beq.n	80055da <HAL_UART_RxCpltCallback+0x82>
 800557c:	2b13      	cmp	r3, #19
 800557e:	dc3a      	bgt.n	80055f6 <HAL_UART_RxCpltCallback+0x9e>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_UART_RxCpltCallback+0x32>
 8005584:	2b01      	cmp	r3, #1
 8005586:	d012      	beq.n	80055ae <HAL_UART_RxCpltCallback+0x56>
 8005588:	e035      	b.n	80055f6 <HAL_UART_RxCpltCallback+0x9e>
		{
		case 0:
			if(uart1_rx_data == 0x47)
 800558a:	4b25      	ldr	r3, [pc, #148]	@ (8005620 <HAL_UART_RxCpltCallback+0xc8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b47      	cmp	r3, #71	@ 0x47
 8005590:	d13f      	bne.n	8005612 <HAL_UART_RxCpltCallback+0xba>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 8005592:	4b25      	ldr	r3, [pc, #148]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	4b21      	ldr	r3, [pc, #132]	@ (8005620 <HAL_UART_RxCpltCallback+0xc8>)
 800559a:	7819      	ldrb	r1, [r3, #0]
 800559c:	4b23      	ldr	r3, [pc, #140]	@ (800562c <HAL_UART_RxCpltCallback+0xd4>)
 800559e:	5499      	strb	r1, [r3, r2]
				cnt++;
 80055a0:	4b21      	ldr	r3, [pc, #132]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055aa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80055ac:	e031      	b.n	8005612 <HAL_UART_RxCpltCallback+0xba>
		case 1:
			if(uart1_rx_data == 0x53)
 80055ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005620 <HAL_UART_RxCpltCallback+0xc8>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b53      	cmp	r3, #83	@ 0x53
 80055b4:	d10d      	bne.n	80055d2 <HAL_UART_RxCpltCallback+0x7a>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 80055b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b18      	ldr	r3, [pc, #96]	@ (8005620 <HAL_UART_RxCpltCallback+0xc8>)
 80055be:	7819      	ldrb	r1, [r3, #0]
 80055c0:	4b1a      	ldr	r3, [pc, #104]	@ (800562c <HAL_UART_RxCpltCallback+0xd4>)
 80055c2:	5499      	strb	r1, [r3, r2]
				cnt++;
 80055c4:	4b18      	ldr	r3, [pc, #96]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	4b16      	ldr	r3, [pc, #88]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055ce:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 80055d0:	e020      	b.n	8005614 <HAL_UART_RxCpltCallback+0xbc>
				cnt = 0;
 80055d2:	4b15      	ldr	r3, [pc, #84]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
			break;
 80055d8:	e01c      	b.n	8005614 <HAL_UART_RxCpltCallback+0xbc>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 80055da:	4b13      	ldr	r3, [pc, #76]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005620 <HAL_UART_RxCpltCallback+0xc8>)
 80055e2:	7819      	ldrb	r1, [r3, #0]
 80055e4:	4b11      	ldr	r3, [pc, #68]	@ (800562c <HAL_UART_RxCpltCallback+0xd4>)
 80055e6:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 80055e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 80055ee:	4b10      	ldr	r3, [pc, #64]	@ (8005630 <HAL_UART_RxCpltCallback+0xd8>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
			break;
 80055f4:	e00e      	b.n	8005614 <HAL_UART_RxCpltCallback+0xbc>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 80055f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <HAL_UART_RxCpltCallback+0xc8>)
 80055fe:	7819      	ldrb	r1, [r3, #0]
 8005600:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <HAL_UART_RxCpltCallback+0xd4>)
 8005602:	5499      	strb	r1, [r3, r2]
			cnt++;
 8005604:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	b2da      	uxtb	r2, r3
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <HAL_UART_RxCpltCallback+0xd0>)
 800560e:	701a      	strb	r2, [r3, #0]
			break;
 8005610:	e000      	b.n	8005614 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8005612:	bf00      	nop
		}
	}
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40011000 	.word	0x40011000
 8005620:	200005d9 	.word	0x200005d9
 8005624:	200005e8 	.word	0x200005e8
 8005628:	200005ae 	.word	0x200005ae
 800562c:	20000590 	.word	0x20000590
 8005630:	200005a4 	.word	0x200005a4

08005634 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x46;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2246      	movs	r2, #70	@ 0x46
 8005640:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3301      	adds	r3, #1
 8005646:	2243      	movs	r2, #67	@ 0x43
 8005648:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x10;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3302      	adds	r3, #2
 800564e:	2210      	movs	r2, #16
 8005650:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 8005652:	4bae      	ldr	r3, [pc, #696]	@ (800590c <Encode_Msg_AHRS+0x2d8>)
 8005654:	edd3 7a00 	vldr	s15, [r3]
 8005658:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 800565c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005664:	ee17 3a90 	vmov	r3, s15
 8005668:	b21a      	sxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3303      	adds	r3, #3
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 8005672:	4ba6      	ldr	r3, [pc, #664]	@ (800590c <Encode_Msg_AHRS+0x2d8>)
 8005674:	edd3 7a00 	vldr	s15, [r3]
 8005678:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 800567c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005684:	ee17 3a90 	vmov	r3, s15
 8005688:	b21b      	sxth	r3, r3
 800568a:	121b      	asrs	r3, r3, #8
 800568c:	b21a      	sxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 8005696:	4b9f      	ldr	r3, [pc, #636]	@ (8005914 <Encode_Msg_AHRS+0x2e0>)
 8005698:	edd3 7a00 	vldr	s15, [r3]
 800569c:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 80056a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056a8:	ee17 3a90 	vmov	r3, s15
 80056ac:	b21a      	sxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3305      	adds	r3, #5
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 80056b6:	4b97      	ldr	r3, [pc, #604]	@ (8005914 <Encode_Msg_AHRS+0x2e0>)
 80056b8:	edd3 7a00 	vldr	s15, [r3]
 80056bc:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 80056c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056c8:	ee17 3a90 	vmov	r3, s15
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	121b      	asrs	r3, r3, #8
 80056d0:	b21a      	sxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3306      	adds	r3, #6
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]

	//	  telemetry_tx_buf[5] = (short)(ICM20602.gyro_x*100);
	//	  telemetry_tx_buf[6] = ((short)(ICM20602.gyro_x*100))>>8;

	telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 80056da:	4b8f      	ldr	r3, [pc, #572]	@ (8005918 <Encode_Msg_AHRS+0x2e4>)
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 80056e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ec:	ee17 3a90 	vmov	r3, s15
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3307      	adds	r3, #7
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 80056fa:	4b87      	ldr	r3, [pc, #540]	@ (8005918 <Encode_Msg_AHRS+0x2e4>)
 80056fc:	edd3 7a00 	vldr	s15, [r3]
 8005700:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 8005704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800570c:	ee17 3a90 	vmov	r3, s15
 8005710:	b29b      	uxth	r3, r3
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	b29a      	uxth	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3308      	adds	r3, #8
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 800571e:	4b7f      	ldr	r3, [pc, #508]	@ (800591c <Encode_Msg_AHRS+0x2e8>)
 8005720:	edd3 7a03 	vldr	s15, [r3, #12]
 8005724:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800572c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005730:	ee17 3a90 	vmov	r3, s15
 8005734:	b21a      	sxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3309      	adds	r3, #9
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 800573e:	4b77      	ldr	r3, [pc, #476]	@ (800591c <Encode_Msg_AHRS+0x2e8>)
 8005740:	edd3 7a03 	vldr	s15, [r3, #12]
 8005744:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800574c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005750:	ee17 3a90 	vmov	r3, s15
 8005754:	b21b      	sxth	r3, r3
 8005756:	121b      	asrs	r3, r3, #8
 8005758:	b21a      	sxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	330a      	adds	r3, #10
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 8005762:	4b6f      	ldr	r3, [pc, #444]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005772:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005924 <Encode_Msg_AHRS+0x2f0>
 8005776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800577a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 800577e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005786:	ee17 3a90 	vmov	r3, s15
 800578a:	b21a      	sxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	330b      	adds	r3, #11
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 8005794:	4b62      	ldr	r3, [pc, #392]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057a4:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8005924 <Encode_Msg_AHRS+0x2f0>
 80057a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ac:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 80057b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b8:	ee17 3a90 	vmov	r3, s15
 80057bc:	b21b      	sxth	r3, r3
 80057be:	121b      	asrs	r3, r3, #8
 80057c0:	b21a      	sxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	330c      	adds	r3, #12
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 80057ca:	4b55      	ldr	r3, [pc, #340]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 80057cc:	885b      	ldrh	r3, [r3, #2]
 80057ce:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057da:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8005924 <Encode_Msg_AHRS+0x2f0>
 80057de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057e2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 80057e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ee:	ee17 3a90 	vmov	r3, s15
 80057f2:	b21a      	sxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	330d      	adds	r3, #13
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 80057fc:	4b48      	ldr	r3, [pc, #288]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 80057fe:	885b      	ldrh	r3, [r3, #2]
 8005800:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005804:	ee07 3a90 	vmov	s15, r3
 8005808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800580c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8005924 <Encode_Msg_AHRS+0x2f0>
 8005810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005814:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 8005818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800581c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005820:	ee17 3a90 	vmov	r3, s15
 8005824:	b21b      	sxth	r3, r3
 8005826:	121b      	asrs	r3, r3, #8
 8005828:	b21a      	sxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	330e      	adds	r3, #14
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 8005832:	4b3b      	ldr	r3, [pc, #236]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 8005834:	88db      	ldrh	r3, [r3, #6]
 8005836:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005842:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8005928 <Encode_Msg_AHRS+0x2f4>
 8005846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800584a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 800584e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005856:	ee17 3a90 	vmov	r3, s15
 800585a:	b29a      	uxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	330f      	adds	r3, #15
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 8005864:	4b2e      	ldr	r3, [pc, #184]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 8005866:	88db      	ldrh	r3, [r3, #6]
 8005868:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800586c:	ee07 3a90 	vmov	s15, r3
 8005870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005874:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005928 <Encode_Msg_AHRS+0x2f4>
 8005878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800587c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005910 <Encode_Msg_AHRS+0x2dc>
 8005880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005888:	ee17 3a90 	vmov	r3, s15
 800588c:	b29b      	uxth	r3, r3
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b29a      	uxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3310      	adds	r3, #16
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[17] = (short)(iBus.LV*10);
 800589a:	4b21      	ldr	r3, [pc, #132]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 800589c:	889b      	ldrh	r3, [r3, #4]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3311      	adds	r3, #17
 80058a4:	4611      	mov	r1, r2
 80058a6:	0089      	lsls	r1, r1, #2
 80058a8:	440a      	add	r2, r1
 80058aa:	0052      	lsls	r2, r2, #1
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = ((short)(iBus.LV*10))>>8;
 80058b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005920 <Encode_Msg_AHRS+0x2ec>)
 80058b2:	889b      	ldrh	r3, [r3, #4]
 80058b4:	461a      	mov	r2, r3
 80058b6:	0092      	lsls	r2, r2, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	b21b      	sxth	r3, r3
 80058c0:	121b      	asrs	r3, r3, #8
 80058c2:	b21a      	sxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3312      	adds	r3, #18
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3313      	adds	r3, #19
 80058d0:	22ff      	movs	r2, #255	@ 0xff
 80058d2:	701a      	strb	r2, [r3, #0]

	for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e00e      	b.n	80058f8 <Encode_Msg_AHRS+0x2c4>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3313      	adds	r3, #19
 80058de:	7819      	ldrb	r1, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3313      	adds	r3, #19
 80058ec:	1a8a      	subs	r2, r1, r2
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b12      	cmp	r3, #18
 80058fc:	dded      	ble.n	80058da <Encode_Msg_AHRS+0x2a6>
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000460 	.word	0x20000460
 8005910:	42c80000 	.word	0x42c80000
 8005914:	20000464 	.word	0x20000464
 8005918:	20000468 	.word	0x20000468
 800591c:	20000300 	.word	0x20000300
 8005920:	200002c0 	.word	0x200002c0
 8005924:	3dcccccd 	.word	0x3dcccccd
 8005928:	3eb851ec 	.word	0x3eb851ec

0800592c <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char* telemetry_tx_buf)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x46;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2246      	movs	r2, #70	@ 0x46
 8005938:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3301      	adds	r3, #1
 800593e:	2243      	movs	r2, #67	@ 0x43
 8005940:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x11;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3302      	adds	r3, #2
 8005946:	2211      	movs	r2, #17
 8005948:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[3] = 0x00;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3303      	adds	r3, #3
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = 0x00;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = 0x00;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3305      	adds	r3, #5
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = 0x00;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3306      	adds	r3, #6
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[7] = 0x00;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3307      	adds	r3, #7
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = 0x00;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3308      	adds	r3, #8
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = 0x00;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3309      	adds	r3, #9
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = 0x00;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	330a      	adds	r3, #10
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (unsigned short)(batVolt*100);
 800598a:	4b38      	ldr	r3, [pc, #224]	@ (8005a6c <Encode_Msg_GPS+0x140>)
 800598c:	edd3 7a00 	vldr	s15, [r3]
 8005990:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005a70 <Encode_Msg_GPS+0x144>
 8005994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599c:	ee17 3a90 	vmov	r3, s15
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	330b      	adds	r3, #11
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short)(batVolt*100))>>8;
 80059aa:	4b30      	ldr	r3, [pc, #192]	@ (8005a6c <Encode_Msg_GPS+0x140>)
 80059ac:	edd3 7a00 	vldr	s15, [r3]
 80059b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005a70 <Encode_Msg_GPS+0x144>
 80059b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059bc:	ee17 3a90 	vmov	r3, s15
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	330c      	adds	r3, #12
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <Encode_Msg_GPS+0x148>)
 80059d0:	891b      	ldrh	r3, [r3, #8]
 80059d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	330d      	adds	r3, #13
 80059e2:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 80059e4:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <Encode_Msg_GPS+0x148>)
 80059e6:	899b      	ldrh	r3, [r3, #12]
 80059e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059ec:	d009      	beq.n	8005a02 <Encode_Msg_GPS+0xd6>
 80059ee:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <Encode_Msg_GPS+0x148>)
 80059f0:	899b      	ldrh	r3, [r3, #12]
 80059f2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <Encode_Msg_GPS+0xd2>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e002      	b.n	8005a04 <Encode_Msg_GPS+0xd8>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e000      	b.n	8005a04 <Encode_Msg_GPS+0xd8>
 8005a02:	2300      	movs	r3, #0
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	320e      	adds	r2, #14
 8005a08:	7013      	strb	r3, [r2, #0]

	telemetry_tx_buf[15] = failsafe_flag;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	330f      	adds	r3, #15
 8005a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <Encode_Msg_GPS+0x14c>)
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[16] = 0x00;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3310      	adds	r3, #16
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3311      	adds	r3, #17
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3312      	adds	r3, #18
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3313      	adds	r3, #19
 8005a30:	22ff      	movs	r2, #255	@ 0xff
 8005a32:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<19;i++){
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e00e      	b.n	8005a58 <Encode_Msg_GPS+0x12c>
		telemetry_tx_buf[19] = telemetry_tx_buf[19]- telemetry_tx_buf[i];
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3313      	adds	r3, #19
 8005a3e:	7819      	ldrb	r1, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	781a      	ldrb	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3313      	adds	r3, #19
 8005a4c:	1a8a      	subs	r2, r1, r2
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<19;i++){
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b12      	cmp	r3, #18
 8005a5c:	dded      	ble.n	8005a3a <Encode_Msg_GPS+0x10e>
	}
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	200005a8 	.word	0x200005a8
 8005a70:	42c80000 	.word	0x42c80000
 8005a74:	200002c0 	.word	0x200002c0
 8005a78:	200005ac 	.word	0x200005ac

08005a7c <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b089      	sub	sp, #36	@ 0x24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6178      	str	r0, [r7, #20]
 8005a84:	460b      	mov	r3, r1
 8005a86:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a8e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005a92:	74fb      	strb	r3, [r7, #19]
	telemetry_tx_buf[0] = 0x46;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2246      	movs	r2, #70	@ 0x46
 8005a98:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	2243      	movs	r2, #67	@ 0x43
 8005aa0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = id;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	7cfa      	ldrb	r2, [r7, #19]
 8005aa8:	701a      	strb	r2, [r3, #0]

	//	memcpy(&telemetry_tx_buf[3], &p, 4);
	//	memcpy(&telemetry_tx_buf[7], &i, 4);
	//	memcpy(&telemetry_tx_buf[11], &d, 4);

	*(float*)&telemetry_tx_buf[3] = p;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	3303      	adds	r3, #3
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]
	*(float*)&telemetry_tx_buf[7] = i;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3307      	adds	r3, #7
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	601a      	str	r2, [r3, #0]
	*(float*)&telemetry_tx_buf[11] = d;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	330b      	adds	r3, #11
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]

	telemetry_tx_buf[15] = 0x00;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	330f      	adds	r3, #15
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3310      	adds	r3, #16
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	3311      	adds	r3, #17
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	3312      	adds	r3, #18
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3313      	adds	r3, #19
 8005ae6:	22ff      	movs	r2, #255	@ 0xff
 8005ae8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<19;i++){
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	e00e      	b.n	8005b0e <Encode_Msg_PID_Gain+0x92>
		telemetry_tx_buf[19] = telemetry_tx_buf[19]- telemetry_tx_buf[i];
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3313      	adds	r3, #19
 8005af4:	7819      	ldrb	r1, [r3, #0]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4413      	add	r3, r2
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	3313      	adds	r3, #19
 8005b02:	1a8a      	subs	r2, r1, r2
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<19;i++){
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2b12      	cmp	r3, #18
 8005b12:	dded      	ble.n	8005af0 <Encode_Msg_PID_Gain+0x74>
	}
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	3724      	adds	r7, #36	@ 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b26:	b672      	cpsid	i
}
 8005b28:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <Error_Handler+0x8>

08005b2e <LL_SPI_SetStandard>:
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f023 0210 	bic.w	r2, r3, #16
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	605a      	str	r2, [r3, #4]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <LL_AHB1_GRP1_EnableClock>:
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005b5c:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b60:	4907      	ldr	r1, [pc, #28]	@ (8005b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40023800 	.word	0x40023800

08005b84 <LL_APB1_GRP1_EnableClock>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005b8c:	4b08      	ldr	r3, [pc, #32]	@ (8005bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b90:	4907      	ldr	r1, [pc, #28]	@ (8005bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005b98:	4b05      	ldr	r3, [pc, #20]	@ (8005bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40023800 	.word	0x40023800

08005bb4 <LL_APB2_GRP1_EnableClock>:
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005bbc:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005bbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bc0:	4907      	ldr	r1, [pc, #28]	@ (8005be0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8005bca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	40023800 	.word	0x40023800

08005be4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b090      	sub	sp, #64	@ 0x40
 8005be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005bea:	f107 0318 	add.w	r3, r7, #24
 8005bee:	2228      	movs	r2, #40	@ 0x28
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f007 f998 	bl	800cf28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	611a      	str	r2, [r3, #16]
 8005c06:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005c08:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005c0c:	f7ff ffd2 	bl	8005bb4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7ff ff9f 	bl	8005b54 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005c16:	23e0      	movs	r3, #224	@ 0xe0
 8005c18:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005c2a:	2305      	movs	r3, #5
 8005c2c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c2e:	463b      	mov	r3, r7
 8005c30:	4619      	mov	r1, r3
 8005c32:	4813      	ldr	r0, [pc, #76]	@ (8005c80 <MX_SPI1_Init+0x9c>)
 8005c34:	f005 fb0b 	bl	800b24e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005c3c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005c40:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005c42:	2300      	movs	r3, #0
 8005c44:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005c46:	2302      	movs	r3, #2
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8005c54:	2310      	movs	r3, #16
 8005c56:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005c60:	230a      	movs	r3, #10
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8005c64:	f107 0318 	add.w	r3, r7, #24
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4806      	ldr	r0, [pc, #24]	@ (8005c84 <MX_SPI1_Init+0xa0>)
 8005c6c:	f005 fccd 	bl	800b60a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8005c70:	2100      	movs	r1, #0
 8005c72:	4804      	ldr	r0, [pc, #16]	@ (8005c84 <MX_SPI1_Init+0xa0>)
 8005c74:	f7ff ff5b 	bl	8005b2e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005c78:	bf00      	nop
 8005c7a:	3740      	adds	r7, #64	@ 0x40
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40020000 	.word	0x40020000
 8005c84:	40013000 	.word	0x40013000

08005c88 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b090      	sub	sp, #64	@ 0x40
 8005c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005c8e:	f107 0318 	add.w	r3, r7, #24
 8005c92:	2228      	movs	r2, #40	@ 0x28
 8005c94:	2100      	movs	r1, #0
 8005c96:	4618      	mov	r0, r3
 8005c98:	f007 f946 	bl	800cf28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8005cac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005cb0:	f7ff ff68 	bl	8005b84 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005cb4:	2002      	movs	r0, #2
 8005cb6:	f7ff ff4d 	bl	8005b54 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8005cba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005cbe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005cd0:	2305      	movs	r3, #5
 8005cd2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4813      	ldr	r0, [pc, #76]	@ (8005d28 <MX_SPI2_Init+0xa0>)
 8005cda:	f005 fab8 	bl	800b24e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005ce2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005ce6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005cec:	2302      	movs	r3, #2
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005cf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8005cfa:	2318      	movs	r3, #24
 8005cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005d06:	230a      	movs	r3, #10
 8005d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8005d0a:	f107 0318 	add.w	r3, r7, #24
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4806      	ldr	r0, [pc, #24]	@ (8005d2c <MX_SPI2_Init+0xa4>)
 8005d12:	f005 fc7a 	bl	800b60a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8005d16:	2100      	movs	r1, #0
 8005d18:	4804      	ldr	r0, [pc, #16]	@ (8005d2c <MX_SPI2_Init+0xa4>)
 8005d1a:	f7ff ff08 	bl	8005b2e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005d1e:	bf00      	nop
 8005d20:	3740      	adds	r7, #64	@ 0x40
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40020400 	.word	0x40020400
 8005d2c:	40003800 	.word	0x40003800

08005d30 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b090      	sub	sp, #64	@ 0x40
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005d36:	f107 0318 	add.w	r3, r7, #24
 8005d3a:	2228      	movs	r2, #40	@ 0x28
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f007 f8f2 	bl	800cf28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d44:	463b      	mov	r3, r7
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	60da      	str	r2, [r3, #12]
 8005d50:	611a      	str	r2, [r3, #16]
 8005d52:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8005d54:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005d58:	f7ff ff14 	bl	8005b84 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005d5c:	2002      	movs	r0, #2
 8005d5e:	f7ff fef9 	bl	8005b54 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8005d62:	2338      	movs	r3, #56	@ 0x38
 8005d64:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005d66:	2302      	movs	r3, #2
 8005d68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8005d76:	2306      	movs	r3, #6
 8005d78:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4813      	ldr	r0, [pc, #76]	@ (8005dcc <MX_SPI3_Init+0x9c>)
 8005d80:	f005 fa65 	bl	800b24e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005d88:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005d8c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005d92:	2302      	movs	r3, #2
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005d9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8005da0:	2308      	movs	r3, #8
 8005da2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005da4:	2300      	movs	r3, #0
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005dac:	230a      	movs	r3, #10
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8005db0:	f107 0318 	add.w	r3, r7, #24
 8005db4:	4619      	mov	r1, r3
 8005db6:	4806      	ldr	r0, [pc, #24]	@ (8005dd0 <MX_SPI3_Init+0xa0>)
 8005db8:	f005 fc27 	bl	800b60a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4804      	ldr	r0, [pc, #16]	@ (8005dd0 <MX_SPI3_Init+0xa0>)
 8005dc0:	f7ff feb5 	bl	8005b2e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005dc4:	bf00      	nop
 8005dc6:	3740      	adds	r7, #64	@ 0x40
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40020400 	.word	0x40020400
 8005dd0:	40003c00 	.word	0x40003c00

08005dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	4b10      	ldr	r3, [pc, #64]	@ (8005e20 <HAL_MspInit+0x4c>)
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	4a0f      	ldr	r2, [pc, #60]	@ (8005e20 <HAL_MspInit+0x4c>)
 8005de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dea:	4b0d      	ldr	r3, [pc, #52]	@ (8005e20 <HAL_MspInit+0x4c>)
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005df2:	607b      	str	r3, [r7, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	4b09      	ldr	r3, [pc, #36]	@ (8005e20 <HAL_MspInit+0x4c>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	4a08      	ldr	r2, [pc, #32]	@ (8005e20 <HAL_MspInit+0x4c>)
 8005e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e06:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <HAL_MspInit+0x4c>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40023800 	.word	0x40023800

08005e24 <LL_TIM_ClearFlag_UPDATE>:
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f06f 0201 	mvn.w	r2, #1
 8005e32:	611a      	str	r2, [r3, #16]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <LL_USART_IsActiveFlag_RXNE>:
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <LL_USART_ClearFlag_RXNE>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f06f 0220 	mvn.w	r2, #32
 8005e9a:	601a      	str	r2, [r3, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_USART_ReceiveData8>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	b2db      	uxtb	r3, r3
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_USART_TransmitData8>:
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	605a      	str	r2, [r3, #4]
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005ee4:	bf00      	nop
 8005ee6:	e7fd      	b.n	8005ee4 <NMI_Handler+0x4>

08005ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <HardFault_Handler+0x4>

08005ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <MemManage_Handler+0x4>

08005ef8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005efc:	bf00      	nop
 8005efe:	e7fd      	b.n	8005efc <BusFault_Handler+0x4>

08005f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f04:	bf00      	nop
 8005f06:	e7fd      	b.n	8005f04 <UsageFault_Handler+0x4>

08005f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f16:	b480      	push	{r7}
 8005f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f1a:	bf00      	nop
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f36:	f000 fff1 	bl	8006f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005f44:	4802      	ldr	r0, [pc, #8]	@ (8005f50 <USART1_IRQHandler+0x10>)
 8005f46:	f004 f8e1 	bl	800a10c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	200005e8 	.word	0x200005e8

08005f54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8005f58:	480d      	ldr	r0, [pc, #52]	@ (8005f90 <UART4_IRQHandler+0x3c>)
 8005f5a:	f7ff ff84 	bl	8005e66 <LL_USART_IsActiveFlag_RXNE>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <UART4_IRQHandler+0x36>
		LL_USART_ClearFlag_RXNE(UART4);
 8005f64:	480a      	ldr	r0, [pc, #40]	@ (8005f90 <UART4_IRQHandler+0x3c>)
 8005f66:	f7ff ff91 	bl	8005e8c <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8005f6a:	4809      	ldr	r0, [pc, #36]	@ (8005f90 <UART4_IRQHandler+0x3c>)
 8005f6c:	f7ff ff9c 	bl	8005ea8 <LL_USART_ReceiveData8>
 8005f70:	4603      	mov	r3, r0
 8005f72:	461a      	mov	r2, r3
 8005f74:	4b07      	ldr	r3, [pc, #28]	@ (8005f94 <UART4_IRQHandler+0x40>)
 8005f76:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 8005f78:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <UART4_IRQHandler+0x44>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]

		LL_USART_TransmitData8(USART6, uart4_rx_data);
 8005f7e:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <UART4_IRQHandler+0x40>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	4619      	mov	r1, r3
 8005f84:	4805      	ldr	r0, [pc, #20]	@ (8005f9c <UART4_IRQHandler+0x48>)
 8005f86:	f7ff ff9c 	bl	8005ec2 <LL_USART_TransmitData8>
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40004c00 	.word	0x40004c00
 8005f94:	200005b2 	.word	0x200005b2
 8005f98:	200005b1 	.word	0x200005b1
 8005f9c:	40011400 	.word	0x40011400

08005fa0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt=0;
	if (LL_USART_IsActiveFlag_RXNE(UART5)) {
 8005fa4:	4832      	ldr	r0, [pc, #200]	@ (8006070 <UART5_IRQHandler+0xd0>)
 8005fa6:	f7ff ff5e 	bl	8005e66 <LL_USART_IsActiveFlag_RXNE>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d05c      	beq.n	800606a <UART5_IRQHandler+0xca>
		LL_USART_ClearFlag_RXNE(UART5);
 8005fb0:	482f      	ldr	r0, [pc, #188]	@ (8006070 <UART5_IRQHandler+0xd0>)
 8005fb2:	f7ff ff6b 	bl	8005e8c <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8005fb6:	482e      	ldr	r0, [pc, #184]	@ (8006070 <UART5_IRQHandler+0xd0>)
 8005fb8:	f7ff ff76 	bl	8005ea8 <LL_USART_ReceiveData8>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8006074 <UART5_IRQHandler+0xd4>)
 8005fc2:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8005fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8006078 <UART5_IRQHandler+0xd8>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8005fca:	4b2c      	ldr	r3, [pc, #176]	@ (800607c <UART5_IRQHandler+0xdc>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b1f      	cmp	r3, #31
 8005fd0:	d02e      	beq.n	8006030 <UART5_IRQHandler+0x90>
 8005fd2:	2b1f      	cmp	r3, #31
 8005fd4:	dc3a      	bgt.n	800604c <UART5_IRQHandler+0xac>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <UART5_IRQHandler+0x40>
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d012      	beq.n	8006004 <UART5_IRQHandler+0x64>
 8005fde:	e035      	b.n	800604c <UART5_IRQHandler+0xac>
		case 0:
			if (uart5_rx_data == 0x20) {
 8005fe0:	4b24      	ldr	r3, [pc, #144]	@ (8006074 <UART5_IRQHandler+0xd4>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d13f      	bne.n	8006068 <UART5_IRQHandler+0xc8>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8005fe8:	4b24      	ldr	r3, [pc, #144]	@ (800607c <UART5_IRQHandler+0xdc>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b21      	ldr	r3, [pc, #132]	@ (8006074 <UART5_IRQHandler+0xd4>)
 8005ff0:	7819      	ldrb	r1, [r3, #0]
 8005ff2:	4b23      	ldr	r3, [pc, #140]	@ (8006080 <UART5_IRQHandler+0xe0>)
 8005ff4:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005ff6:	4b21      	ldr	r3, [pc, #132]	@ (800607c <UART5_IRQHandler+0xdc>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <UART5_IRQHandler+0xdc>)
 8006000:	701a      	strb	r2, [r3, #0]
			}
			break;
 8006002:	e031      	b.n	8006068 <UART5_IRQHandler+0xc8>
		case 1:
			if (uart5_rx_data == 0x40) {
 8006004:	4b1b      	ldr	r3, [pc, #108]	@ (8006074 <UART5_IRQHandler+0xd4>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	d10d      	bne.n	8006028 <UART5_IRQHandler+0x88>
				ibus_rx_buf[cnt] = uart5_rx_data;
 800600c:	4b1b      	ldr	r3, [pc, #108]	@ (800607c <UART5_IRQHandler+0xdc>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	4b18      	ldr	r3, [pc, #96]	@ (8006074 <UART5_IRQHandler+0xd4>)
 8006014:	7819      	ldrb	r1, [r3, #0]
 8006016:	4b1a      	ldr	r3, [pc, #104]	@ (8006080 <UART5_IRQHandler+0xe0>)
 8006018:	5499      	strb	r1, [r3, r2]
				cnt++;
 800601a:	4b18      	ldr	r3, [pc, #96]	@ (800607c <UART5_IRQHandler+0xdc>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4b16      	ldr	r3, [pc, #88]	@ (800607c <UART5_IRQHandler+0xdc>)
 8006024:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0;
			}
			break;
 8006026:	e020      	b.n	800606a <UART5_IRQHandler+0xca>
				cnt = 0;
 8006028:	4b14      	ldr	r3, [pc, #80]	@ (800607c <UART5_IRQHandler+0xdc>)
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
			break;
 800602e:	e01c      	b.n	800606a <UART5_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8006030:	4b12      	ldr	r3, [pc, #72]	@ (800607c <UART5_IRQHandler+0xdc>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	4b0f      	ldr	r3, [pc, #60]	@ (8006074 <UART5_IRQHandler+0xd4>)
 8006038:	7819      	ldrb	r1, [r3, #0]
 800603a:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <UART5_IRQHandler+0xe0>)
 800603c:	5499      	strb	r1, [r3, r2]
			cnt=0;
 800603e:	4b0f      	ldr	r3, [pc, #60]	@ (800607c <UART5_IRQHandler+0xdc>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8006044:	4b0f      	ldr	r3, [pc, #60]	@ (8006084 <UART5_IRQHandler+0xe4>)
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
			break;
 800604a:	e00e      	b.n	800606a <UART5_IRQHandler+0xca>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800604c:	4b0b      	ldr	r3, [pc, #44]	@ (800607c <UART5_IRQHandler+0xdc>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <UART5_IRQHandler+0xd4>)
 8006054:	7819      	ldrb	r1, [r3, #0]
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <UART5_IRQHandler+0xe0>)
 8006058:	5499      	strb	r1, [r3, r2]
			cnt++;
 800605a:	4b08      	ldr	r3, [pc, #32]	@ (800607c <UART5_IRQHandler+0xdc>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	3301      	adds	r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b06      	ldr	r3, [pc, #24]	@ (800607c <UART5_IRQHandler+0xdc>)
 8006064:	701a      	strb	r2, [r3, #0]
			break;
 8006066:	e000      	b.n	800606a <UART5_IRQHandler+0xca>
			break;
 8006068:	bf00      	nop
	}
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800606a:	bf00      	nop
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40005000 	.word	0x40005000
 8006074:	200005b4 	.word	0x200005b4
 8006078:	200005b3 	.word	0x200005b3
 800607c:	200005de 	.word	0x200005de
 8006080:	200005b8 	.word	0x200005b8
 8006084:	200005d8 	.word	0x200005d8

08006088 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7)){
 800608c:	4825      	ldr	r0, [pc, #148]	@ (8006124 <TIM7_IRQHandler+0x9c>)
 800608e:	f7ff fed7 	bl	8005e40 <LL_TIM_IsActiveFlag_UPDATE>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d043      	beq.n	8006120 <TIM7_IRQHandler+0x98>
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8006098:	4822      	ldr	r0, [pc, #136]	@ (8006124 <TIM7_IRQHandler+0x9c>)
 800609a:	f7ff fec3 	bl	8005e24 <LL_TIM_ClearFlag_UPDATE>

		tim7_1ms_count++;
 800609e:	4b22      	ldr	r3, [pc, #136]	@ (8006128 <TIM7_IRQHandler+0xa0>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	4b20      	ldr	r3, [pc, #128]	@ (8006128 <TIM7_IRQHandler+0xa0>)
 80060a8:	701a      	strb	r2, [r3, #0]
		if(tim7_1ms_count == 1){
 80060aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006128 <TIM7_IRQHandler+0xa0>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <TIM7_IRQHandler+0x36>
			tim7_1ms_count = 0;
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <TIM7_IRQHandler+0xa0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 80060b8:	4b1c      	ldr	r3, [pc, #112]	@ (800612c <TIM7_IRQHandler+0xa4>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
		}
		tim7_20ms_count++;
 80060be:	4b1c      	ldr	r3, [pc, #112]	@ (8006130 <TIM7_IRQHandler+0xa8>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006130 <TIM7_IRQHandler+0xa8>)
 80060c8:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20){
 80060ca:	4b19      	ldr	r3, [pc, #100]	@ (8006130 <TIM7_IRQHandler+0xa8>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b14      	cmp	r3, #20
 80060d0:	d105      	bne.n	80060de <TIM7_IRQHandler+0x56>
			tim7_20ms_count = 0;
 80060d2:	4b17      	ldr	r3, [pc, #92]	@ (8006130 <TIM7_IRQHandler+0xa8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 80060d8:	4b16      	ldr	r3, [pc, #88]	@ (8006134 <TIM7_IRQHandler+0xac>)
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
		}
		tim7_100ms_count++;
 80060de:	4b16      	ldr	r3, [pc, #88]	@ (8006138 <TIM7_IRQHandler+0xb0>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	4b14      	ldr	r3, [pc, #80]	@ (8006138 <TIM7_IRQHandler+0xb0>)
 80060e8:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100){
 80060ea:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <TIM7_IRQHandler+0xb0>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b64      	cmp	r3, #100	@ 0x64
 80060f0:	d105      	bne.n	80060fe <TIM7_IRQHandler+0x76>
			tim7_100ms_count=0;
 80060f2:	4b11      	ldr	r3, [pc, #68]	@ (8006138 <TIM7_IRQHandler+0xb0>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 80060f8:	4b10      	ldr	r3, [pc, #64]	@ (800613c <TIM7_IRQHandler+0xb4>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
		}
		tim7_1000ms_count++;
 80060fe:	4b10      	ldr	r3, [pc, #64]	@ (8006140 <TIM7_IRQHandler+0xb8>)
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	4b0e      	ldr	r3, [pc, #56]	@ (8006140 <TIM7_IRQHandler+0xb8>)
 8006108:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000){
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <TIM7_IRQHandler+0xb8>)
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006112:	d105      	bne.n	8006120 <TIM7_IRQHandler+0x98>
			tim7_1000ms_count=0;
 8006114:	4b0a      	ldr	r3, [pc, #40]	@ (8006140 <TIM7_IRQHandler+0xb8>)
 8006116:	2200      	movs	r2, #0
 8006118:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800611a:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <TIM7_IRQHandler+0xbc>)
 800611c:	2201      	movs	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006120:	bf00      	nop
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40001400 	.word	0x40001400
 8006128:	200005df 	.word	0x200005df
 800612c:	200005da 	.word	0x200005da
 8006130:	200005e0 	.word	0x200005e0
 8006134:	200005db 	.word	0x200005db
 8006138:	200005e1 	.word	0x200005e1
 800613c:	200005dc 	.word	0x200005dc
 8006140:	200005e2 	.word	0x200005e2
 8006144:	200005dd 	.word	0x200005dd

08006148 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800614c:	4802      	ldr	r0, [pc, #8]	@ (8006158 <DMA2_Stream0_IRQHandler+0x10>)
 800614e:	f001 fde5 	bl	8007d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	200004b4 	.word	0x200004b4

0800615c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 8006160:	480a      	ldr	r0, [pc, #40]	@ (800618c <USART6_IRQHandler+0x30>)
 8006162:	f7ff fe80 	bl	8005e66 <LL_USART_IsActiveFlag_RXNE>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <USART6_IRQHandler+0x2a>
		LL_USART_ClearFlag_RXNE(USART6);
 800616c:	4807      	ldr	r0, [pc, #28]	@ (800618c <USART6_IRQHandler+0x30>)
 800616e:	f7ff fe8d 	bl	8005e8c <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8006172:	4806      	ldr	r0, [pc, #24]	@ (800618c <USART6_IRQHandler+0x30>)
 8006174:	f7ff fe98 	bl	8005ea8 <LL_USART_ReceiveData8>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <USART6_IRQHandler+0x34>)
 800617e:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8006180:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <USART6_IRQHandler+0x38>)
 8006182:	2201      	movs	r2, #1
 8006184:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40011400 	.word	0x40011400
 8006190:	200005b0 	.word	0x200005b0
 8006194:	200005af 	.word	0x200005af

08006198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return 1;
 800619c:	2301      	movs	r3, #1
}
 800619e:	4618      	mov	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <_kill>:

int _kill(int pid, int sig)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80061b2:	f006 ff0b 	bl	800cfcc <__errno>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2216      	movs	r2, #22
 80061ba:	601a      	str	r2, [r3, #0]
  return -1;
 80061bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <_exit>:

void _exit (int status)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80061d0:	f04f 31ff 	mov.w	r1, #4294967295
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ffe7 	bl	80061a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <_exit+0x12>

080061de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b086      	sub	sp, #24
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	e00a      	b.n	8006206 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80061f0:	f3af 8000 	nop.w
 80061f4:	4601      	mov	r1, r0
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	60ba      	str	r2, [r7, #8]
 80061fc:	b2ca      	uxtb	r2, r1
 80061fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	3301      	adds	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	dbf0      	blt.n	80061f0 <_read+0x12>
  }

  return len;
 800620e:	687b      	ldr	r3, [r7, #4]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006240:	605a      	str	r2, [r3, #4]
  return 0;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <_isatty>:

int _isatty(int file)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006258:	2301      	movs	r3, #1
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006288:	4a14      	ldr	r2, [pc, #80]	@ (80062dc <_sbrk+0x5c>)
 800628a:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <_sbrk+0x60>)
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006294:	4b13      	ldr	r3, [pc, #76]	@ (80062e4 <_sbrk+0x64>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800629c:	4b11      	ldr	r3, [pc, #68]	@ (80062e4 <_sbrk+0x64>)
 800629e:	4a12      	ldr	r2, [pc, #72]	@ (80062e8 <_sbrk+0x68>)
 80062a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062a2:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <_sbrk+0x64>)
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d207      	bcs.n	80062c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062b0:	f006 fe8c 	bl	800cfcc <__errno>
 80062b4:	4603      	mov	r3, r0
 80062b6:	220c      	movs	r2, #12
 80062b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295
 80062be:	e009      	b.n	80062d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062c0:	4b08      	ldr	r3, [pc, #32]	@ (80062e4 <_sbrk+0x64>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062c6:	4b07      	ldr	r3, [pc, #28]	@ (80062e4 <_sbrk+0x64>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	4a05      	ldr	r2, [pc, #20]	@ (80062e4 <_sbrk+0x64>)
 80062d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20020000 	.word	0x20020000
 80062e0:	00000400 	.word	0x00000400
 80062e4:	200005e4 	.word	0x200005e4
 80062e8:	20000780 	.word	0x20000780

080062ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062f0:	4b06      	ldr	r3, [pc, #24]	@ (800630c <SystemInit+0x20>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f6:	4a05      	ldr	r2, [pc, #20]	@ (800630c <SystemInit+0x20>)
 80062f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006300:	bf00      	nop
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006314:	4b04      	ldr	r3, [pc, #16]	@ (8006328 <__NVIC_GetPriorityGrouping+0x18>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0a1b      	lsrs	r3, r3, #8
 800631a:	f003 0307 	and.w	r3, r3, #7
}
 800631e:	4618      	mov	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633a:	2b00      	cmp	r3, #0
 800633c:	db0b      	blt.n	8006356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f003 021f 	and.w	r2, r3, #31
 8006344:	4907      	ldr	r1, [pc, #28]	@ (8006364 <__NVIC_EnableIRQ+0x38>)
 8006346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2001      	movs	r0, #1
 800634e:	fa00 f202 	lsl.w	r2, r0, r2
 8006352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	e000e100 	.word	0xe000e100

08006368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	6039      	str	r1, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006378:	2b00      	cmp	r3, #0
 800637a:	db0a      	blt.n	8006392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	490c      	ldr	r1, [pc, #48]	@ (80063b4 <__NVIC_SetPriority+0x4c>)
 8006382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006386:	0112      	lsls	r2, r2, #4
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	440b      	add	r3, r1
 800638c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006390:	e00a      	b.n	80063a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	4908      	ldr	r1, [pc, #32]	@ (80063b8 <__NVIC_SetPriority+0x50>)
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	3b04      	subs	r3, #4
 80063a0:	0112      	lsls	r2, r2, #4
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	440b      	add	r3, r1
 80063a6:	761a      	strb	r2, [r3, #24]
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	e000e100 	.word	0xe000e100
 80063b8:	e000ed00 	.word	0xe000ed00

080063bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063bc:	b480      	push	{r7}
 80063be:	b089      	sub	sp, #36	@ 0x24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f1c3 0307 	rsb	r3, r3, #7
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	bf28      	it	cs
 80063da:	2304      	movcs	r3, #4
 80063dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d902      	bls.n	80063ec <NVIC_EncodePriority+0x30>
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3b03      	subs	r3, #3
 80063ea:	e000      	b.n	80063ee <NVIC_EncodePriority+0x32>
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43da      	mvns	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	401a      	ands	r2, r3
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006404:	f04f 31ff 	mov.w	r1, #4294967295
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	43d9      	mvns	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006414:	4313      	orrs	r3, r2
         );
}
 8006416:	4618      	mov	r0, r3
 8006418:	3724      	adds	r7, #36	@ 0x24
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <LL_TIM_EnableARRPreload>:
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <LL_TIM_OC_EnableFast>:
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d01c      	beq.n	800648e <LL_TIM_OC_EnableFast+0x4a>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b04      	cmp	r3, #4
 8006458:	d017      	beq.n	800648a <LL_TIM_OC_EnableFast+0x46>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b10      	cmp	r3, #16
 800645e:	d012      	beq.n	8006486 <LL_TIM_OC_EnableFast+0x42>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b40      	cmp	r3, #64	@ 0x40
 8006464:	d00d      	beq.n	8006482 <LL_TIM_OC_EnableFast+0x3e>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800646c:	d007      	beq.n	800647e <LL_TIM_OC_EnableFast+0x3a>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006474:	d101      	bne.n	800647a <LL_TIM_OC_EnableFast+0x36>
 8006476:	2305      	movs	r3, #5
 8006478:	e00a      	b.n	8006490 <LL_TIM_OC_EnableFast+0x4c>
 800647a:	2306      	movs	r3, #6
 800647c:	e008      	b.n	8006490 <LL_TIM_OC_EnableFast+0x4c>
 800647e:	2304      	movs	r3, #4
 8006480:	e006      	b.n	8006490 <LL_TIM_OC_EnableFast+0x4c>
 8006482:	2303      	movs	r3, #3
 8006484:	e004      	b.n	8006490 <LL_TIM_OC_EnableFast+0x4c>
 8006486:	2302      	movs	r3, #2
 8006488:	e002      	b.n	8006490 <LL_TIM_OC_EnableFast+0x4c>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <LL_TIM_OC_EnableFast+0x4c>
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3318      	adds	r3, #24
 8006496:	4619      	mov	r1, r3
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	4a0a      	ldr	r2, [pc, #40]	@ (80064c4 <LL_TIM_OC_EnableFast+0x80>)
 800649c:	5cd3      	ldrb	r3, [r2, r3]
 800649e:	440b      	add	r3, r1
 80064a0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	4907      	ldr	r1, [pc, #28]	@ (80064c8 <LL_TIM_OC_EnableFast+0x84>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	4619      	mov	r1, r3
 80064ae:	2304      	movs	r3, #4
 80064b0:	408b      	lsls	r3, r1
 80064b2:	431a      	orrs	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	601a      	str	r2, [r3, #0]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	0800fcc8 	.word	0x0800fcc8
 80064c8:	0800fcd0 	.word	0x0800fcd0

080064cc <LL_TIM_OC_EnablePreload>:
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d01c      	beq.n	8006516 <LL_TIM_OC_EnablePreload+0x4a>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d017      	beq.n	8006512 <LL_TIM_OC_EnablePreload+0x46>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d012      	beq.n	800650e <LL_TIM_OC_EnablePreload+0x42>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b40      	cmp	r3, #64	@ 0x40
 80064ec:	d00d      	beq.n	800650a <LL_TIM_OC_EnablePreload+0x3e>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064f4:	d007      	beq.n	8006506 <LL_TIM_OC_EnablePreload+0x3a>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fc:	d101      	bne.n	8006502 <LL_TIM_OC_EnablePreload+0x36>
 80064fe:	2305      	movs	r3, #5
 8006500:	e00a      	b.n	8006518 <LL_TIM_OC_EnablePreload+0x4c>
 8006502:	2306      	movs	r3, #6
 8006504:	e008      	b.n	8006518 <LL_TIM_OC_EnablePreload+0x4c>
 8006506:	2304      	movs	r3, #4
 8006508:	e006      	b.n	8006518 <LL_TIM_OC_EnablePreload+0x4c>
 800650a:	2303      	movs	r3, #3
 800650c:	e004      	b.n	8006518 <LL_TIM_OC_EnablePreload+0x4c>
 800650e:	2302      	movs	r3, #2
 8006510:	e002      	b.n	8006518 <LL_TIM_OC_EnablePreload+0x4c>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <LL_TIM_OC_EnablePreload+0x4c>
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3318      	adds	r3, #24
 800651e:	4619      	mov	r1, r3
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	4a0a      	ldr	r2, [pc, #40]	@ (800654c <LL_TIM_OC_EnablePreload+0x80>)
 8006524:	5cd3      	ldrb	r3, [r2, r3]
 8006526:	440b      	add	r3, r1
 8006528:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	4907      	ldr	r1, [pc, #28]	@ (8006550 <LL_TIM_OC_EnablePreload+0x84>)
 8006532:	5ccb      	ldrb	r3, [r1, r3]
 8006534:	4619      	mov	r1, r3
 8006536:	2308      	movs	r3, #8
 8006538:	408b      	lsls	r3, r1
 800653a:	431a      	orrs	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	601a      	str	r2, [r3, #0]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	0800fcc8 	.word	0x0800fcc8
 8006550:	0800fcd0 	.word	0x0800fcd0

08006554 <LL_TIM_SetClockSource>:
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	609a      	str	r2, [r3, #8]
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <LL_TIM_SetTriggerOutput>:
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <LL_TIM_DisableMasterSlaveMode>:
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	609a      	str	r2, [r3, #8]
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <LL_AHB1_GRP1_EnableClock>:
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80065cc:	4b08      	ldr	r3, [pc, #32]	@ (80065f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065d0:	4907      	ldr	r1, [pc, #28]	@ (80065f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4013      	ands	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40023800 	.word	0x40023800

080065f4 <LL_APB1_GRP1_EnableClock>:
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80065fc:	4b08      	ldr	r3, [pc, #32]	@ (8006620 <LL_APB1_GRP1_EnableClock+0x2c>)
 80065fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006600:	4907      	ldr	r1, [pc, #28]	@ (8006620 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4313      	orrs	r3, r2
 8006606:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006608:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <LL_APB1_GRP1_EnableClock+0x2c>)
 800660a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4013      	ands	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40023800 	.word	0x40023800

08006624 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b094      	sub	sp, #80	@ 0x50
 8006628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800662a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	605a      	str	r2, [r3, #4]
 8006634:	609a      	str	r2, [r3, #8]
 8006636:	60da      	str	r2, [r3, #12]
 8006638:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800663a:	f107 031c 	add.w	r3, r7, #28
 800663e:	2220      	movs	r2, #32
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f006 fc70 	bl	800cf28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006648:	1d3b      	adds	r3, r7, #4
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	605a      	str	r2, [r3, #4]
 8006650:	609a      	str	r2, [r3, #8]
 8006652:	60da      	str	r2, [r3, #12]
 8006654:	611a      	str	r2, [r3, #16]
 8006656:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8006658:	2002      	movs	r0, #2
 800665a:	f7ff ffcb 	bl	80065f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800665e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8006662:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006664:	2300      	movs	r3, #0
 8006666:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 8006668:	2314      	movs	r3, #20
 800666a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800666c:	2300      	movs	r3, #0
 800666e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8006670:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006674:	4619      	mov	r1, r3
 8006676:	4822      	ldr	r0, [pc, #136]	@ (8006700 <MX_TIM3_Init+0xdc>)
 8006678:	f005 f88c 	bl	800b794 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800667c:	4820      	ldr	r0, [pc, #128]	@ (8006700 <MX_TIM3_Init+0xdc>)
 800667e:	f7ff fed0 	bl	8006422 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006682:	2100      	movs	r1, #0
 8006684:	481e      	ldr	r0, [pc, #120]	@ (8006700 <MX_TIM3_Init+0xdc>)
 8006686:	f7ff ff65 	bl	8006554 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800668a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800668e:	481c      	ldr	r0, [pc, #112]	@ (8006700 <MX_TIM3_Init+0xdc>)
 8006690:	f7ff ff1c 	bl	80064cc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006694:	2360      	movs	r3, #96	@ 0x60
 8006696:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8006698:	2300      	movs	r3, #0
 800669a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 80066a0:	230a      	movs	r3, #10
 80066a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80066a4:	2300      	movs	r3, #0
 80066a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80066a8:	f107 031c 	add.w	r3, r7, #28
 80066ac:	461a      	mov	r2, r3
 80066ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80066b2:	4813      	ldr	r0, [pc, #76]	@ (8006700 <MX_TIM3_Init+0xdc>)
 80066b4:	f005 f908 	bl	800b8c8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80066b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80066bc:	4810      	ldr	r0, [pc, #64]	@ (8006700 <MX_TIM3_Init+0xdc>)
 80066be:	f7ff fec1 	bl	8006444 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80066c2:	2100      	movs	r1, #0
 80066c4:	480e      	ldr	r0, [pc, #56]	@ (8006700 <MX_TIM3_Init+0xdc>)
 80066c6:	f7ff ff5a 	bl	800657e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80066ca:	480d      	ldr	r0, [pc, #52]	@ (8006700 <MX_TIM3_Init+0xdc>)
 80066cc:	f7ff ff6a 	bl	80065a4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80066d0:	2002      	movs	r0, #2
 80066d2:	f7ff ff77 	bl	80065c4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80066d6:	2302      	movs	r3, #2
 80066d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80066da:	2302      	movs	r3, #2
 80066dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80066ea:	2302      	movs	r3, #2
 80066ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4804      	ldr	r0, [pc, #16]	@ (8006704 <MX_TIM3_Init+0xe0>)
 80066f4:	f004 fdab 	bl	800b24e <LL_GPIO_Init>

}
 80066f8:	bf00      	nop
 80066fa:	3750      	adds	r7, #80	@ 0x50
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40000400 	.word	0x40000400
 8006704:	40020400 	.word	0x40020400

08006708 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b094      	sub	sp, #80	@ 0x50
 800670c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800670e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	605a      	str	r2, [r3, #4]
 8006718:	609a      	str	r2, [r3, #8]
 800671a:	60da      	str	r2, [r3, #12]
 800671c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800671e:	f107 031c 	add.w	r3, r7, #28
 8006722:	2220      	movs	r2, #32
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f006 fbfe 	bl	800cf28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800672c:	1d3b      	adds	r3, r7, #4
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	605a      	str	r2, [r3, #4]
 8006734:	609a      	str	r2, [r3, #8]
 8006736:	60da      	str	r2, [r3, #12]
 8006738:	611a      	str	r2, [r3, #16]
 800673a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800673c:	2008      	movs	r0, #8
 800673e:	f7ff ff59 	bl	80065f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006746:	2300      	movs	r3, #0
 8006748:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 41999;
 800674a:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 800674e:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006750:	2300      	movs	r3, #0
 8006752:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8006754:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006758:	4619      	mov	r1, r3
 800675a:	483d      	ldr	r0, [pc, #244]	@ (8006850 <MX_TIM5_Init+0x148>)
 800675c:	f005 f81a 	bl	800b794 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8006760:	483b      	ldr	r0, [pc, #236]	@ (8006850 <MX_TIM5_Init+0x148>)
 8006762:	f7ff fe5e 	bl	8006422 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8006766:	2100      	movs	r1, #0
 8006768:	4839      	ldr	r0, [pc, #228]	@ (8006850 <MX_TIM5_Init+0x148>)
 800676a:	f7ff fef3 	bl	8006554 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 800676e:	2101      	movs	r1, #1
 8006770:	4837      	ldr	r0, [pc, #220]	@ (8006850 <MX_TIM5_Init+0x148>)
 8006772:	f7ff feab 	bl	80064cc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8006776:	2360      	movs	r3, #96	@ 0x60
 8006778:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800677a:	2300      	movs	r3, #0
 800677c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8006782:	2300      	movs	r3, #0
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8006786:	2300      	movs	r3, #0
 8006788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800678a:	f107 031c 	add.w	r3, r7, #28
 800678e:	461a      	mov	r2, r3
 8006790:	2101      	movs	r1, #1
 8006792:	482f      	ldr	r0, [pc, #188]	@ (8006850 <MX_TIM5_Init+0x148>)
 8006794:	f005 f898 	bl	800b8c8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8006798:	2101      	movs	r1, #1
 800679a:	482d      	ldr	r0, [pc, #180]	@ (8006850 <MX_TIM5_Init+0x148>)
 800679c:	f7ff fe52 	bl	8006444 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 80067a0:	2110      	movs	r1, #16
 80067a2:	482b      	ldr	r0, [pc, #172]	@ (8006850 <MX_TIM5_Init+0x148>)
 80067a4:	f7ff fe92 	bl	80064cc <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80067a8:	f107 031c 	add.w	r3, r7, #28
 80067ac:	461a      	mov	r2, r3
 80067ae:	2110      	movs	r1, #16
 80067b0:	4827      	ldr	r0, [pc, #156]	@ (8006850 <MX_TIM5_Init+0x148>)
 80067b2:	f005 f889 	bl	800b8c8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 80067b6:	2110      	movs	r1, #16
 80067b8:	4825      	ldr	r0, [pc, #148]	@ (8006850 <MX_TIM5_Init+0x148>)
 80067ba:	f7ff fe43 	bl	8006444 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80067be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067c2:	4823      	ldr	r0, [pc, #140]	@ (8006850 <MX_TIM5_Init+0x148>)
 80067c4:	f7ff fe82 	bl	80064cc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 31500;
 80067c8:	f647 330c 	movw	r3, #31500	@ 0x7b0c
 80067cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80067ce:	f107 031c 	add.w	r3, r7, #28
 80067d2:	461a      	mov	r2, r3
 80067d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067d8:	481d      	ldr	r0, [pc, #116]	@ (8006850 <MX_TIM5_Init+0x148>)
 80067da:	f005 f875 	bl	800b8c8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 80067de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80067e2:	481b      	ldr	r0, [pc, #108]	@ (8006850 <MX_TIM5_Init+0x148>)
 80067e4:	f7ff fe2e 	bl	8006444 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 80067e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80067ec:	4818      	ldr	r0, [pc, #96]	@ (8006850 <MX_TIM5_Init+0x148>)
 80067ee:	f7ff fe6d 	bl	80064cc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80067f6:	f107 031c 	add.w	r3, r7, #28
 80067fa:	461a      	mov	r2, r3
 80067fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006800:	4813      	ldr	r0, [pc, #76]	@ (8006850 <MX_TIM5_Init+0x148>)
 8006802:	f005 f861 	bl	800b8c8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8006806:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800680a:	4811      	ldr	r0, [pc, #68]	@ (8006850 <MX_TIM5_Init+0x148>)
 800680c:	f7ff fe1a 	bl	8006444 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8006810:	2100      	movs	r1, #0
 8006812:	480f      	ldr	r0, [pc, #60]	@ (8006850 <MX_TIM5_Init+0x148>)
 8006814:	f7ff feb3 	bl	800657e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8006818:	480d      	ldr	r0, [pc, #52]	@ (8006850 <MX_TIM5_Init+0x148>)
 800681a:	f7ff fec3 	bl	80065a4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800681e:	2001      	movs	r0, #1
 8006820:	f7ff fed0 	bl	80065c4 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8006824:	230f      	movs	r3, #15
 8006826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006828:	2302      	movs	r3, #2
 800682a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8006838:	2302      	movs	r3, #2
 800683a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800683c:	1d3b      	adds	r3, r7, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4804      	ldr	r0, [pc, #16]	@ (8006854 <MX_TIM5_Init+0x14c>)
 8006842:	f004 fd04 	bl	800b24e <LL_GPIO_Init>

}
 8006846:	bf00      	nop
 8006848:	3750      	adds	r7, #80	@ 0x50
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40000c00 	.word	0x40000c00
 8006854:	40020000 	.word	0x40020000

08006858 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800685e:	1d3b      	adds	r3, r7, #4
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800686c:	2020      	movs	r0, #32
 800686e:	f7ff fec1 	bl	80065f4 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006872:	f7ff fd4d 	bl	8006310 <__NVIC_GetPriorityGrouping>
 8006876:	4603      	mov	r3, r0
 8006878:	2200      	movs	r2, #0
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fd9d 	bl	80063bc <NVIC_EncodePriority>
 8006882:	4603      	mov	r3, r0
 8006884:	4619      	mov	r1, r3
 8006886:	2037      	movs	r0, #55	@ 0x37
 8006888:	f7ff fd6e 	bl	8006368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 800688c:	2037      	movs	r0, #55	@ 0x37
 800688e:	f7ff fd4d 	bl	800632c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8006892:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8006896:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006898:	2300      	movs	r3, #0
 800689a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 800689c:	2301      	movs	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4808      	ldr	r0, [pc, #32]	@ (80068c8 <MX_TIM7_Init+0x70>)
 80068a6:	f004 ff75 	bl	800b794 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 80068aa:	4807      	ldr	r0, [pc, #28]	@ (80068c8 <MX_TIM7_Init+0x70>)
 80068ac:	f7ff fdb9 	bl	8006422 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 80068b0:	2100      	movs	r1, #0
 80068b2:	4805      	ldr	r0, [pc, #20]	@ (80068c8 <MX_TIM7_Init+0x70>)
 80068b4:	f7ff fe63 	bl	800657e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80068b8:	4803      	ldr	r0, [pc, #12]	@ (80068c8 <MX_TIM7_Init+0x70>)
 80068ba:	f7ff fe73 	bl	80065a4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80068be:	bf00      	nop
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40001400 	.word	0x40001400

080068cc <__NVIC_GetPriorityGrouping>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068d0:	4b04      	ldr	r3, [pc, #16]	@ (80068e4 <__NVIC_GetPriorityGrouping+0x18>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	0a1b      	lsrs	r3, r3, #8
 80068d6:	f003 0307 	and.w	r3, r3, #7
}
 80068da:	4618      	mov	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	e000ed00 	.word	0xe000ed00

080068e8 <__NVIC_EnableIRQ>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	db0b      	blt.n	8006912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	f003 021f 	and.w	r2, r3, #31
 8006900:	4907      	ldr	r1, [pc, #28]	@ (8006920 <__NVIC_EnableIRQ+0x38>)
 8006902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	2001      	movs	r0, #1
 800690a:	fa00 f202 	lsl.w	r2, r0, r2
 800690e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	e000e100 	.word	0xe000e100

08006924 <__NVIC_SetPriority>:
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	6039      	str	r1, [r7, #0]
 800692e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006934:	2b00      	cmp	r3, #0
 8006936:	db0a      	blt.n	800694e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	490c      	ldr	r1, [pc, #48]	@ (8006970 <__NVIC_SetPriority+0x4c>)
 800693e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006942:	0112      	lsls	r2, r2, #4
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	440b      	add	r3, r1
 8006948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800694c:	e00a      	b.n	8006964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	4908      	ldr	r1, [pc, #32]	@ (8006974 <__NVIC_SetPriority+0x50>)
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	3b04      	subs	r3, #4
 800695c:	0112      	lsls	r2, r2, #4
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	440b      	add	r3, r1
 8006962:	761a      	strb	r2, [r3, #24]
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	e000e100 	.word	0xe000e100
 8006974:	e000ed00 	.word	0xe000ed00

08006978 <NVIC_EncodePriority>:
{
 8006978:	b480      	push	{r7}
 800697a:	b089      	sub	sp, #36	@ 0x24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f1c3 0307 	rsb	r3, r3, #7
 8006992:	2b04      	cmp	r3, #4
 8006994:	bf28      	it	cs
 8006996:	2304      	movcs	r3, #4
 8006998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	3304      	adds	r3, #4
 800699e:	2b06      	cmp	r3, #6
 80069a0:	d902      	bls.n	80069a8 <NVIC_EncodePriority+0x30>
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	3b03      	subs	r3, #3
 80069a6:	e000      	b.n	80069aa <NVIC_EncodePriority+0x32>
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069ac:	f04f 32ff 	mov.w	r2, #4294967295
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	fa02 f303 	lsl.w	r3, r2, r3
 80069b6:	43da      	mvns	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	401a      	ands	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069c0:	f04f 31ff 	mov.w	r1, #4294967295
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ca:	43d9      	mvns	r1, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d0:	4313      	orrs	r3, r2
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3724      	adds	r7, #36	@ 0x24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <LL_USART_Enable>:
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60da      	str	r2, [r3, #12]
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <LL_USART_ConfigAsyncMode>:
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	615a      	str	r2, [r3, #20]
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <LL_AHB1_GRP1_EnableClock>:
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006a34:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a38:	4907      	ldr	r1, [pc, #28]	@ (8006a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006a40:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4013      	ands	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40023800 	.word	0x40023800

08006a5c <LL_APB1_GRP1_EnableClock>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8006a64:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006a66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a68:	4907      	ldr	r1, [pc, #28]	@ (8006a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006a72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4013      	ands	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	40023800 	.word	0x40023800

08006a8c <LL_APB2_GRP1_EnableClock>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006a94:	4b08      	ldr	r3, [pc, #32]	@ (8006ab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006a96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a98:	4907      	ldr	r1, [pc, #28]	@ (8006ab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40023800 	.word	0x40023800

08006abc <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	@ 0x38
 8006ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006ac2:	f107 031c 	add.w	r3, r7, #28
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	605a      	str	r2, [r3, #4]
 8006acc:	609a      	str	r2, [r3, #8]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	611a      	str	r2, [r3, #16]
 8006ad2:	615a      	str	r2, [r3, #20]
 8006ad4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad6:	1d3b      	adds	r3, r7, #4
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	605a      	str	r2, [r3, #4]
 8006ade:	609a      	str	r2, [r3, #8]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	611a      	str	r2, [r3, #16]
 8006ae4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8006ae6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006aea:	f7ff ffb7 	bl	8006a5c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006aee:	2004      	movs	r0, #4
 8006af0:	f7ff ff9c 	bl	8006a2c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8006af4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006afa:	2302      	movs	r3, #2
 8006afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006afe:	2303      	movs	r3, #3
 8006b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	4619      	mov	r1, r3
 8006b12:	4819      	ldr	r0, [pc, #100]	@ (8006b78 <MX_UART4_Init+0xbc>)
 8006b14:	f004 fb9b 	bl	800b24e <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006b18:	f7ff fed8 	bl	80068cc <__NVIC_GetPriorityGrouping>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff ff28 	bl	8006978 <NVIC_EncodePriority>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	2034      	movs	r0, #52	@ 0x34
 8006b2e:	f7ff fef9 	bl	8006924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8006b32:	2034      	movs	r0, #52	@ 0x34
 8006b34:	f7ff fed8 	bl	80068e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8006b38:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8006b3c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006b52:	2300      	movs	r3, #0
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8006b56:	f107 031c 	add.w	r3, r7, #28
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4807      	ldr	r0, [pc, #28]	@ (8006b7c <MX_UART4_Init+0xc0>)
 8006b5e:	f005 fb01 	bl	800c164 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8006b62:	4806      	ldr	r0, [pc, #24]	@ (8006b7c <MX_UART4_Init+0xc0>)
 8006b64:	f7ff ff4b 	bl	80069fe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8006b68:	4804      	ldr	r0, [pc, #16]	@ (8006b7c <MX_UART4_Init+0xc0>)
 8006b6a:	f7ff ff38 	bl	80069de <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006b6e:	bf00      	nop
 8006b70:	3738      	adds	r7, #56	@ 0x38
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	40020800 	.word	0x40020800
 8006b7c:	40004c00 	.word	0x40004c00

08006b80 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08e      	sub	sp, #56	@ 0x38
 8006b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006b86:	f107 031c 	add.w	r3, r7, #28
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	605a      	str	r2, [r3, #4]
 8006b90:	609a      	str	r2, [r3, #8]
 8006b92:	60da      	str	r2, [r3, #12]
 8006b94:	611a      	str	r2, [r3, #16]
 8006b96:	615a      	str	r2, [r3, #20]
 8006b98:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9a:	1d3b      	adds	r3, r7, #4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	611a      	str	r2, [r3, #16]
 8006ba8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8006baa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006bae:	f7ff ff55 	bl	8006a5c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006bb2:	2004      	movs	r0, #4
 8006bb4:	f7ff ff3a 	bl	8006a2c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8006bb8:	2008      	movs	r0, #8
 8006bba:	f7ff ff37 	bl	8006a2c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8006bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bd8:	1d3b      	adds	r3, r7, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4821      	ldr	r0, [pc, #132]	@ (8006c64 <MX_UART5_Init+0xe4>)
 8006bde:	f004 fb36 	bl	800b24e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8006be2:	2304      	movs	r3, #4
 8006be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006be6:	2302      	movs	r3, #2
 8006be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006bea:	2303      	movs	r3, #3
 8006bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	481a      	ldr	r0, [pc, #104]	@ (8006c68 <MX_UART5_Init+0xe8>)
 8006c00:	f004 fb25 	bl	800b24e <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006c04:	f7ff fe62 	bl	80068cc <__NVIC_GetPriorityGrouping>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff feb2 	bl	8006978 <NVIC_EncodePriority>
 8006c14:	4603      	mov	r3, r0
 8006c16:	4619      	mov	r1, r3
 8006c18:	2035      	movs	r0, #53	@ 0x35
 8006c1a:	f7ff fe83 	bl	8006924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8006c1e:	2035      	movs	r0, #53	@ 0x35
 8006c20:	f7ff fe62 	bl	80068e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8006c24:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006c28:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8006c36:	2304      	movs	r3, #4
 8006c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8006c42:	f107 031c 	add.w	r3, r7, #28
 8006c46:	4619      	mov	r1, r3
 8006c48:	4808      	ldr	r0, [pc, #32]	@ (8006c6c <MX_UART5_Init+0xec>)
 8006c4a:	f005 fa8b 	bl	800c164 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8006c4e:	4807      	ldr	r0, [pc, #28]	@ (8006c6c <MX_UART5_Init+0xec>)
 8006c50:	f7ff fed5 	bl	80069fe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8006c54:	4805      	ldr	r0, [pc, #20]	@ (8006c6c <MX_UART5_Init+0xec>)
 8006c56:	f7ff fec2 	bl	80069de <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006c5a:	bf00      	nop
 8006c5c:	3738      	adds	r7, #56	@ 0x38
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40020800 	.word	0x40020800
 8006c68:	40020c00 	.word	0x40020c00
 8006c6c:	40005000 	.word	0x40005000

08006c70 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006c74:	4b11      	ldr	r3, [pc, #68]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006c76:	4a12      	ldr	r2, [pc, #72]	@ (8006cc0 <MX_USART1_UART_Init+0x50>)
 8006c78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006c7a:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006c80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006c82:	4b0e      	ldr	r3, [pc, #56]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006c88:	4b0c      	ldr	r3, [pc, #48]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006c94:	4b09      	ldr	r3, [pc, #36]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006c96:	220c      	movs	r2, #12
 8006c98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c9a:	4b08      	ldr	r3, [pc, #32]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ca0:	4b06      	ldr	r3, [pc, #24]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006ca6:	4805      	ldr	r0, [pc, #20]	@ (8006cbc <MX_USART1_UART_Init+0x4c>)
 8006ca8:	f003 f8fa 	bl	8009ea0 <HAL_UART_Init>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006cb2:	f7fe ff36 	bl	8005b22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200005e8 	.word	0x200005e8
 8006cc0:	40011000 	.word	0x40011000

08006cc4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08e      	sub	sp, #56	@ 0x38
 8006cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006cca:	f107 031c 	add.w	r3, r7, #28
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	605a      	str	r2, [r3, #4]
 8006cd4:	609a      	str	r2, [r3, #8]
 8006cd6:	60da      	str	r2, [r3, #12]
 8006cd8:	611a      	str	r2, [r3, #16]
 8006cda:	615a      	str	r2, [r3, #20]
 8006cdc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cde:	1d3b      	adds	r3, r7, #4
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	605a      	str	r2, [r3, #4]
 8006ce6:	609a      	str	r2, [r3, #8]
 8006ce8:	60da      	str	r2, [r3, #12]
 8006cea:	611a      	str	r2, [r3, #16]
 8006cec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8006cee:	2020      	movs	r0, #32
 8006cf0:	f7ff fecc 	bl	8006a8c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006cf4:	2004      	movs	r0, #4
 8006cf6:	f7ff fe99 	bl	8006a2c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8006cfa:	23c0      	movs	r3, #192	@ 0xc0
 8006cfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006d02:	2303      	movs	r3, #3
 8006d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006d0e:	2308      	movs	r3, #8
 8006d10:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d12:	1d3b      	adds	r3, r7, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4819      	ldr	r0, [pc, #100]	@ (8006d7c <MX_USART6_UART_Init+0xb8>)
 8006d18:	f004 fa99 	bl	800b24e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006d1c:	f7ff fdd6 	bl	80068cc <__NVIC_GetPriorityGrouping>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2200      	movs	r2, #0
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fe26 	bl	8006978 <NVIC_EncodePriority>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4619      	mov	r1, r3
 8006d30:	2047      	movs	r0, #71	@ 0x47
 8006d32:	f7ff fdf7 	bl	8006924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8006d36:	2047      	movs	r0, #71	@ 0x47
 8006d38:	f7ff fdd6 	bl	80068e8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8006d3c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006d40:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006d42:	2300      	movs	r3, #0
 8006d44:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006d4e:	230c      	movs	r3, #12
 8006d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006d56:	2300      	movs	r3, #0
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8006d5a:	f107 031c 	add.w	r3, r7, #28
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4807      	ldr	r0, [pc, #28]	@ (8006d80 <MX_USART6_UART_Init+0xbc>)
 8006d62:	f005 f9ff 	bl	800c164 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8006d66:	4806      	ldr	r0, [pc, #24]	@ (8006d80 <MX_USART6_UART_Init+0xbc>)
 8006d68:	f7ff fe49 	bl	80069fe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8006d6c:	4804      	ldr	r0, [pc, #16]	@ (8006d80 <MX_USART6_UART_Init+0xbc>)
 8006d6e:	f7ff fe36 	bl	80069de <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006d72:	bf00      	nop
 8006d74:	3738      	adds	r7, #56	@ 0x38
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40020800 	.word	0x40020800
 8006d80:	40011400 	.word	0x40011400

08006d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	@ 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	605a      	str	r2, [r3, #4]
 8006d96:	609a      	str	r2, [r3, #8]
 8006d98:	60da      	str	r2, [r3, #12]
 8006d9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e18 <HAL_UART_MspInit+0x94>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d134      	bne.n	8006e10 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	4b1c      	ldr	r3, [pc, #112]	@ (8006e1c <HAL_UART_MspInit+0x98>)
 8006dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dae:	4a1b      	ldr	r2, [pc, #108]	@ (8006e1c <HAL_UART_MspInit+0x98>)
 8006db0:	f043 0310 	orr.w	r3, r3, #16
 8006db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006db6:	4b19      	ldr	r3, [pc, #100]	@ (8006e1c <HAL_UART_MspInit+0x98>)
 8006db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	4b15      	ldr	r3, [pc, #84]	@ (8006e1c <HAL_UART_MspInit+0x98>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	4a14      	ldr	r2, [pc, #80]	@ (8006e1c <HAL_UART_MspInit+0x98>)
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dd2:	4b12      	ldr	r3, [pc, #72]	@ (8006e1c <HAL_UART_MspInit+0x98>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006dde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de4:	2302      	movs	r3, #2
 8006de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dec:	2303      	movs	r3, #3
 8006dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006df0:	2307      	movs	r3, #7
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006df4:	f107 0314 	add.w	r3, r7, #20
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4809      	ldr	r0, [pc, #36]	@ (8006e20 <HAL_UART_MspInit+0x9c>)
 8006dfc:	f001 f9f8 	bl	80081f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006e00:	2200      	movs	r2, #0
 8006e02:	2100      	movs	r1, #0
 8006e04:	2025      	movs	r0, #37	@ 0x25
 8006e06:	f000 fdba 	bl	800797e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006e0a:	2025      	movs	r0, #37	@ 0x25
 8006e0c:	f000 fdd3 	bl	80079b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e10:	bf00      	nop
 8006e12:	3728      	adds	r7, #40	@ 0x28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40011000 	.word	0x40011000
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40020000 	.word	0x40020000

08006e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006e28:	f7ff fa60 	bl	80062ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e2c:	480c      	ldr	r0, [pc, #48]	@ (8006e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006e2e:	490d      	ldr	r1, [pc, #52]	@ (8006e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006e30:	4a0d      	ldr	r2, [pc, #52]	@ (8006e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e34:	e002      	b.n	8006e3c <LoopCopyDataInit>

08006e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e3a:	3304      	adds	r3, #4

08006e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e40:	d3f9      	bcc.n	8006e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e42:	4a0a      	ldr	r2, [pc, #40]	@ (8006e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006e44:	4c0a      	ldr	r4, [pc, #40]	@ (8006e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e48:	e001      	b.n	8006e4e <LoopFillZerobss>

08006e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e4c:	3204      	adds	r2, #4

08006e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e50:	d3fb      	bcc.n	8006e4a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006e52:	f006 f8c1 	bl	800cfd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e56:	f7fc fd9b 	bl	8003990 <main>
  bx  lr    
 8006e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e64:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006e68:	080100b0 	.word	0x080100b0
  ldr r2, =_sbss
 8006e6c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006e70:	20000780 	.word	0x20000780

08006e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e74:	e7fe      	b.n	8006e74 <ADC_IRQHandler>
	...

08006e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <HAL_Init+0x40>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb8 <HAL_Init+0x40>)
 8006e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e88:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb8 <HAL_Init+0x40>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb8 <HAL_Init+0x40>)
 8006e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e94:	4b08      	ldr	r3, [pc, #32]	@ (8006eb8 <HAL_Init+0x40>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a07      	ldr	r2, [pc, #28]	@ (8006eb8 <HAL_Init+0x40>)
 8006e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ea0:	2003      	movs	r0, #3
 8006ea2:	f000 fd61 	bl	8007968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ea6:	200f      	movs	r0, #15
 8006ea8:	f000 f808 	bl	8006ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006eac:	f7fe ff92 	bl	8005dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023c00 	.word	0x40023c00

08006ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ec4:	4b12      	ldr	r3, [pc, #72]	@ (8006f10 <HAL_InitTick+0x54>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	4b12      	ldr	r3, [pc, #72]	@ (8006f14 <HAL_InitTick+0x58>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fd79 	bl	80079d2 <HAL_SYSTICK_Config>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e00e      	b.n	8006f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b0f      	cmp	r3, #15
 8006eee:	d80a      	bhi.n	8006f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	f000 fd41 	bl	800797e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006efc:	4a06      	ldr	r2, [pc, #24]	@ (8006f18 <HAL_InitTick+0x5c>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e000      	b.n	8006f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000004 	.word	0x20000004
 8006f14:	2000000c 	.word	0x2000000c
 8006f18:	20000008 	.word	0x20000008

08006f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f20:	4b06      	ldr	r3, [pc, #24]	@ (8006f3c <HAL_IncTick+0x20>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <HAL_IncTick+0x24>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	4a04      	ldr	r2, [pc, #16]	@ (8006f40 <HAL_IncTick+0x24>)
 8006f2e:	6013      	str	r3, [r2, #0]
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000000c 	.word	0x2000000c
 8006f40:	20000630 	.word	0x20000630

08006f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  return uwTick;
 8006f48:	4b03      	ldr	r3, [pc, #12]	@ (8006f58 <HAL_GetTick+0x14>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000630 	.word	0x20000630

08006f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f64:	f7ff ffee 	bl	8006f44 <HAL_GetTick>
 8006f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d005      	beq.n	8006f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f76:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <HAL_Delay+0x44>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f82:	bf00      	nop
 8006f84:	f7ff ffde 	bl	8006f44 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d8f7      	bhi.n	8006f84 <HAL_Delay+0x28>
  {
  }
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2000000c 	.word	0x2000000c

08006fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e033      	b.n	8007022 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fc fa3e 	bl	8003444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d118      	bne.n	8007014 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006fea:	f023 0302 	bic.w	r3, r3, #2
 8006fee:	f043 0202 	orr.w	r2, r3, #2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa68 	bl	80074cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	f043 0201 	orr.w	r2, r3, #1
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	641a      	str	r2, [r3, #64]	@ 0x40
 8007012:	e001      	b.n	8007018 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_ADC_Start_DMA+0x1e>
 8007046:	2302      	movs	r3, #2
 8007048:	e0e9      	b.n	800721e <HAL_ADC_Start_DMA+0x1f2>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	d018      	beq.n	8007092 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007070:	4b6d      	ldr	r3, [pc, #436]	@ (8007228 <HAL_ADC_Start_DMA+0x1fc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a6d      	ldr	r2, [pc, #436]	@ (800722c <HAL_ADC_Start_DMA+0x200>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	0c9a      	lsrs	r2, r3, #18
 800707c:	4613      	mov	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	4413      	add	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8007084:	e002      	b.n	800708c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	3b01      	subs	r3, #1
 800708a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f9      	bne.n	8007086 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800709c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070a0:	d107      	bne.n	80070b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070b0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	f040 80a1 	bne.w	8007204 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80070ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007100:	d106      	bne.n	8007110 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007106:	f023 0206 	bic.w	r2, r3, #6
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	645a      	str	r2, [r3, #68]	@ 0x44
 800710e:	e002      	b.n	8007116 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800711e:	4b44      	ldr	r3, [pc, #272]	@ (8007230 <HAL_ADC_Start_DMA+0x204>)
 8007120:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	4a43      	ldr	r2, [pc, #268]	@ (8007234 <HAL_ADC_Start_DMA+0x208>)
 8007128:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	4a42      	ldr	r2, [pc, #264]	@ (8007238 <HAL_ADC_Start_DMA+0x20c>)
 8007130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007136:	4a41      	ldr	r2, [pc, #260]	@ (800723c <HAL_ADC_Start_DMA+0x210>)
 8007138:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007142:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007152:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007162:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	334c      	adds	r3, #76	@ 0x4c
 800716e:	4619      	mov	r1, r3
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f000 fce8 	bl	8007b48 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2b00      	cmp	r3, #0
 8007182:	d12a      	bne.n	80071da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a2d      	ldr	r2, [pc, #180]	@ (8007240 <HAL_ADC_Start_DMA+0x214>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d015      	beq.n	80071ba <HAL_ADC_Start_DMA+0x18e>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2c      	ldr	r2, [pc, #176]	@ (8007244 <HAL_ADC_Start_DMA+0x218>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d105      	bne.n	80071a4 <HAL_ADC_Start_DMA+0x178>
 8007198:	4b25      	ldr	r3, [pc, #148]	@ (8007230 <HAL_ADC_Start_DMA+0x204>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a27      	ldr	r2, [pc, #156]	@ (8007248 <HAL_ADC_Start_DMA+0x21c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d136      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
 80071ae:	4b20      	ldr	r3, [pc, #128]	@ (8007230 <HAL_ADC_Start_DMA+0x204>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d130      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d129      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	e020      	b.n	800721c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a18      	ldr	r2, [pc, #96]	@ (8007240 <HAL_ADC_Start_DMA+0x214>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d11b      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d114      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007200:	609a      	str	r2, [r3, #8]
 8007202:	e00b      	b.n	800721c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007208:	f043 0210 	orr.w	r2, r3, #16
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007214:	f043 0201 	orr.w	r2, r3, #1
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000004 	.word	0x20000004
 800722c:	431bde83 	.word	0x431bde83
 8007230:	40012300 	.word	0x40012300
 8007234:	080076c5 	.word	0x080076c5
 8007238:	0800777f 	.word	0x0800777f
 800723c:	0800779b 	.word	0x0800779b
 8007240:	40012000 	.word	0x40012000
 8007244:	40012100 	.word	0x40012100
 8007248:	40012200 	.word	0x40012200

0800724c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_ADC_ConfigChannel+0x1c>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e105      	b.n	80074b0 <HAL_ADC_ConfigChannel+0x228>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b09      	cmp	r3, #9
 80072b2:	d925      	bls.n	8007300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68d9      	ldr	r1, [r3, #12]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	4613      	mov	r3, r2
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	4413      	add	r3, r2
 80072c8:	3b1e      	subs	r3, #30
 80072ca:	2207      	movs	r2, #7
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	43da      	mvns	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	400a      	ands	r2, r1
 80072d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68d9      	ldr	r1, [r3, #12]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	4618      	mov	r0, r3
 80072ec:	4603      	mov	r3, r0
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	4403      	add	r3, r0
 80072f2:	3b1e      	subs	r3, #30
 80072f4:	409a      	lsls	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	60da      	str	r2, [r3, #12]
 80072fe:	e022      	b.n	8007346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6919      	ldr	r1, [r3, #16]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	2207      	movs	r2, #7
 8007316:	fa02 f303 	lsl.w	r3, r2, r3
 800731a:	43da      	mvns	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	400a      	ands	r2, r1
 8007322:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6919      	ldr	r1, [r3, #16]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	4618      	mov	r0, r3
 8007336:	4603      	mov	r3, r0
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4403      	add	r3, r0
 800733c:	409a      	lsls	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b06      	cmp	r3, #6
 800734c:	d824      	bhi.n	8007398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	3b05      	subs	r3, #5
 8007360:	221f      	movs	r2, #31
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	43da      	mvns	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	400a      	ands	r2, r1
 800736e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	4618      	mov	r0, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	3b05      	subs	r3, #5
 800738a:	fa00 f203 	lsl.w	r2, r0, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	635a      	str	r2, [r3, #52]	@ 0x34
 8007396:	e04c      	b.n	8007432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d824      	bhi.n	80073ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	3b23      	subs	r3, #35	@ 0x23
 80073b2:	221f      	movs	r2, #31
 80073b4:	fa02 f303 	lsl.w	r3, r2, r3
 80073b8:	43da      	mvns	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	400a      	ands	r2, r1
 80073c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	4618      	mov	r0, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	3b23      	subs	r3, #35	@ 0x23
 80073dc:	fa00 f203 	lsl.w	r2, r0, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80073e8:	e023      	b.n	8007432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	3b41      	subs	r3, #65	@ 0x41
 80073fc:	221f      	movs	r2, #31
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43da      	mvns	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	400a      	ands	r2, r1
 800740a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	4618      	mov	r0, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	3b41      	subs	r3, #65	@ 0x41
 8007426:	fa00 f203 	lsl.w	r2, r0, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007432:	4b22      	ldr	r3, [pc, #136]	@ (80074bc <HAL_ADC_ConfigChannel+0x234>)
 8007434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a21      	ldr	r2, [pc, #132]	@ (80074c0 <HAL_ADC_ConfigChannel+0x238>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d109      	bne.n	8007454 <HAL_ADC_ConfigChannel+0x1cc>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b12      	cmp	r3, #18
 8007446:	d105      	bne.n	8007454 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <HAL_ADC_ConfigChannel+0x238>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d123      	bne.n	80074a6 <HAL_ADC_ConfigChannel+0x21e>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b10      	cmp	r3, #16
 8007464:	d003      	beq.n	800746e <HAL_ADC_ConfigChannel+0x1e6>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b11      	cmp	r3, #17
 800746c:	d11b      	bne.n	80074a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b10      	cmp	r3, #16
 8007480:	d111      	bne.n	80074a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007482:	4b10      	ldr	r3, [pc, #64]	@ (80074c4 <HAL_ADC_ConfigChannel+0x23c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a10      	ldr	r2, [pc, #64]	@ (80074c8 <HAL_ADC_ConfigChannel+0x240>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	0c9a      	lsrs	r2, r3, #18
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007498:	e002      	b.n	80074a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	3b01      	subs	r3, #1
 800749e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f9      	bne.n	800749a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	40012300 	.word	0x40012300
 80074c0:	40012000 	.word	0x40012000
 80074c4:	20000004 	.word	0x20000004
 80074c8:	431bde83 	.word	0x431bde83

080074cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074d4:	4b79      	ldr	r3, [pc, #484]	@ (80076bc <ADC_Init+0x1f0>)
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	431a      	orrs	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6859      	ldr	r1, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	021a      	lsls	r2, r3, #8
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6859      	ldr	r1, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6899      	ldr	r1, [r3, #8]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755e:	4a58      	ldr	r2, [pc, #352]	@ (80076c0 <ADC_Init+0x1f4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007572:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6899      	ldr	r1, [r3, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6899      	ldr	r1, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
 80075a8:	e00f      	b.n	80075ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80075b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80075c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0202 	bic.w	r2, r2, #2
 80075d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6899      	ldr	r1, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	7e1b      	ldrb	r3, [r3, #24]
 80075e4:	005a      	lsls	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01b      	beq.n	8007630 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007606:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007616:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6859      	ldr	r1, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007622:	3b01      	subs	r3, #1
 8007624:	035a      	lsls	r2, r3, #13
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	605a      	str	r2, [r3, #4]
 800762e:	e007      	b.n	8007640 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800763e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800764e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	3b01      	subs	r3, #1
 800765c:	051a      	lsls	r2, r3, #20
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6899      	ldr	r1, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007682:	025a      	lsls	r2, r3, #9
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800769a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6899      	ldr	r1, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	029a      	lsls	r2, r3, #10
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	40012300 	.word	0x40012300
 80076c0:	0f000001 	.word	0x0f000001

080076c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d13c      	bne.n	8007758 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d12b      	bne.n	8007750 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d127      	bne.n	8007750 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007706:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800770a:	2b00      	cmp	r3, #0
 800770c:	d006      	beq.n	800771c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007718:	2b00      	cmp	r3, #0
 800771a:	d119      	bne.n	8007750 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0220 	bic.w	r2, r2, #32
 800772a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d105      	bne.n	8007750 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	f043 0201 	orr.w	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fd7b 	bl	800724c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007756:	e00e      	b.n	8007776 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	f003 0310 	and.w	r3, r3, #16
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff fd85 	bl	8007274 <HAL_ADC_ErrorCallback>
}
 800776a:	e004      	b.n	8007776 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fd67 	bl	8007260 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2240      	movs	r2, #64	@ 0x40
 80077ac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b2:	f043 0204 	orr.w	r2, r3, #4
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fd5a 	bl	8007274 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077c0:	bf00      	nop
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <__NVIC_SetPriorityGrouping>:
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f003 0307 	and.w	r3, r3, #7
 80077d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077d8:	4b0c      	ldr	r3, [pc, #48]	@ (800780c <__NVIC_SetPriorityGrouping+0x44>)
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077e4:	4013      	ands	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80077f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077fa:	4a04      	ldr	r2, [pc, #16]	@ (800780c <__NVIC_SetPriorityGrouping+0x44>)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	60d3      	str	r3, [r2, #12]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	e000ed00 	.word	0xe000ed00

08007810 <__NVIC_GetPriorityGrouping>:
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007814:	4b04      	ldr	r3, [pc, #16]	@ (8007828 <__NVIC_GetPriorityGrouping+0x18>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	f003 0307 	and.w	r3, r3, #7
}
 800781e:	4618      	mov	r0, r3
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	e000ed00 	.word	0xe000ed00

0800782c <__NVIC_EnableIRQ>:
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800783a:	2b00      	cmp	r3, #0
 800783c:	db0b      	blt.n	8007856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	f003 021f 	and.w	r2, r3, #31
 8007844:	4907      	ldr	r1, [pc, #28]	@ (8007864 <__NVIC_EnableIRQ+0x38>)
 8007846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	2001      	movs	r0, #1
 800784e:	fa00 f202 	lsl.w	r2, r0, r2
 8007852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	e000e100 	.word	0xe000e100

08007868 <__NVIC_SetPriority>:
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007878:	2b00      	cmp	r3, #0
 800787a:	db0a      	blt.n	8007892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	b2da      	uxtb	r2, r3
 8007880:	490c      	ldr	r1, [pc, #48]	@ (80078b4 <__NVIC_SetPriority+0x4c>)
 8007882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007886:	0112      	lsls	r2, r2, #4
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	440b      	add	r3, r1
 800788c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007890:	e00a      	b.n	80078a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	4908      	ldr	r1, [pc, #32]	@ (80078b8 <__NVIC_SetPriority+0x50>)
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	3b04      	subs	r3, #4
 80078a0:	0112      	lsls	r2, r2, #4
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	440b      	add	r3, r1
 80078a6:	761a      	strb	r2, [r3, #24]
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	e000e100 	.word	0xe000e100
 80078b8:	e000ed00 	.word	0xe000ed00

080078bc <NVIC_EncodePriority>:
{
 80078bc:	b480      	push	{r7}
 80078be:	b089      	sub	sp, #36	@ 0x24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f1c3 0307 	rsb	r3, r3, #7
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	bf28      	it	cs
 80078da:	2304      	movcs	r3, #4
 80078dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3304      	adds	r3, #4
 80078e2:	2b06      	cmp	r3, #6
 80078e4:	d902      	bls.n	80078ec <NVIC_EncodePriority+0x30>
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	3b03      	subs	r3, #3
 80078ea:	e000      	b.n	80078ee <NVIC_EncodePriority+0x32>
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078f0:	f04f 32ff 	mov.w	r2, #4294967295
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	fa02 f303 	lsl.w	r3, r2, r3
 80078fa:	43da      	mvns	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	401a      	ands	r2, r3
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007904:	f04f 31ff 	mov.w	r1, #4294967295
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	fa01 f303 	lsl.w	r3, r1, r3
 800790e:	43d9      	mvns	r1, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007914:	4313      	orrs	r3, r2
}
 8007916:	4618      	mov	r0, r3
 8007918:	3724      	adds	r7, #36	@ 0x24
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
	...

08007924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3b01      	subs	r3, #1
 8007930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007934:	d301      	bcc.n	800793a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007936:	2301      	movs	r3, #1
 8007938:	e00f      	b.n	800795a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800793a:	4a0a      	ldr	r2, [pc, #40]	@ (8007964 <SysTick_Config+0x40>)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3b01      	subs	r3, #1
 8007940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007942:	210f      	movs	r1, #15
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	f7ff ff8e 	bl	8007868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800794c:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <SysTick_Config+0x40>)
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007952:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <SysTick_Config+0x40>)
 8007954:	2207      	movs	r2, #7
 8007956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	e000e010 	.word	0xe000e010

08007968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff ff29 	bl	80077c8 <__NVIC_SetPriorityGrouping>
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800797e:	b580      	push	{r7, lr}
 8007980:	b086      	sub	sp, #24
 8007982:	af00      	add	r7, sp, #0
 8007984:	4603      	mov	r3, r0
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007990:	f7ff ff3e 	bl	8007810 <__NVIC_GetPriorityGrouping>
 8007994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	6978      	ldr	r0, [r7, #20]
 800799c:	f7ff ff8e 	bl	80078bc <NVIC_EncodePriority>
 80079a0:	4602      	mov	r2, r0
 80079a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff ff5d 	bl	8007868 <__NVIC_SetPriority>
}
 80079ae:	bf00      	nop
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	4603      	mov	r3, r0
 80079be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff ff31 	bl	800782c <__NVIC_EnableIRQ>
}
 80079ca:	bf00      	nop
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff ffa2 	bl	8007924 <SysTick_Config>
 80079e0:	4603      	mov	r3, r0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80079f8:	f7ff faa4 	bl	8006f44 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e099      	b.n	8007b3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0201 	bic.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a28:	e00f      	b.n	8007a4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a2a:	f7ff fa8b 	bl	8006f44 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b05      	cmp	r3, #5
 8007a36:	d908      	bls.n	8007a4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2203      	movs	r2, #3
 8007a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e078      	b.n	8007b3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e8      	bne.n	8007a2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4b38      	ldr	r3, [pc, #224]	@ (8007b44 <HAL_DMA_Init+0x158>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d107      	bne.n	8007ab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aac:	4313      	orrs	r3, r2
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	d117      	bne.n	8007b0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00e      	beq.n	8007b0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fb01 	bl	80080f8 <DMA_CheckFifoParam>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d008      	beq.n	8007b0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2240      	movs	r2, #64	@ 0x40
 8007b00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e016      	b.n	8007b3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fab8 	bl	800808c <DMA_CalcBaseAndBitshift>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b24:	223f      	movs	r2, #63	@ 0x3f
 8007b26:	409a      	lsls	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	f010803f 	.word	0xf010803f

08007b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_DMA_Start_IT+0x26>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e040      	b.n	8007bf0 <HAL_DMA_Start_IT+0xa8>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d12f      	bne.n	8007be2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2202      	movs	r2, #2
 8007b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	68b9      	ldr	r1, [r7, #8]
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 fa4a 	bl	8008030 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ba0:	223f      	movs	r2, #63	@ 0x3f
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0216 	orr.w	r2, r2, #22
 8007bb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d007      	beq.n	8007bd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0208 	orr.w	r2, r2, #8
 8007bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0201 	orr.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e005      	b.n	8007bee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007bea:	2302      	movs	r3, #2
 8007bec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007c06:	f7ff f99d 	bl	8006f44 <HAL_GetTick>
 8007c0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d008      	beq.n	8007c2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2280      	movs	r2, #128	@ 0x80
 8007c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e052      	b.n	8007cd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0216 	bic.w	r2, r2, #22
 8007c38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	695a      	ldr	r2, [r3, #20]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d103      	bne.n	8007c5a <HAL_DMA_Abort+0x62>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0208 	bic.w	r2, r2, #8
 8007c68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c7a:	e013      	b.n	8007ca4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c7c:	f7ff f962 	bl	8006f44 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	d90c      	bls.n	8007ca4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2203      	movs	r2, #3
 8007c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e015      	b.n	8007cd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1e4      	bne.n	8007c7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb6:	223f      	movs	r2, #63	@ 0x3f
 8007cb8:	409a      	lsls	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d004      	beq.n	8007cf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2280      	movs	r2, #128	@ 0x80
 8007cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e00c      	b.n	8007d10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2205      	movs	r2, #5
 8007cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d28:	4b8e      	ldr	r3, [pc, #568]	@ (8007f64 <HAL_DMA_IRQHandler+0x248>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a8e      	ldr	r2, [pc, #568]	@ (8007f68 <HAL_DMA_IRQHandler+0x24c>)
 8007d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d32:	0a9b      	lsrs	r3, r3, #10
 8007d34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d46:	2208      	movs	r2, #8
 8007d48:	409a      	lsls	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d01a      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d013      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0204 	bic.w	r2, r2, #4
 8007d6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d74:	2208      	movs	r2, #8
 8007d76:	409a      	lsls	r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d80:	f043 0201 	orr.w	r2, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4013      	ands	r3, r2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d012      	beq.n	8007dbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007daa:	2201      	movs	r2, #1
 8007dac:	409a      	lsls	r2, r3
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db6:	f043 0202 	orr.w	r2, r3, #2
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d012      	beq.n	8007df4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de0:	2204      	movs	r2, #4
 8007de2:	409a      	lsls	r2, r3
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dec:	f043 0204 	orr.w	r2, r3, #4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007df8:	2210      	movs	r2, #16
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d043      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0308 	and.w	r3, r3, #8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d03c      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e16:	2210      	movs	r2, #16
 8007e18:	409a      	lsls	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d018      	beq.n	8007e5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d108      	bne.n	8007e4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d024      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
 8007e4a:	e01f      	b.n	8007e8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01b      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
 8007e5c:	e016      	b.n	8007e8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0208 	bic.w	r2, r2, #8
 8007e7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e90:	2220      	movs	r2, #32
 8007e92:	409a      	lsls	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4013      	ands	r3, r2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 808f 	beq.w	8007fbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0310 	and.w	r3, r3, #16
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 8087 	beq.w	8007fbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	409a      	lsls	r2, r3
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d136      	bne.n	8007f34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0216 	bic.w	r2, r2, #22
 8007ed4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695a      	ldr	r2, [r3, #20]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ee4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <HAL_DMA_IRQHandler+0x1da>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0208 	bic.w	r2, r2, #8
 8007f04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f0a:	223f      	movs	r2, #63	@ 0x3f
 8007f0c:	409a      	lsls	r2, r3
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d07e      	beq.n	8008028 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
        }
        return;
 8007f32:	e079      	b.n	8008028 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d01d      	beq.n	8007f7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10d      	bne.n	8007f6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d031      	beq.n	8007fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
 8007f60:	e02c      	b.n	8007fbc <HAL_DMA_IRQHandler+0x2a0>
 8007f62:	bf00      	nop
 8007f64:	20000004 	.word	0x20000004
 8007f68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d023      	beq.n	8007fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
 8007f7c:	e01e      	b.n	8007fbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10f      	bne.n	8007fac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0210 	bic.w	r2, r2, #16
 8007f9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d032      	beq.n	800802a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d022      	beq.n	8008016 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2205      	movs	r2, #5
 8007fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0201 	bic.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d307      	bcc.n	8008004 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f2      	bne.n	8007fe8 <HAL_DMA_IRQHandler+0x2cc>
 8008002:	e000      	b.n	8008006 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008004:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
 8008026:	e000      	b.n	800802a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008028:	bf00      	nop
    }
  }
}
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800804c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	2b40      	cmp	r3, #64	@ 0x40
 800805c:	d108      	bne.n	8008070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800806e:	e007      	b.n	8008080 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	60da      	str	r2, [r3, #12]
}
 8008080:	bf00      	nop
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	3b10      	subs	r3, #16
 800809c:	4a14      	ldr	r2, [pc, #80]	@ (80080f0 <DMA_CalcBaseAndBitshift+0x64>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	091b      	lsrs	r3, r3, #4
 80080a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80080a6:	4a13      	ldr	r2, [pc, #76]	@ (80080f4 <DMA_CalcBaseAndBitshift+0x68>)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d909      	bls.n	80080ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	1d1a      	adds	r2, r3, #4
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80080cc:	e007      	b.n	80080de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	aaaaaaab 	.word	0xaaaaaaab
 80080f4:	0800fcd8 	.word	0x0800fcd8

080080f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d11f      	bne.n	8008152 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b03      	cmp	r3, #3
 8008116:	d856      	bhi.n	80081c6 <DMA_CheckFifoParam+0xce>
 8008118:	a201      	add	r2, pc, #4	@ (adr r2, 8008120 <DMA_CheckFifoParam+0x28>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008131 	.word	0x08008131
 8008124:	08008143 	.word	0x08008143
 8008128:	08008131 	.word	0x08008131
 800812c:	080081c7 	.word	0x080081c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d046      	beq.n	80081ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008140:	e043      	b.n	80081ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008146:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800814a:	d140      	bne.n	80081ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008150:	e03d      	b.n	80081ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815a:	d121      	bne.n	80081a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b03      	cmp	r3, #3
 8008160:	d837      	bhi.n	80081d2 <DMA_CheckFifoParam+0xda>
 8008162:	a201      	add	r2, pc, #4	@ (adr r2, 8008168 <DMA_CheckFifoParam+0x70>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	08008179 	.word	0x08008179
 800816c:	0800817f 	.word	0x0800817f
 8008170:	08008179 	.word	0x08008179
 8008174:	08008191 	.word	0x08008191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
      break;
 800817c:	e030      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d025      	beq.n	80081d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800818e:	e022      	b.n	80081d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008198:	d11f      	bne.n	80081da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800819e:	e01c      	b.n	80081da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d903      	bls.n	80081ae <DMA_CheckFifoParam+0xb6>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d003      	beq.n	80081b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80081ac:	e018      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	73fb      	strb	r3, [r7, #15]
      break;
 80081b2:	e015      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00e      	beq.n	80081de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
      break;
 80081c4:	e00b      	b.n	80081de <DMA_CheckFifoParam+0xe6>
      break;
 80081c6:	bf00      	nop
 80081c8:	e00a      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      break;
 80081ca:	bf00      	nop
 80081cc:	e008      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      break;
 80081ce:	bf00      	nop
 80081d0:	e006      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      break;
 80081d2:	bf00      	nop
 80081d4:	e004      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      break;
 80081d6:	bf00      	nop
 80081d8:	e002      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80081da:	bf00      	nop
 80081dc:	e000      	b.n	80081e0 <DMA_CheckFifoParam+0xe8>
      break;
 80081de:	bf00      	nop
    }
  } 
  
  return status; 
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop

080081f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b089      	sub	sp, #36	@ 0x24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008202:	2300      	movs	r3, #0
 8008204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008206:	2300      	movs	r3, #0
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	e16b      	b.n	80084e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800820c:	2201      	movs	r2, #1
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4013      	ands	r3, r2
 800821e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	429a      	cmp	r2, r3
 8008226:	f040 815a 	bne.w	80084de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	2b01      	cmp	r3, #1
 8008234:	d005      	beq.n	8008242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800823e:	2b02      	cmp	r3, #2
 8008240:	d130      	bne.n	80082a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	2203      	movs	r2, #3
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	43db      	mvns	r3, r3
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4013      	ands	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	fa02 f303 	lsl.w	r3, r2, r3
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	4313      	orrs	r3, r2
 800826a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008278:	2201      	movs	r2, #1
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	43db      	mvns	r3, r3
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	4013      	ands	r3, r2
 8008286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	091b      	lsrs	r3, r3, #4
 800828e:	f003 0201 	and.w	r2, r3, #1
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	4313      	orrs	r3, r2
 800829c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d017      	beq.n	80082e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	2203      	movs	r2, #3
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	43db      	mvns	r3, r3
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	4013      	ands	r3, r2
 80082c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	fa02 f303 	lsl.w	r3, r2, r3
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d123      	bne.n	8008334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	08da      	lsrs	r2, r3, #3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3208      	adds	r2, #8
 80082f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	220f      	movs	r2, #15
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	43db      	mvns	r3, r3
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	4013      	ands	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	fa02 f303 	lsl.w	r3, r2, r3
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	4313      	orrs	r3, r2
 8008324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	08da      	lsrs	r2, r3, #3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3208      	adds	r2, #8
 800832e:	69b9      	ldr	r1, [r7, #24]
 8008330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	2203      	movs	r2, #3
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	43db      	mvns	r3, r3
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	4013      	ands	r3, r2
 800834a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f003 0203 	and.w	r2, r3, #3
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	fa02 f303 	lsl.w	r3, r2, r3
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	4313      	orrs	r3, r2
 8008360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80b4 	beq.w	80084de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	4b60      	ldr	r3, [pc, #384]	@ (80084fc <HAL_GPIO_Init+0x30c>)
 800837c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837e:	4a5f      	ldr	r2, [pc, #380]	@ (80084fc <HAL_GPIO_Init+0x30c>)
 8008380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008384:	6453      	str	r3, [r2, #68]	@ 0x44
 8008386:	4b5d      	ldr	r3, [pc, #372]	@ (80084fc <HAL_GPIO_Init+0x30c>)
 8008388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008392:	4a5b      	ldr	r2, [pc, #364]	@ (8008500 <HAL_GPIO_Init+0x310>)
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	089b      	lsrs	r3, r3, #2
 8008398:	3302      	adds	r3, #2
 800839a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800839e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	220f      	movs	r2, #15
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	43db      	mvns	r3, r3
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	4013      	ands	r3, r2
 80083b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a52      	ldr	r2, [pc, #328]	@ (8008504 <HAL_GPIO_Init+0x314>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d02b      	beq.n	8008416 <HAL_GPIO_Init+0x226>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a51      	ldr	r2, [pc, #324]	@ (8008508 <HAL_GPIO_Init+0x318>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d025      	beq.n	8008412 <HAL_GPIO_Init+0x222>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a50      	ldr	r2, [pc, #320]	@ (800850c <HAL_GPIO_Init+0x31c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d01f      	beq.n	800840e <HAL_GPIO_Init+0x21e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a4f      	ldr	r2, [pc, #316]	@ (8008510 <HAL_GPIO_Init+0x320>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d019      	beq.n	800840a <HAL_GPIO_Init+0x21a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a4e      	ldr	r2, [pc, #312]	@ (8008514 <HAL_GPIO_Init+0x324>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d013      	beq.n	8008406 <HAL_GPIO_Init+0x216>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a4d      	ldr	r2, [pc, #308]	@ (8008518 <HAL_GPIO_Init+0x328>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d00d      	beq.n	8008402 <HAL_GPIO_Init+0x212>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a4c      	ldr	r2, [pc, #304]	@ (800851c <HAL_GPIO_Init+0x32c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d007      	beq.n	80083fe <HAL_GPIO_Init+0x20e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a4b      	ldr	r2, [pc, #300]	@ (8008520 <HAL_GPIO_Init+0x330>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d101      	bne.n	80083fa <HAL_GPIO_Init+0x20a>
 80083f6:	2307      	movs	r3, #7
 80083f8:	e00e      	b.n	8008418 <HAL_GPIO_Init+0x228>
 80083fa:	2308      	movs	r3, #8
 80083fc:	e00c      	b.n	8008418 <HAL_GPIO_Init+0x228>
 80083fe:	2306      	movs	r3, #6
 8008400:	e00a      	b.n	8008418 <HAL_GPIO_Init+0x228>
 8008402:	2305      	movs	r3, #5
 8008404:	e008      	b.n	8008418 <HAL_GPIO_Init+0x228>
 8008406:	2304      	movs	r3, #4
 8008408:	e006      	b.n	8008418 <HAL_GPIO_Init+0x228>
 800840a:	2303      	movs	r3, #3
 800840c:	e004      	b.n	8008418 <HAL_GPIO_Init+0x228>
 800840e:	2302      	movs	r3, #2
 8008410:	e002      	b.n	8008418 <HAL_GPIO_Init+0x228>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <HAL_GPIO_Init+0x228>
 8008416:	2300      	movs	r3, #0
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	f002 0203 	and.w	r2, r2, #3
 800841e:	0092      	lsls	r2, r2, #2
 8008420:	4093      	lsls	r3, r2
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	4313      	orrs	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008428:	4935      	ldr	r1, [pc, #212]	@ (8008500 <HAL_GPIO_Init+0x310>)
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	089b      	lsrs	r3, r3, #2
 800842e:	3302      	adds	r3, #2
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008436:	4b3b      	ldr	r3, [pc, #236]	@ (8008524 <HAL_GPIO_Init+0x334>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	43db      	mvns	r3, r3
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	4013      	ands	r3, r2
 8008444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800845a:	4a32      	ldr	r2, [pc, #200]	@ (8008524 <HAL_GPIO_Init+0x334>)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008460:	4b30      	ldr	r3, [pc, #192]	@ (8008524 <HAL_GPIO_Init+0x334>)
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	43db      	mvns	r3, r3
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	4013      	ands	r3, r2
 800846e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	4313      	orrs	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008484:	4a27      	ldr	r2, [pc, #156]	@ (8008524 <HAL_GPIO_Init+0x334>)
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800848a:	4b26      	ldr	r3, [pc, #152]	@ (8008524 <HAL_GPIO_Init+0x334>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	43db      	mvns	r3, r3
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	4013      	ands	r3, r2
 8008498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80084ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008524 <HAL_GPIO_Init+0x334>)
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008524 <HAL_GPIO_Init+0x334>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	43db      	mvns	r3, r3
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	4013      	ands	r3, r2
 80084c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084d8:	4a12      	ldr	r2, [pc, #72]	@ (8008524 <HAL_GPIO_Init+0x334>)
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	3301      	adds	r3, #1
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	f67f ae90 	bls.w	800820c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80084ec:	bf00      	nop
 80084ee:	bf00      	nop
 80084f0:	3724      	adds	r7, #36	@ 0x24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40023800 	.word	0x40023800
 8008500:	40013800 	.word	0x40013800
 8008504:	40020000 	.word	0x40020000
 8008508:	40020400 	.word	0x40020400
 800850c:	40020800 	.word	0x40020800
 8008510:	40020c00 	.word	0x40020c00
 8008514:	40021000 	.word	0x40021000
 8008518:	40021400 	.word	0x40021400
 800851c:	40021800 	.word	0x40021800
 8008520:	40021c00 	.word	0x40021c00
 8008524:	40013c00 	.word	0x40013c00

08008528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e12b      	b.n	8008792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d106      	bne.n	8008554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fb f8f2 	bl	8003738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2224      	movs	r2, #36	@ 0x24
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0201 	bic.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800857a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800858a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800858c:	f001 fc60 	bl	8009e50 <HAL_RCC_GetPCLK1Freq>
 8008590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4a81      	ldr	r2, [pc, #516]	@ (800879c <HAL_I2C_Init+0x274>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d807      	bhi.n	80085ac <HAL_I2C_Init+0x84>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4a80      	ldr	r2, [pc, #512]	@ (80087a0 <HAL_I2C_Init+0x278>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bf94      	ite	ls
 80085a4:	2301      	movls	r3, #1
 80085a6:	2300      	movhi	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	e006      	b.n	80085ba <HAL_I2C_Init+0x92>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a7d      	ldr	r2, [pc, #500]	@ (80087a4 <HAL_I2C_Init+0x27c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	bf94      	ite	ls
 80085b4:	2301      	movls	r3, #1
 80085b6:	2300      	movhi	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e0e7      	b.n	8008792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4a78      	ldr	r2, [pc, #480]	@ (80087a8 <HAL_I2C_Init+0x280>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	0c9b      	lsrs	r3, r3, #18
 80085cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	430a      	orrs	r2, r1
 80085e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4a6a      	ldr	r2, [pc, #424]	@ (800879c <HAL_I2C_Init+0x274>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d802      	bhi.n	80085fc <HAL_I2C_Init+0xd4>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3301      	adds	r3, #1
 80085fa:	e009      	b.n	8008610 <HAL_I2C_Init+0xe8>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008602:	fb02 f303 	mul.w	r3, r2, r3
 8008606:	4a69      	ldr	r2, [pc, #420]	@ (80087ac <HAL_I2C_Init+0x284>)
 8008608:	fba2 2303 	umull	r2, r3, r2, r3
 800860c:	099b      	lsrs	r3, r3, #6
 800860e:	3301      	adds	r3, #1
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	430b      	orrs	r3, r1
 8008616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008622:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	495c      	ldr	r1, [pc, #368]	@ (800879c <HAL_I2C_Init+0x274>)
 800862c:	428b      	cmp	r3, r1
 800862e:	d819      	bhi.n	8008664 <HAL_I2C_Init+0x13c>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	1e59      	subs	r1, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	fbb1 f3f3 	udiv	r3, r1, r3
 800863e:	1c59      	adds	r1, r3, #1
 8008640:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008644:	400b      	ands	r3, r1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <HAL_I2C_Init+0x138>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1e59      	subs	r1, r3, #1
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	fbb1 f3f3 	udiv	r3, r1, r3
 8008658:	3301      	adds	r3, #1
 800865a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800865e:	e051      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 8008660:	2304      	movs	r3, #4
 8008662:	e04f      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d111      	bne.n	8008690 <HAL_I2C_Init+0x168>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	1e58      	subs	r0, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6859      	ldr	r1, [r3, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	440b      	add	r3, r1
 800867a:	fbb0 f3f3 	udiv	r3, r0, r3
 800867e:	3301      	adds	r3, #1
 8008680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008684:	2b00      	cmp	r3, #0
 8008686:	bf0c      	ite	eq
 8008688:	2301      	moveq	r3, #1
 800868a:	2300      	movne	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	e012      	b.n	80086b6 <HAL_I2C_Init+0x18e>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	1e58      	subs	r0, r3, #1
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6859      	ldr	r1, [r3, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	0099      	lsls	r1, r3, #2
 80086a0:	440b      	add	r3, r1
 80086a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80086a6:	3301      	adds	r3, #1
 80086a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf0c      	ite	eq
 80086b0:	2301      	moveq	r3, #1
 80086b2:	2300      	movne	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <HAL_I2C_Init+0x196>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e022      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10e      	bne.n	80086e4 <HAL_I2C_Init+0x1bc>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	1e58      	subs	r0, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6859      	ldr	r1, [r3, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	440b      	add	r3, r1
 80086d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80086d8:	3301      	adds	r3, #1
 80086da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086e2:	e00f      	b.n	8008704 <HAL_I2C_Init+0x1dc>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	1e58      	subs	r0, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6859      	ldr	r1, [r3, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	0099      	lsls	r1, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80086fa:	3301      	adds	r3, #1
 80086fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	6809      	ldr	r1, [r1, #0]
 8008708:	4313      	orrs	r3, r2
 800870a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69da      	ldr	r2, [r3, #28]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008732:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6911      	ldr	r1, [r2, #16]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	68d2      	ldr	r2, [r2, #12]
 800873e:	4311      	orrs	r1, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	430b      	orrs	r3, r1
 8008746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695a      	ldr	r2, [r3, #20]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	431a      	orrs	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	000186a0 	.word	0x000186a0
 80087a0:	001e847f 	.word	0x001e847f
 80087a4:	003d08ff 	.word	0x003d08ff
 80087a8:	431bde83 	.word	0x431bde83
 80087ac:	10624dd3 	.word	0x10624dd3

080087b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	461a      	mov	r2, r3
 80087be:	4603      	mov	r3, r0
 80087c0:	817b      	strh	r3, [r7, #10]
 80087c2:	460b      	mov	r3, r1
 80087c4:	813b      	strh	r3, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087ca:	f7fe fbbb 	bl	8006f44 <HAL_GetTick>
 80087ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b20      	cmp	r3, #32
 80087da:	f040 80d9 	bne.w	8008990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	2319      	movs	r3, #25
 80087e4:	2201      	movs	r2, #1
 80087e6:	496d      	ldr	r1, [pc, #436]	@ (800899c <HAL_I2C_Mem_Write+0x1ec>)
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fc8b 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
 80087f6:	e0cc      	b.n	8008992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <HAL_I2C_Mem_Write+0x56>
 8008802:	2302      	movs	r3, #2
 8008804:	e0c5      	b.n	8008992 <HAL_I2C_Mem_Write+0x1e2>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d007      	beq.n	800882c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800883a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2221      	movs	r2, #33	@ 0x21
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2240      	movs	r2, #64	@ 0x40
 8008848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a3a      	ldr	r2, [r7, #32]
 8008856:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800885c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a4d      	ldr	r2, [pc, #308]	@ (80089a0 <HAL_I2C_Mem_Write+0x1f0>)
 800886c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800886e:	88f8      	ldrh	r0, [r7, #6]
 8008870:	893a      	ldrh	r2, [r7, #8]
 8008872:	8979      	ldrh	r1, [r7, #10]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	4603      	mov	r3, r0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fac2 	bl	8008e08 <I2C_RequestMemoryWrite>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d052      	beq.n	8008930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e081      	b.n	8008992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fd50 	bl	8009338 <I2C_WaitOnTXEFlagUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00d      	beq.n	80088ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d107      	bne.n	80088b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e06b      	b.n	8008992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	3b01      	subs	r3, #1
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d11b      	bne.n	8008930 <HAL_I2C_Mem_Write+0x180>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d017      	beq.n	8008930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800891a:	3b01      	subs	r3, #1
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1aa      	bne.n	800888e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fd43 	bl	80093c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00d      	beq.n	8008964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894c:	2b04      	cmp	r3, #4
 800894e:	d107      	bne.n	8008960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800895e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e016      	b.n	8008992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	e000      	b.n	8008992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008990:	2302      	movs	r3, #2
  }
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	00100002 	.word	0x00100002
 80089a0:	ffff0000 	.word	0xffff0000

080089a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08c      	sub	sp, #48	@ 0x30
 80089a8:	af02      	add	r7, sp, #8
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	4608      	mov	r0, r1
 80089ae:	4611      	mov	r1, r2
 80089b0:	461a      	mov	r2, r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	817b      	strh	r3, [r7, #10]
 80089b6:	460b      	mov	r3, r1
 80089b8:	813b      	strh	r3, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089be:	f7fe fac1 	bl	8006f44 <HAL_GetTick>
 80089c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	f040 8214 	bne.w	8008dfa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	2319      	movs	r3, #25
 80089d8:	2201      	movs	r2, #1
 80089da:	497b      	ldr	r1, [pc, #492]	@ (8008bc8 <HAL_I2C_Mem_Read+0x224>)
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fb91 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80089e8:	2302      	movs	r3, #2
 80089ea:	e207      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_I2C_Mem_Read+0x56>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e200      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d007      	beq.n	8008a20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0201 	orr.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2222      	movs	r2, #34	@ 0x22
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2240      	movs	r2, #64	@ 0x40
 8008a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8008bcc <HAL_I2C_Mem_Read+0x228>)
 8008a60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a62:	88f8      	ldrh	r0, [r7, #6]
 8008a64:	893a      	ldrh	r2, [r7, #8]
 8008a66:	8979      	ldrh	r1, [r7, #10]
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	4603      	mov	r3, r0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fa5e 	bl	8008f34 <I2C_RequestMemoryRead>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e1bc      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d113      	bne.n	8008ab2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	623b      	str	r3, [r7, #32]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	623b      	str	r3, [r7, #32]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	623b      	str	r3, [r7, #32]
 8008a9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	e190      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d11b      	bne.n	8008af2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	61fb      	str	r3, [r7, #28]
 8008ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	e170      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d11b      	bne.n	8008b32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	61bb      	str	r3, [r7, #24]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	e150      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008b48:	e144      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	f200 80f1 	bhi.w	8008d36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d123      	bne.n	8008ba4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fc79 	bl	8009458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e145      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ba2:	e117      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d14e      	bne.n	8008c4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	4906      	ldr	r1, [pc, #24]	@ (8008bd0 <HAL_I2C_Mem_Read+0x22c>)
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 faa4 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d008      	beq.n	8008bd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e11a      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
 8008bc6:	bf00      	nop
 8008bc8:	00100002 	.word	0x00100002
 8008bcc:	ffff0000 	.word	0xffff0000
 8008bd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691a      	ldr	r2, [r3, #16]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c00:	3b01      	subs	r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691a      	ldr	r2, [r3, #16]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c20:	b2d2      	uxtb	r2, r2
 8008c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	3b01      	subs	r3, #1
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008c48:	e0c4      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	2200      	movs	r2, #0
 8008c52:	496c      	ldr	r1, [pc, #432]	@ (8008e04 <HAL_I2C_Mem_Read+0x460>)
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 fa55 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e0cb      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691a      	ldr	r2, [r3, #16]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	2200      	movs	r2, #0
 8008cae:	4955      	ldr	r1, [pc, #340]	@ (8008e04 <HAL_I2C_Mem_Read+0x460>)
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fa27 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e09d      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d34:	e04e      	b.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fb8c 	bl	8009458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e058      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d66:	3b01      	subs	r3, #1
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	3b01      	subs	r3, #1
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	d124      	bne.n	8008dd4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d107      	bne.n	8008da2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008da0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691a      	ldr	r2, [r3, #16]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f47f aeb6 	bne.w	8008b4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e000      	b.n	8008dfc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008dfa:	2302      	movs	r3, #2
  }
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3728      	adds	r7, #40	@ 0x28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	00010004 	.word	0x00010004

08008e08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	4608      	mov	r0, r1
 8008e12:	4611      	mov	r1, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	4603      	mov	r3, r0
 8008e18:	817b      	strh	r3, [r7, #10]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	813b      	strh	r3, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f960 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00d      	beq.n	8008e66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e58:	d103      	bne.n	8008e62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e05f      	b.n	8008f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e66:	897b      	ldrh	r3, [r7, #10]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	6a3a      	ldr	r2, [r7, #32]
 8008e7a:	492d      	ldr	r1, [pc, #180]	@ (8008f30 <I2C_RequestMemoryWrite+0x128>)
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 f9bb 	bl	80091f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e04c      	b.n	8008f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ea4:	6a39      	ldr	r1, [r7, #32]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 fa46 	bl	8009338 <I2C_WaitOnTXEFlagUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00d      	beq.n	8008ece <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d107      	bne.n	8008eca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e02b      	b.n	8008f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ece:	88fb      	ldrh	r3, [r7, #6]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d105      	bne.n	8008ee0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ed4:	893b      	ldrh	r3, [r7, #8]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	611a      	str	r2, [r3, #16]
 8008ede:	e021      	b.n	8008f24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ee0:	893b      	ldrh	r3, [r7, #8]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef0:	6a39      	ldr	r1, [r7, #32]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 fa20 	bl	8009338 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00d      	beq.n	8008f1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d107      	bne.n	8008f16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e005      	b.n	8008f26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f1a:	893b      	ldrh	r3, [r7, #8]
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	00010002 	.word	0x00010002

08008f34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	4611      	mov	r1, r2
 8008f40:	461a      	mov	r2, r3
 8008f42:	4603      	mov	r3, r0
 8008f44:	817b      	strh	r3, [r7, #10]
 8008f46:	460b      	mov	r3, r1
 8008f48:	813b      	strh	r3, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008f5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 f8c2 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00d      	beq.n	8008fa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f94:	d103      	bne.n	8008f9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e0aa      	b.n	80090f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fa2:	897b      	ldrh	r3, [r7, #10]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb4:	6a3a      	ldr	r2, [r7, #32]
 8008fb6:	4952      	ldr	r1, [pc, #328]	@ (8009100 <I2C_RequestMemoryRead+0x1cc>)
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f91d 	bl	80091f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e097      	b.n	80090f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe0:	6a39      	ldr	r1, [r7, #32]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 f9a8 	bl	8009338 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00d      	beq.n	800900a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d107      	bne.n	8009006 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e076      	b.n	80090f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d105      	bne.n	800901c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009010:	893b      	ldrh	r3, [r7, #8]
 8009012:	b2da      	uxtb	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	611a      	str	r2, [r3, #16]
 800901a:	e021      	b.n	8009060 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800901c:	893b      	ldrh	r3, [r7, #8]
 800901e:	0a1b      	lsrs	r3, r3, #8
 8009020:	b29b      	uxth	r3, r3
 8009022:	b2da      	uxtb	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800902a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800902c:	6a39      	ldr	r1, [r7, #32]
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 f982 	bl	8009338 <I2C_WaitOnTXEFlagUntilTimeout>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903e:	2b04      	cmp	r3, #4
 8009040:	d107      	bne.n	8009052 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e050      	b.n	80090f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009056:	893b      	ldrh	r3, [r7, #8]
 8009058:	b2da      	uxtb	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009062:	6a39      	ldr	r1, [r7, #32]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f967 	bl	8009338 <I2C_WaitOnTXEFlagUntilTimeout>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00d      	beq.n	800908c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009074:	2b04      	cmp	r3, #4
 8009076:	d107      	bne.n	8009088 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009086:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e035      	b.n	80090f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800909a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 f82b 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00d      	beq.n	80090d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090c2:	d103      	bne.n	80090cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e013      	b.n	80090f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80090d0:	897b      	ldrh	r3, [r7, #10]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f043 0301 	orr.w	r3, r3, #1
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	6a3a      	ldr	r2, [r7, #32]
 80090e4:	4906      	ldr	r1, [pc, #24]	@ (8009100 <I2C_RequestMemoryRead+0x1cc>)
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 f886 	bl	80091f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e000      	b.n	80090f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	00010002 	.word	0x00010002

08009104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009114:	e048      	b.n	80091a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d044      	beq.n	80091a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800911e:	f7fd ff11 	bl	8006f44 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d302      	bcc.n	8009134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d139      	bne.n	80091a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	0c1b      	lsrs	r3, r3, #16
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b01      	cmp	r3, #1
 800913c:	d10d      	bne.n	800915a <I2C_WaitOnFlagUntilTimeout+0x56>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	43da      	mvns	r2, r3
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4013      	ands	r3, r2
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	bf0c      	ite	eq
 8009150:	2301      	moveq	r3, #1
 8009152:	2300      	movne	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	e00c      	b.n	8009174 <I2C_WaitOnFlagUntilTimeout+0x70>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	43da      	mvns	r2, r3
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	4013      	ands	r3, r2
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	bf0c      	ite	eq
 800916c:	2301      	moveq	r3, #1
 800916e:	2300      	movne	r3, #0
 8009170:	b2db      	uxtb	r3, r3
 8009172:	461a      	mov	r2, r3
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	429a      	cmp	r2, r3
 8009178:	d116      	bne.n	80091a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009194:	f043 0220 	orr.w	r2, r3, #32
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e023      	b.n	80091f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	0c1b      	lsrs	r3, r3, #16
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d10d      	bne.n	80091ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	43da      	mvns	r2, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4013      	ands	r3, r2
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bf0c      	ite	eq
 80091c4:	2301      	moveq	r3, #1
 80091c6:	2300      	movne	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	e00c      	b.n	80091e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	43da      	mvns	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	4013      	ands	r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bf0c      	ite	eq
 80091e0:	2301      	moveq	r3, #1
 80091e2:	2300      	movne	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d093      	beq.n	8009116 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009206:	e071      	b.n	80092ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009216:	d123      	bne.n	8009260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009226:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2220      	movs	r2, #32
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924c:	f043 0204 	orr.w	r2, r3, #4
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e067      	b.n	8009330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009266:	d041      	beq.n	80092ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009268:	f7fd fe6c 	bl	8006f44 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	429a      	cmp	r2, r3
 8009276:	d302      	bcc.n	800927e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d136      	bne.n	80092ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	0c1b      	lsrs	r3, r3, #16
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b01      	cmp	r3, #1
 8009286:	d10c      	bne.n	80092a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	43da      	mvns	r2, r3
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4013      	ands	r3, r2
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	bf14      	ite	ne
 800929a:	2301      	movne	r3, #1
 800929c:	2300      	moveq	r3, #0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	e00b      	b.n	80092ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	43da      	mvns	r2, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4013      	ands	r3, r2
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bf14      	ite	ne
 80092b4:	2301      	movne	r3, #1
 80092b6:	2300      	moveq	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d016      	beq.n	80092ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d8:	f043 0220 	orr.w	r2, r3, #32
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e021      	b.n	8009330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	0c1b      	lsrs	r3, r3, #16
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d10c      	bne.n	8009310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	43da      	mvns	r2, r3
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	4013      	ands	r3, r2
 8009302:	b29b      	uxth	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	bf14      	ite	ne
 8009308:	2301      	movne	r3, #1
 800930a:	2300      	moveq	r3, #0
 800930c:	b2db      	uxtb	r3, r3
 800930e:	e00b      	b.n	8009328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	43da      	mvns	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4013      	ands	r3, r2
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	bf14      	ite	ne
 8009322:	2301      	movne	r3, #1
 8009324:	2300      	moveq	r3, #0
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	f47f af6d 	bne.w	8009208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009344:	e034      	b.n	80093b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f8e3 	bl	8009512 <I2C_IsAcknowledgeFailed>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e034      	b.n	80093c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d028      	beq.n	80093b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935e:	f7fd fdf1 	bl	8006f44 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	429a      	cmp	r2, r3
 800936c:	d302      	bcc.n	8009374 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d11d      	bne.n	80093b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937e:	2b80      	cmp	r3, #128	@ 0x80
 8009380:	d016      	beq.n	80093b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939c:	f043 0220 	orr.w	r2, r3, #32
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e007      	b.n	80093c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ba:	2b80      	cmp	r3, #128	@ 0x80
 80093bc:	d1c3      	bne.n	8009346 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093d4:	e034      	b.n	8009440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f000 f89b 	bl	8009512 <I2C_IsAcknowledgeFailed>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e034      	b.n	8009450 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d028      	beq.n	8009440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ee:	f7fd fda9 	bl	8006f44 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d302      	bcc.n	8009404 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d11d      	bne.n	8009440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b04      	cmp	r3, #4
 8009410:	d016      	beq.n	8009440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2220      	movs	r2, #32
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942c:	f043 0220 	orr.w	r2, r3, #32
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e007      	b.n	8009450 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	f003 0304 	and.w	r3, r3, #4
 800944a:	2b04      	cmp	r3, #4
 800944c:	d1c3      	bne.n	80093d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009464:	e049      	b.n	80094fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	f003 0310 	and.w	r3, r3, #16
 8009470:	2b10      	cmp	r3, #16
 8009472:	d119      	bne.n	80094a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f06f 0210 	mvn.w	r2, #16
 800947c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2220      	movs	r2, #32
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e030      	b.n	800950a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094a8:	f7fd fd4c 	bl	8006f44 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d302      	bcc.n	80094be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d11d      	bne.n	80094fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c8:	2b40      	cmp	r3, #64	@ 0x40
 80094ca:	d016      	beq.n	80094fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e6:	f043 0220 	orr.w	r2, r3, #32
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e007      	b.n	800950a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009504:	2b40      	cmp	r3, #64	@ 0x40
 8009506:	d1ae      	bne.n	8009466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009528:	d11b      	bne.n	8009562 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009532:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954e:	f043 0204 	orr.w	r2, r3, #4
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e267      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d075      	beq.n	800967a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800958e:	4b88      	ldr	r3, [pc, #544]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 030c 	and.w	r3, r3, #12
 8009596:	2b04      	cmp	r3, #4
 8009598:	d00c      	beq.n	80095b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800959a:	4b85      	ldr	r3, [pc, #532]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	d112      	bne.n	80095cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095a6:	4b82      	ldr	r3, [pc, #520]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095b2:	d10b      	bne.n	80095cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095b4:	4b7e      	ldr	r3, [pc, #504]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d05b      	beq.n	8009678 <HAL_RCC_OscConfig+0x108>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d157      	bne.n	8009678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e242      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095d4:	d106      	bne.n	80095e4 <HAL_RCC_OscConfig+0x74>
 80095d6:	4b76      	ldr	r3, [pc, #472]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a75      	ldr	r2, [pc, #468]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80095dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	e01d      	b.n	8009620 <HAL_RCC_OscConfig+0xb0>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095ec:	d10c      	bne.n	8009608 <HAL_RCC_OscConfig+0x98>
 80095ee:	4b70      	ldr	r3, [pc, #448]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a6f      	ldr	r2, [pc, #444]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80095f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	4b6d      	ldr	r3, [pc, #436]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a6c      	ldr	r2, [pc, #432]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	e00b      	b.n	8009620 <HAL_RCC_OscConfig+0xb0>
 8009608:	4b69      	ldr	r3, [pc, #420]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a68      	ldr	r2, [pc, #416]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 800960e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	4b66      	ldr	r3, [pc, #408]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a65      	ldr	r2, [pc, #404]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 800961a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800961e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d013      	beq.n	8009650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009628:	f7fd fc8c 	bl	8006f44 <HAL_GetTick>
 800962c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800962e:	e008      	b.n	8009642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009630:	f7fd fc88 	bl	8006f44 <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	2b64      	cmp	r3, #100	@ 0x64
 800963c:	d901      	bls.n	8009642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e207      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009642:	4b5b      	ldr	r3, [pc, #364]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0f0      	beq.n	8009630 <HAL_RCC_OscConfig+0xc0>
 800964e:	e014      	b.n	800967a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009650:	f7fd fc78 	bl	8006f44 <HAL_GetTick>
 8009654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009658:	f7fd fc74 	bl	8006f44 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b64      	cmp	r3, #100	@ 0x64
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e1f3      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800966a:	4b51      	ldr	r3, [pc, #324]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f0      	bne.n	8009658 <HAL_RCC_OscConfig+0xe8>
 8009676:	e000      	b.n	800967a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d063      	beq.n	800974e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009686:	4b4a      	ldr	r3, [pc, #296]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 030c 	and.w	r3, r3, #12
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00b      	beq.n	80096aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009692:	4b47      	ldr	r3, [pc, #284]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800969a:	2b08      	cmp	r3, #8
 800969c:	d11c      	bne.n	80096d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800969e:	4b44      	ldr	r3, [pc, #272]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d116      	bne.n	80096d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096aa:	4b41      	ldr	r3, [pc, #260]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_RCC_OscConfig+0x152>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d001      	beq.n	80096c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e1c7      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c2:	4b3b      	ldr	r3, [pc, #236]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4937      	ldr	r1, [pc, #220]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80096d6:	e03a      	b.n	800974e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d020      	beq.n	8009722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80096e0:	4b34      	ldr	r3, [pc, #208]	@ (80097b4 <HAL_RCC_OscConfig+0x244>)
 80096e2:	2201      	movs	r2, #1
 80096e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e6:	f7fd fc2d 	bl	8006f44 <HAL_GetTick>
 80096ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096ec:	e008      	b.n	8009700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096ee:	f7fd fc29 	bl	8006f44 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e1a8      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009700:	4b2b      	ldr	r3, [pc, #172]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0f0      	beq.n	80096ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800970c:	4b28      	ldr	r3, [pc, #160]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	4925      	ldr	r1, [pc, #148]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 800971c:	4313      	orrs	r3, r2
 800971e:	600b      	str	r3, [r1, #0]
 8009720:	e015      	b.n	800974e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009722:	4b24      	ldr	r3, [pc, #144]	@ (80097b4 <HAL_RCC_OscConfig+0x244>)
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009728:	f7fd fc0c 	bl	8006f44 <HAL_GetTick>
 800972c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800972e:	e008      	b.n	8009742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009730:	f7fd fc08 	bl	8006f44 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d901      	bls.n	8009742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e187      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009742:	4b1b      	ldr	r3, [pc, #108]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1f0      	bne.n	8009730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	2b00      	cmp	r3, #0
 8009758:	d036      	beq.n	80097c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d016      	beq.n	8009790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009762:	4b15      	ldr	r3, [pc, #84]	@ (80097b8 <HAL_RCC_OscConfig+0x248>)
 8009764:	2201      	movs	r2, #1
 8009766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009768:	f7fd fbec 	bl	8006f44 <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009770:	f7fd fbe8 	bl	8006f44 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e167      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009782:	4b0b      	ldr	r3, [pc, #44]	@ (80097b0 <HAL_RCC_OscConfig+0x240>)
 8009784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <HAL_RCC_OscConfig+0x200>
 800978e:	e01b      	b.n	80097c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009790:	4b09      	ldr	r3, [pc, #36]	@ (80097b8 <HAL_RCC_OscConfig+0x248>)
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009796:	f7fd fbd5 	bl	8006f44 <HAL_GetTick>
 800979a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800979c:	e00e      	b.n	80097bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800979e:	f7fd fbd1 	bl	8006f44 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d907      	bls.n	80097bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e150      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
 80097b0:	40023800 	.word	0x40023800
 80097b4:	42470000 	.word	0x42470000
 80097b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097bc:	4b88      	ldr	r3, [pc, #544]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80097be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1ea      	bne.n	800979e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8097 	beq.w	8009904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097d6:	2300      	movs	r3, #0
 80097d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097da:	4b81      	ldr	r3, [pc, #516]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80097dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10f      	bne.n	8009806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097e6:	2300      	movs	r3, #0
 80097e8:	60bb      	str	r3, [r7, #8]
 80097ea:	4b7d      	ldr	r3, [pc, #500]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ee:	4a7c      	ldr	r2, [pc, #496]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80097f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80097f6:	4b7a      	ldr	r3, [pc, #488]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80097f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097fe:	60bb      	str	r3, [r7, #8]
 8009800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009802:	2301      	movs	r3, #1
 8009804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009806:	4b77      	ldr	r3, [pc, #476]	@ (80099e4 <HAL_RCC_OscConfig+0x474>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800980e:	2b00      	cmp	r3, #0
 8009810:	d118      	bne.n	8009844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009812:	4b74      	ldr	r3, [pc, #464]	@ (80099e4 <HAL_RCC_OscConfig+0x474>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a73      	ldr	r2, [pc, #460]	@ (80099e4 <HAL_RCC_OscConfig+0x474>)
 8009818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800981c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800981e:	f7fd fb91 	bl	8006f44 <HAL_GetTick>
 8009822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009824:	e008      	b.n	8009838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009826:	f7fd fb8d 	bl	8006f44 <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	2b02      	cmp	r3, #2
 8009832:	d901      	bls.n	8009838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e10c      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009838:	4b6a      	ldr	r3, [pc, #424]	@ (80099e4 <HAL_RCC_OscConfig+0x474>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0f0      	beq.n	8009826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d106      	bne.n	800985a <HAL_RCC_OscConfig+0x2ea>
 800984c:	4b64      	ldr	r3, [pc, #400]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 800984e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009850:	4a63      	ldr	r2, [pc, #396]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	6713      	str	r3, [r2, #112]	@ 0x70
 8009858:	e01c      	b.n	8009894 <HAL_RCC_OscConfig+0x324>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	2b05      	cmp	r3, #5
 8009860:	d10c      	bne.n	800987c <HAL_RCC_OscConfig+0x30c>
 8009862:	4b5f      	ldr	r3, [pc, #380]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009866:	4a5e      	ldr	r2, [pc, #376]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009868:	f043 0304 	orr.w	r3, r3, #4
 800986c:	6713      	str	r3, [r2, #112]	@ 0x70
 800986e:	4b5c      	ldr	r3, [pc, #368]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009872:	4a5b      	ldr	r2, [pc, #364]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009874:	f043 0301 	orr.w	r3, r3, #1
 8009878:	6713      	str	r3, [r2, #112]	@ 0x70
 800987a:	e00b      	b.n	8009894 <HAL_RCC_OscConfig+0x324>
 800987c:	4b58      	ldr	r3, [pc, #352]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 800987e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009880:	4a57      	ldr	r2, [pc, #348]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009882:	f023 0301 	bic.w	r3, r3, #1
 8009886:	6713      	str	r3, [r2, #112]	@ 0x70
 8009888:	4b55      	ldr	r3, [pc, #340]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 800988a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800988c:	4a54      	ldr	r2, [pc, #336]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 800988e:	f023 0304 	bic.w	r3, r3, #4
 8009892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d015      	beq.n	80098c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800989c:	f7fd fb52 	bl	8006f44 <HAL_GetTick>
 80098a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098a2:	e00a      	b.n	80098ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098a4:	f7fd fb4e 	bl	8006f44 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d901      	bls.n	80098ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e0cb      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098ba:	4b49      	ldr	r3, [pc, #292]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80098bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0ee      	beq.n	80098a4 <HAL_RCC_OscConfig+0x334>
 80098c6:	e014      	b.n	80098f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098c8:	f7fd fb3c 	bl	8006f44 <HAL_GetTick>
 80098cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098ce:	e00a      	b.n	80098e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098d0:	f7fd fb38 	bl	8006f44 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098de:	4293      	cmp	r3, r2
 80098e0:	d901      	bls.n	80098e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e0b5      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80098e6:	4b3e      	ldr	r3, [pc, #248]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80098e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1ee      	bne.n	80098d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d105      	bne.n	8009904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098f8:	4b39      	ldr	r3, [pc, #228]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80098fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fc:	4a38      	ldr	r2, [pc, #224]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80098fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 80a1 	beq.w	8009a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800990e:	4b34      	ldr	r3, [pc, #208]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f003 030c 	and.w	r3, r3, #12
 8009916:	2b08      	cmp	r3, #8
 8009918:	d05c      	beq.n	80099d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d141      	bne.n	80099a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009922:	4b31      	ldr	r3, [pc, #196]	@ (80099e8 <HAL_RCC_OscConfig+0x478>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009928:	f7fd fb0c 	bl	8006f44 <HAL_GetTick>
 800992c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800992e:	e008      	b.n	8009942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009930:	f7fd fb08 	bl	8006f44 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d901      	bls.n	8009942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e087      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009942:	4b27      	ldr	r3, [pc, #156]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1f0      	bne.n	8009930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69da      	ldr	r2, [r3, #28]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	431a      	orrs	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995c:	019b      	lsls	r3, r3, #6
 800995e:	431a      	orrs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009964:	085b      	lsrs	r3, r3, #1
 8009966:	3b01      	subs	r3, #1
 8009968:	041b      	lsls	r3, r3, #16
 800996a:	431a      	orrs	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009970:	061b      	lsls	r3, r3, #24
 8009972:	491b      	ldr	r1, [pc, #108]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 8009974:	4313      	orrs	r3, r2
 8009976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009978:	4b1b      	ldr	r3, [pc, #108]	@ (80099e8 <HAL_RCC_OscConfig+0x478>)
 800997a:	2201      	movs	r2, #1
 800997c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800997e:	f7fd fae1 	bl	8006f44 <HAL_GetTick>
 8009982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009984:	e008      	b.n	8009998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009986:	f7fd fadd 	bl	8006f44 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e05c      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009998:	4b11      	ldr	r3, [pc, #68]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0f0      	beq.n	8009986 <HAL_RCC_OscConfig+0x416>
 80099a4:	e054      	b.n	8009a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099a6:	4b10      	ldr	r3, [pc, #64]	@ (80099e8 <HAL_RCC_OscConfig+0x478>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099ac:	f7fd faca 	bl	8006f44 <HAL_GetTick>
 80099b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099b2:	e008      	b.n	80099c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099b4:	f7fd fac6 	bl	8006f44 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e045      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099c6:	4b06      	ldr	r3, [pc, #24]	@ (80099e0 <HAL_RCC_OscConfig+0x470>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1f0      	bne.n	80099b4 <HAL_RCC_OscConfig+0x444>
 80099d2:	e03d      	b.n	8009a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d107      	bne.n	80099ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e038      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
 80099e0:	40023800 	.word	0x40023800
 80099e4:	40007000 	.word	0x40007000
 80099e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80099ec:	4b1b      	ldr	r3, [pc, #108]	@ (8009a5c <HAL_RCC_OscConfig+0x4ec>)
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d028      	beq.n	8009a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d121      	bne.n	8009a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d11a      	bne.n	8009a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d111      	bne.n	8009a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a32:	085b      	lsrs	r3, r3, #1
 8009a34:	3b01      	subs	r3, #1
 8009a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d107      	bne.n	8009a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d001      	beq.n	8009a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e000      	b.n	8009a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40023800 	.word	0x40023800

08009a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e0cc      	b.n	8009c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a74:	4b68      	ldr	r3, [pc, #416]	@ (8009c18 <HAL_RCC_ClockConfig+0x1b8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d90c      	bls.n	8009a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a82:	4b65      	ldr	r3, [pc, #404]	@ (8009c18 <HAL_RCC_ClockConfig+0x1b8>)
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a8a:	4b63      	ldr	r3, [pc, #396]	@ (8009c18 <HAL_RCC_ClockConfig+0x1b8>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d001      	beq.n	8009a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0b8      	b.n	8009c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d020      	beq.n	8009aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ab4:	4b59      	ldr	r3, [pc, #356]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	4a58      	ldr	r2, [pc, #352]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009acc:	4b53      	ldr	r3, [pc, #332]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	4a52      	ldr	r2, [pc, #328]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ad8:	4b50      	ldr	r3, [pc, #320]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	494d      	ldr	r1, [pc, #308]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d044      	beq.n	8009b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d107      	bne.n	8009b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009afe:	4b47      	ldr	r3, [pc, #284]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d119      	bne.n	8009b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e07f      	b.n	8009c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d003      	beq.n	8009b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d107      	bne.n	8009b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e06f      	b.n	8009c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0302 	and.w	r3, r3, #2
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e067      	b.n	8009c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b3e:	4b37      	ldr	r3, [pc, #220]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f023 0203 	bic.w	r2, r3, #3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	4934      	ldr	r1, [pc, #208]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b50:	f7fd f9f8 	bl	8006f44 <HAL_GetTick>
 8009b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b56:	e00a      	b.n	8009b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b58:	f7fd f9f4 	bl	8006f44 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e04f      	b.n	8009c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f003 020c 	and.w	r2, r3, #12
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d1eb      	bne.n	8009b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b80:	4b25      	ldr	r3, [pc, #148]	@ (8009c18 <HAL_RCC_ClockConfig+0x1b8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0307 	and.w	r3, r3, #7
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d20c      	bcs.n	8009ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b8e:	4b22      	ldr	r3, [pc, #136]	@ (8009c18 <HAL_RCC_ClockConfig+0x1b8>)
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b96:	4b20      	ldr	r3, [pc, #128]	@ (8009c18 <HAL_RCC_ClockConfig+0x1b8>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d001      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e032      	b.n	8009c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d008      	beq.n	8009bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bb4:	4b19      	ldr	r3, [pc, #100]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4916      	ldr	r1, [pc, #88]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0308 	and.w	r3, r3, #8
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d009      	beq.n	8009be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bd2:	4b12      	ldr	r3, [pc, #72]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	490e      	ldr	r1, [pc, #56]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009be6:	f000 f821 	bl	8009c2c <HAL_RCC_GetSysClockFreq>
 8009bea:	4602      	mov	r2, r0
 8009bec:	4b0b      	ldr	r3, [pc, #44]	@ (8009c1c <HAL_RCC_ClockConfig+0x1bc>)
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	091b      	lsrs	r3, r3, #4
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	490a      	ldr	r1, [pc, #40]	@ (8009c20 <HAL_RCC_ClockConfig+0x1c0>)
 8009bf8:	5ccb      	ldrb	r3, [r1, r3]
 8009bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfe:	4a09      	ldr	r2, [pc, #36]	@ (8009c24 <HAL_RCC_ClockConfig+0x1c4>)
 8009c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c02:	4b09      	ldr	r3, [pc, #36]	@ (8009c28 <HAL_RCC_ClockConfig+0x1c8>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fd f958 	bl	8006ebc <HAL_InitTick>

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	40023c00 	.word	0x40023c00
 8009c1c:	40023800 	.word	0x40023800
 8009c20:	0800fcb0 	.word	0x0800fcb0
 8009c24:	20000004 	.word	0x20000004
 8009c28:	20000008 	.word	0x20000008

08009c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c30:	b094      	sub	sp, #80	@ 0x50
 8009c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c38:	2300      	movs	r3, #0
 8009c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c44:	4b79      	ldr	r3, [pc, #484]	@ (8009e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f003 030c 	and.w	r3, r3, #12
 8009c4c:	2b08      	cmp	r3, #8
 8009c4e:	d00d      	beq.n	8009c6c <HAL_RCC_GetSysClockFreq+0x40>
 8009c50:	2b08      	cmp	r3, #8
 8009c52:	f200 80e1 	bhi.w	8009e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <HAL_RCC_GetSysClockFreq+0x34>
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	d003      	beq.n	8009c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8009c5e:	e0db      	b.n	8009e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c60:	4b73      	ldr	r3, [pc, #460]	@ (8009e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8009c62:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009c64:	e0db      	b.n	8009e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c66:	4b73      	ldr	r3, [pc, #460]	@ (8009e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8009c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009c6a:	e0d8      	b.n	8009e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8009e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c74:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c76:	4b6d      	ldr	r3, [pc, #436]	@ (8009e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d063      	beq.n	8009d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c82:	4b6a      	ldr	r3, [pc, #424]	@ (8009e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	099b      	lsrs	r3, r3, #6
 8009c88:	2200      	movs	r2, #0
 8009c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c96:	2300      	movs	r3, #0
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f04f 0100 	mov.w	r1, #0
 8009caa:	0159      	lsls	r1, r3, #5
 8009cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009cb0:	0150      	lsls	r0, r2, #5
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	1a51      	subs	r1, r2, r1
 8009cba:	6139      	str	r1, [r7, #16]
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	f04f 0200 	mov.w	r2, #0
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	018b      	lsls	r3, r1, #6
 8009cd4:	4651      	mov	r1, sl
 8009cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009cda:	4651      	mov	r1, sl
 8009cdc:	018a      	lsls	r2, r1, #6
 8009cde:	4651      	mov	r1, sl
 8009ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8009cea:	f04f 0200 	mov.w	r2, #0
 8009cee:	f04f 0300 	mov.w	r3, #0
 8009cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cfe:	4690      	mov	r8, r2
 8009d00:	4699      	mov	r9, r3
 8009d02:	4623      	mov	r3, r4
 8009d04:	eb18 0303 	adds.w	r3, r8, r3
 8009d08:	60bb      	str	r3, [r7, #8]
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	eb49 0303 	adc.w	r3, r9, r3
 8009d10:	60fb      	str	r3, [r7, #12]
 8009d12:	f04f 0200 	mov.w	r2, #0
 8009d16:	f04f 0300 	mov.w	r3, #0
 8009d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009d1e:	4629      	mov	r1, r5
 8009d20:	024b      	lsls	r3, r1, #9
 8009d22:	4621      	mov	r1, r4
 8009d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009d28:	4621      	mov	r1, r4
 8009d2a:	024a      	lsls	r2, r1, #9
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d32:	2200      	movs	r2, #0
 8009d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d3c:	f7f6 ff34 	bl	8000ba8 <__aeabi_uldivmod>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4613      	mov	r3, r2
 8009d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d48:	e058      	b.n	8009dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d4a:	4b38      	ldr	r3, [pc, #224]	@ (8009e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	099b      	lsrs	r3, r3, #6
 8009d50:	2200      	movs	r2, #0
 8009d52:	4618      	mov	r0, r3
 8009d54:	4611      	mov	r1, r2
 8009d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009d5a:	623b      	str	r3, [r7, #32]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009d64:	4642      	mov	r2, r8
 8009d66:	464b      	mov	r3, r9
 8009d68:	f04f 0000 	mov.w	r0, #0
 8009d6c:	f04f 0100 	mov.w	r1, #0
 8009d70:	0159      	lsls	r1, r3, #5
 8009d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d76:	0150      	lsls	r0, r2, #5
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4641      	mov	r1, r8
 8009d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009d82:	4649      	mov	r1, r9
 8009d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8009d88:	f04f 0200 	mov.w	r2, #0
 8009d8c:	f04f 0300 	mov.w	r3, #0
 8009d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8009da0:	eb63 050b 	sbc.w	r5, r3, fp
 8009da4:	f04f 0200 	mov.w	r2, #0
 8009da8:	f04f 0300 	mov.w	r3, #0
 8009dac:	00eb      	lsls	r3, r5, #3
 8009dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009db2:	00e2      	lsls	r2, r4, #3
 8009db4:	4614      	mov	r4, r2
 8009db6:	461d      	mov	r5, r3
 8009db8:	4643      	mov	r3, r8
 8009dba:	18e3      	adds	r3, r4, r3
 8009dbc:	603b      	str	r3, [r7, #0]
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	eb45 0303 	adc.w	r3, r5, r3
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	f04f 0200 	mov.w	r2, #0
 8009dca:	f04f 0300 	mov.w	r3, #0
 8009dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	028b      	lsls	r3, r1, #10
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ddc:	4621      	mov	r1, r4
 8009dde:	028a      	lsls	r2, r1, #10
 8009de0:	4610      	mov	r0, r2
 8009de2:	4619      	mov	r1, r3
 8009de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009de6:	2200      	movs	r2, #0
 8009de8:	61bb      	str	r3, [r7, #24]
 8009dea:	61fa      	str	r2, [r7, #28]
 8009dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009df0:	f7f6 feda 	bl	8000ba8 <__aeabi_uldivmod>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4613      	mov	r3, r2
 8009dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8009e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	0c1b      	lsrs	r3, r3, #16
 8009e02:	f003 0303 	and.w	r3, r3, #3
 8009e06:	3301      	adds	r3, #1
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009e16:	e002      	b.n	8009e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e18:	4b05      	ldr	r3, [pc, #20]	@ (8009e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3750      	adds	r7, #80	@ 0x50
 8009e24:	46bd      	mov	sp, r7
 8009e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e2a:	bf00      	nop
 8009e2c:	40023800 	.word	0x40023800
 8009e30:	00f42400 	.word	0x00f42400
 8009e34:	007a1200 	.word	0x007a1200

08009e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e3c:	4b03      	ldr	r3, [pc, #12]	@ (8009e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	20000004 	.word	0x20000004

08009e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e54:	f7ff fff0 	bl	8009e38 <HAL_RCC_GetHCLKFreq>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	4b05      	ldr	r3, [pc, #20]	@ (8009e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	0a9b      	lsrs	r3, r3, #10
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	4903      	ldr	r1, [pc, #12]	@ (8009e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e66:	5ccb      	ldrb	r3, [r1, r3]
 8009e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	40023800 	.word	0x40023800
 8009e74:	0800fcc0 	.word	0x0800fcc0

08009e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e7c:	f7ff ffdc 	bl	8009e38 <HAL_RCC_GetHCLKFreq>
 8009e80:	4602      	mov	r2, r0
 8009e82:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	0b5b      	lsrs	r3, r3, #13
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	4903      	ldr	r1, [pc, #12]	@ (8009e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e8e:	5ccb      	ldrb	r3, [r1, r3]
 8009e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	40023800 	.word	0x40023800
 8009e9c:	0800fcc0 	.word	0x0800fcc0

08009ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e042      	b.n	8009f38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7fc ff5c 	bl	8006d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2224      	movs	r2, #36	@ 0x24
 8009ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fdf3 	bl	800aad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	695a      	ldr	r2, [r3, #20]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2220      	movs	r2, #32
 8009f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08a      	sub	sp, #40	@ 0x28
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009f50:	2300      	movs	r3, #0
 8009f52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	d175      	bne.n	800a04c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <HAL_UART_Transmit+0x2c>
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e06e      	b.n	800a04e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2221      	movs	r2, #33	@ 0x21
 8009f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f7e:	f7fc ffe1 	bl	8006f44 <HAL_GetTick>
 8009f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	88fa      	ldrh	r2, [r7, #6]
 8009f88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	88fa      	ldrh	r2, [r7, #6]
 8009f8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f98:	d108      	bne.n	8009fac <HAL_UART_Transmit+0x6c>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d104      	bne.n	8009fac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	e003      	b.n	8009fb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009fb4:	e02e      	b.n	800a014 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2180      	movs	r1, #128	@ 0x80
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fb55 	bl	800a670 <UART_WaitOnFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e03a      	b.n	800a04e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	3302      	adds	r3, #2
 8009ff2:	61bb      	str	r3, [r7, #24]
 8009ff4:	e007      	b.n	800a006 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	3301      	adds	r3, #1
 800a004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a018:	b29b      	uxth	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1cb      	bne.n	8009fb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	2140      	movs	r1, #64	@ 0x40
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fb21 	bl	800a670 <UART_WaitOnFlagUntilTimeout>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2220      	movs	r2, #32
 800a038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e006      	b.n	800a04e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2220      	movs	r2, #32
 800a044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	e000      	b.n	800a04e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a04c:	2302      	movs	r3, #2
  }
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a056:	b480      	push	{r7}
 800a058:	b085      	sub	sp, #20
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	4613      	mov	r3, r2
 800a062:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b20      	cmp	r3, #32
 800a06e:	d121      	bne.n	800a0b4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <HAL_UART_Transmit_IT+0x26>
 800a076:	88fb      	ldrh	r3, [r7, #6]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e01a      	b.n	800a0b6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	88fa      	ldrh	r2, [r7, #6]
 800a08a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	88fa      	ldrh	r2, [r7, #6]
 800a090:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2221      	movs	r2, #33	@ 0x21
 800a09c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a0ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	e000      	b.n	800a0b6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a0b4:	2302      	movs	r3, #2
  }
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b20      	cmp	r3, #32
 800a0da:	d112      	bne.n	800a102 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <HAL_UART_Receive_IT+0x26>
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e00b      	b.n	800a104 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a0f2:	88fb      	ldrh	r3, [r7, #6]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 fb12 	bl	800a722 <UART_Start_Receive_IT>
 800a0fe:	4603      	mov	r3, r0
 800a100:	e000      	b.n	800a104 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a102:	2302      	movs	r3, #2
  }
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b0ba      	sub	sp, #232	@ 0xe8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a132:	2300      	movs	r3, #0
 800a134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a138:	2300      	movs	r3, #0
 800a13a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a14a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10f      	bne.n	800a172 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <HAL_UART_IRQHandler+0x66>
 800a15e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fbf2 	bl	800a954 <UART_Receive_IT>
      return;
 800a170:	e25b      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80de 	beq.w	800a338 <HAL_UART_IRQHandler+0x22c>
 800a17c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d106      	bne.n	800a196 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a18c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80d1 	beq.w	800a338 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00b      	beq.n	800a1ba <HAL_UART_IRQHandler+0xae>
 800a1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1b2:	f043 0201 	orr.w	r2, r3, #1
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1be:	f003 0304 	and.w	r3, r3, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <HAL_UART_IRQHandler+0xd2>
 800a1c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1d6:	f043 0202 	orr.w	r2, r3, #2
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <HAL_UART_IRQHandler+0xf6>
 800a1ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1fa:	f043 0204 	orr.w	r2, r3, #4
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a206:	f003 0308 	and.w	r3, r3, #8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d011      	beq.n	800a232 <HAL_UART_IRQHandler+0x126>
 800a20e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d105      	bne.n	800a226 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a21a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a22a:	f043 0208 	orr.w	r2, r3, #8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 81f2 	beq.w	800a620 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a240:	f003 0320 	and.w	r3, r3, #32
 800a244:	2b00      	cmp	r3, #0
 800a246:	d008      	beq.n	800a25a <HAL_UART_IRQHandler+0x14e>
 800a248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a24c:	f003 0320 	and.w	r3, r3, #32
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fb7d 	bl	800a954 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a264:	2b40      	cmp	r3, #64	@ 0x40
 800a266:	bf0c      	ite	eq
 800a268:	2301      	moveq	r3, #1
 800a26a:	2300      	movne	r3, #0
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a276:	f003 0308 	and.w	r3, r3, #8
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <HAL_UART_IRQHandler+0x17a>
 800a27e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a282:	2b00      	cmp	r3, #0
 800a284:	d04f      	beq.n	800a326 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa85 	bl	800a796 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a296:	2b40      	cmp	r3, #64	@ 0x40
 800a298:	d141      	bne.n	800a31e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3314      	adds	r3, #20
 800a2a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3314      	adds	r3, #20
 800a2c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1d9      	bne.n	800a29a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d013      	beq.n	800a316 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f2:	4a7e      	ldr	r2, [pc, #504]	@ (800a4ec <HAL_UART_IRQHandler+0x3e0>)
 800a2f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd fcec 	bl	8007cd8 <HAL_DMA_Abort_IT>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d016      	beq.n	800a334 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a310:	4610      	mov	r0, r2
 800a312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a314:	e00e      	b.n	800a334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f994 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31c:	e00a      	b.n	800a334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f990 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a324:	e006      	b.n	800a334 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f98c 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a332:	e175      	b.n	800a620 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a334:	bf00      	nop
    return;
 800a336:	e173      	b.n	800a620 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	f040 814f 	bne.w	800a5e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a346:	f003 0310 	and.w	r3, r3, #16
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 8148 	beq.w	800a5e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a354:	f003 0310 	and.w	r3, r3, #16
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 8141 	beq.w	800a5e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60bb      	str	r3, [r7, #8]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a37e:	2b40      	cmp	r3, #64	@ 0x40
 800a380:	f040 80b6 	bne.w	800a4f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 8145 	beq.w	800a624 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a39e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	f080 813e 	bcs.w	800a624 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ba:	f000 8088 	beq.w	800a4ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	330c      	adds	r3, #12
 800a3c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a3ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a3ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a3f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a3fa:	e841 2300 	strex	r3, r2, [r1]
 800a3fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1d9      	bne.n	800a3be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3314      	adds	r3, #20
 800a410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a41a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a41c:	f023 0301 	bic.w	r3, r3, #1
 800a420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3314      	adds	r3, #20
 800a42a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a42e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a432:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a436:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e1      	bne.n	800a40a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3314      	adds	r3, #20
 800a44c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a45c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3314      	adds	r3, #20
 800a466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a46a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a46c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e3      	bne.n	800a446 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	330c      	adds	r3, #12
 800a492:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a49c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a49e:	f023 0310 	bic.w	r3, r3, #16
 800a4a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a4b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a4b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e3      	bne.n	800a48c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fd fb95 	bl	8007bf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f8b7 	bl	800a658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4ea:	e09b      	b.n	800a624 <HAL_UART_IRQHandler+0x518>
 800a4ec:	0800a85d 	.word	0x0800a85d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a504:	b29b      	uxth	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 808e 	beq.w	800a628 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a50c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8089 	beq.w	800a628 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a52c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	330c      	adds	r3, #12
 800a536:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a53a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a53c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a542:	e841 2300 	strex	r3, r2, [r1]
 800a546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1e3      	bne.n	800a516 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3314      	adds	r3, #20
 800a554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	623b      	str	r3, [r7, #32]
   return(result);
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3314      	adds	r3, #20
 800a56e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a572:	633a      	str	r2, [r7, #48]	@ 0x30
 800a574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e3      	bne.n	800a54e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2220      	movs	r2, #32
 800a58a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	330c      	adds	r3, #12
 800a59a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 0310 	bic.w	r3, r3, #16
 800a5aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	330c      	adds	r3, #12
 800a5b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a5b8:	61fa      	str	r2, [r7, #28]
 800a5ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	69b9      	ldr	r1, [r7, #24]
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	e841 2300 	strex	r3, r2, [r1]
 800a5c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e3      	bne.n	800a594 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f83d 	bl	800a658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5de:	e023      	b.n	800a628 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d009      	beq.n	800a600 <HAL_UART_IRQHandler+0x4f4>
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f943 	bl	800a884 <UART_Transmit_IT>
    return;
 800a5fe:	e014      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00e      	beq.n	800a62a <HAL_UART_IRQHandler+0x51e>
 800a60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d008      	beq.n	800a62a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f983 	bl	800a924 <UART_EndTransmit_IT>
    return;
 800a61e:	e004      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
    return;
 800a620:	bf00      	nop
 800a622:	e002      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
      return;
 800a624:	bf00      	nop
 800a626:	e000      	b.n	800a62a <HAL_UART_IRQHandler+0x51e>
      return;
 800a628:	bf00      	nop
  }
}
 800a62a:	37e8      	adds	r7, #232	@ 0xe8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	4613      	mov	r3, r2
 800a67e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a680:	e03b      	b.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a688:	d037      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a68a:	f7fc fc5b 	bl	8006f44 <HAL_GetTick>
 800a68e:	4602      	mov	r2, r0
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	6a3a      	ldr	r2, [r7, #32]
 800a696:	429a      	cmp	r2, r3
 800a698:	d302      	bcc.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e03a      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d023      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b80      	cmp	r3, #128	@ 0x80
 800a6b6:	d020      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b40      	cmp	r3, #64	@ 0x40
 800a6bc:	d01d      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0308 	and.w	r3, r3, #8
 800a6c8:	2b08      	cmp	r3, #8
 800a6ca:	d116      	bne.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 f857 	bl	800a796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2208      	movs	r2, #8
 800a6ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e00f      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4013      	ands	r3, r2
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	429a      	cmp	r2, r3
 800a708:	bf0c      	ite	eq
 800a70a:	2301      	moveq	r3, #1
 800a70c:	2300      	movne	r3, #0
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	461a      	mov	r2, r3
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	429a      	cmp	r2, r3
 800a716:	d0b4      	beq.n	800a682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	4613      	mov	r3, r2
 800a72e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	88fa      	ldrh	r2, [r7, #6]
 800a740:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2222      	movs	r2, #34	@ 0x22
 800a74c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a766:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	695a      	ldr	r2, [r3, #20]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0201 	orr.w	r2, r2, #1
 800a776:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0220 	orr.w	r2, r2, #32
 800a786:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a796:	b480      	push	{r7}
 800a798:	b095      	sub	sp, #84	@ 0x54
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7be:	643a      	str	r2, [r7, #64]	@ 0x40
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e5      	bne.n	800a79e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3314      	adds	r3, #20
 800a7d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	f023 0301 	bic.w	r3, r3, #1
 800a7e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3314      	adds	r3, #20
 800a7f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e5      	bne.n	800a7d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d119      	bne.n	800a842 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	330c      	adds	r3, #12
 800a814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f023 0310 	bic.w	r3, r3, #16
 800a824:	647b      	str	r3, [r7, #68]	@ 0x44
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a82e:	61ba      	str	r2, [r7, #24]
 800a830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6979      	ldr	r1, [r7, #20]
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	613b      	str	r3, [r7, #16]
   return(result);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e5      	bne.n	800a80e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2220      	movs	r2, #32
 800a846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a850:	bf00      	nop
 800a852:	3754      	adds	r7, #84	@ 0x54
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a868:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fee4 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a87c:	bf00      	nop
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a892:	b2db      	uxtb	r3, r3
 800a894:	2b21      	cmp	r3, #33	@ 0x21
 800a896:	d13e      	bne.n	800a916 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a0:	d114      	bne.n	800a8cc <UART_Transmit_IT+0x48>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d110      	bne.n	800a8cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	1c9a      	adds	r2, r3, #2
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	621a      	str	r2, [r3, #32]
 800a8ca:	e008      	b.n	800a8de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	1c59      	adds	r1, r3, #1
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	6211      	str	r1, [r2, #32]
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10f      	bne.n	800a912 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a900:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a910:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	e000      	b.n	800a918 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a916:	2302      	movs	r3, #2
  }
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a93a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff fe73 	bl	800a630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b08c      	sub	sp, #48	@ 0x30
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b22      	cmp	r3, #34	@ 0x22
 800a966:	f040 80ae 	bne.w	800aac6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a972:	d117      	bne.n	800a9a4 <UART_Receive_IT+0x50>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d113      	bne.n	800a9a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a984:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a992:	b29a      	uxth	r2, r3
 800a994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a996:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99c:	1c9a      	adds	r2, r3, #2
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9a2:	e026      	b.n	800a9f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9b6:	d007      	beq.n	800a9c8 <UART_Receive_IT+0x74>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <UART_Receive_IT+0x82>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	e008      	b.n	800a9e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ec:	1c5a      	adds	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d15d      	bne.n	800aac2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68da      	ldr	r2, [r3, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0220 	bic.w	r2, r2, #32
 800aa14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	695a      	ldr	r2, [r3, #20]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0201 	bic.w	r2, r2, #1
 800aa34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2220      	movs	r2, #32
 800aa3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d135      	bne.n	800aab8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	613b      	str	r3, [r7, #16]
   return(result);
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f023 0310 	bic.w	r3, r3, #16
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	330c      	adds	r3, #12
 800aa70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa72:	623a      	str	r2, [r7, #32]
 800aa74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	69f9      	ldr	r1, [r7, #28]
 800aa78:	6a3a      	ldr	r2, [r7, #32]
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e5      	bne.n	800aa52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0310 	and.w	r3, r3, #16
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d10a      	bne.n	800aaaa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa94:	2300      	movs	r3, #0
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fdd1 	bl	800a658 <HAL_UARTEx_RxEventCallback>
 800aab6:	e002      	b.n	800aabe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7fa fd4d 	bl	8005558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e002      	b.n	800aac8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e000      	b.n	800aac8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aac6:	2302      	movs	r3, #2
  }
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3730      	adds	r7, #48	@ 0x30
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aad4:	b0c0      	sub	sp, #256	@ 0x100
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaec:	68d9      	ldr	r1, [r3, #12]
 800aaee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	ea40 0301 	orr.w	r3, r0, r1
 800aaf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aafa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	431a      	orrs	r2, r3
 800ab08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ab1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ab28:	f021 010c 	bic.w	r1, r1, #12
 800ab2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ab36:	430b      	orrs	r3, r1
 800ab38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ab46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab4a:	6999      	ldr	r1, [r3, #24]
 800ab4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	ea40 0301 	orr.w	r3, r0, r1
 800ab56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	4b8f      	ldr	r3, [pc, #572]	@ (800ad9c <UART_SetConfig+0x2cc>)
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d005      	beq.n	800ab70 <UART_SetConfig+0xa0>
 800ab64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	4b8d      	ldr	r3, [pc, #564]	@ (800ada0 <UART_SetConfig+0x2d0>)
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d104      	bne.n	800ab7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab70:	f7ff f982 	bl	8009e78 <HAL_RCC_GetPCLK2Freq>
 800ab74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ab78:	e003      	b.n	800ab82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab7a:	f7ff f969 	bl	8009e50 <HAL_RCC_GetPCLK1Freq>
 800ab7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab8c:	f040 810c 	bne.w	800ada8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab94:	2200      	movs	r2, #0
 800ab96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ab9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ab9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	1891      	adds	r1, r2, r2
 800aba8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800abaa:	415b      	adcs	r3, r3
 800abac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800abb2:	4621      	mov	r1, r4
 800abb4:	eb12 0801 	adds.w	r8, r2, r1
 800abb8:	4629      	mov	r1, r5
 800abba:	eb43 0901 	adc.w	r9, r3, r1
 800abbe:	f04f 0200 	mov.w	r2, #0
 800abc2:	f04f 0300 	mov.w	r3, #0
 800abc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abd2:	4690      	mov	r8, r2
 800abd4:	4699      	mov	r9, r3
 800abd6:	4623      	mov	r3, r4
 800abd8:	eb18 0303 	adds.w	r3, r8, r3
 800abdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abe0:	462b      	mov	r3, r5
 800abe2:	eb49 0303 	adc.w	r3, r9, r3
 800abe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800abea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800abf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800abfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800abfe:	460b      	mov	r3, r1
 800ac00:	18db      	adds	r3, r3, r3
 800ac02:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac04:	4613      	mov	r3, r2
 800ac06:	eb42 0303 	adc.w	r3, r2, r3
 800ac0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ac10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ac14:	f7f5 ffc8 	bl	8000ba8 <__aeabi_uldivmod>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4b61      	ldr	r3, [pc, #388]	@ (800ada4 <UART_SetConfig+0x2d4>)
 800ac1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac22:	095b      	lsrs	r3, r3, #5
 800ac24:	011c      	lsls	r4, r3, #4
 800ac26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ac34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ac38:	4642      	mov	r2, r8
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	1891      	adds	r1, r2, r2
 800ac3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ac40:	415b      	adcs	r3, r3
 800ac42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ac48:	4641      	mov	r1, r8
 800ac4a:	eb12 0a01 	adds.w	sl, r2, r1
 800ac4e:	4649      	mov	r1, r9
 800ac50:	eb43 0b01 	adc.w	fp, r3, r1
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac68:	4692      	mov	sl, r2
 800ac6a:	469b      	mov	fp, r3
 800ac6c:	4643      	mov	r3, r8
 800ac6e:	eb1a 0303 	adds.w	r3, sl, r3
 800ac72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ac76:	464b      	mov	r3, r9
 800ac78:	eb4b 0303 	adc.w	r3, fp, r3
 800ac7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ac80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ac90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ac94:	460b      	mov	r3, r1
 800ac96:	18db      	adds	r3, r3, r3
 800ac98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	eb42 0303 	adc.w	r3, r2, r3
 800aca0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800acaa:	f7f5 ff7d 	bl	8000ba8 <__aeabi_uldivmod>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4611      	mov	r1, r2
 800acb4:	4b3b      	ldr	r3, [pc, #236]	@ (800ada4 <UART_SetConfig+0x2d4>)
 800acb6:	fba3 2301 	umull	r2, r3, r3, r1
 800acba:	095b      	lsrs	r3, r3, #5
 800acbc:	2264      	movs	r2, #100	@ 0x64
 800acbe:	fb02 f303 	mul.w	r3, r2, r3
 800acc2:	1acb      	subs	r3, r1, r3
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800acca:	4b36      	ldr	r3, [pc, #216]	@ (800ada4 <UART_SetConfig+0x2d4>)
 800accc:	fba3 2302 	umull	r2, r3, r3, r2
 800acd0:	095b      	lsrs	r3, r3, #5
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800acd8:	441c      	add	r4, r3
 800acda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acde:	2200      	movs	r2, #0
 800ace0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ace4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ace8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800acec:	4642      	mov	r2, r8
 800acee:	464b      	mov	r3, r9
 800acf0:	1891      	adds	r1, r2, r2
 800acf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800acf4:	415b      	adcs	r3, r3
 800acf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800acfc:	4641      	mov	r1, r8
 800acfe:	1851      	adds	r1, r2, r1
 800ad00:	6339      	str	r1, [r7, #48]	@ 0x30
 800ad02:	4649      	mov	r1, r9
 800ad04:	414b      	adcs	r3, r1
 800ad06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad08:	f04f 0200 	mov.w	r2, #0
 800ad0c:	f04f 0300 	mov.w	r3, #0
 800ad10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ad14:	4659      	mov	r1, fp
 800ad16:	00cb      	lsls	r3, r1, #3
 800ad18:	4651      	mov	r1, sl
 800ad1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad1e:	4651      	mov	r1, sl
 800ad20:	00ca      	lsls	r2, r1, #3
 800ad22:	4610      	mov	r0, r2
 800ad24:	4619      	mov	r1, r3
 800ad26:	4603      	mov	r3, r0
 800ad28:	4642      	mov	r2, r8
 800ad2a:	189b      	adds	r3, r3, r2
 800ad2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad30:	464b      	mov	r3, r9
 800ad32:	460a      	mov	r2, r1
 800ad34:	eb42 0303 	adc.w	r3, r2, r3
 800ad38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ad48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ad4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ad50:	460b      	mov	r3, r1
 800ad52:	18db      	adds	r3, r3, r3
 800ad54:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad56:	4613      	mov	r3, r2
 800ad58:	eb42 0303 	adc.w	r3, r2, r3
 800ad5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ad62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ad66:	f7f5 ff1f 	bl	8000ba8 <__aeabi_uldivmod>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	@ (800ada4 <UART_SetConfig+0x2d4>)
 800ad70:	fba3 1302 	umull	r1, r3, r3, r2
 800ad74:	095b      	lsrs	r3, r3, #5
 800ad76:	2164      	movs	r1, #100	@ 0x64
 800ad78:	fb01 f303 	mul.w	r3, r1, r3
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	3332      	adds	r3, #50	@ 0x32
 800ad82:	4a08      	ldr	r2, [pc, #32]	@ (800ada4 <UART_SetConfig+0x2d4>)
 800ad84:	fba2 2303 	umull	r2, r3, r2, r3
 800ad88:	095b      	lsrs	r3, r3, #5
 800ad8a:	f003 0207 	and.w	r2, r3, #7
 800ad8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4422      	add	r2, r4
 800ad96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad98:	e106      	b.n	800afa8 <UART_SetConfig+0x4d8>
 800ad9a:	bf00      	nop
 800ad9c:	40011000 	.word	0x40011000
 800ada0:	40011400 	.word	0x40011400
 800ada4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ada8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adac:	2200      	movs	r2, #0
 800adae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800adb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800adb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800adba:	4642      	mov	r2, r8
 800adbc:	464b      	mov	r3, r9
 800adbe:	1891      	adds	r1, r2, r2
 800adc0:	6239      	str	r1, [r7, #32]
 800adc2:	415b      	adcs	r3, r3
 800adc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800adc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800adca:	4641      	mov	r1, r8
 800adcc:	1854      	adds	r4, r2, r1
 800adce:	4649      	mov	r1, r9
 800add0:	eb43 0501 	adc.w	r5, r3, r1
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	00eb      	lsls	r3, r5, #3
 800adde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ade2:	00e2      	lsls	r2, r4, #3
 800ade4:	4614      	mov	r4, r2
 800ade6:	461d      	mov	r5, r3
 800ade8:	4643      	mov	r3, r8
 800adea:	18e3      	adds	r3, r4, r3
 800adec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800adf0:	464b      	mov	r3, r9
 800adf2:	eb45 0303 	adc.w	r3, r5, r3
 800adf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800adfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ae0a:	f04f 0200 	mov.w	r2, #0
 800ae0e:	f04f 0300 	mov.w	r3, #0
 800ae12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ae16:	4629      	mov	r1, r5
 800ae18:	008b      	lsls	r3, r1, #2
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae20:	4621      	mov	r1, r4
 800ae22:	008a      	lsls	r2, r1, #2
 800ae24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ae28:	f7f5 febe 	bl	8000ba8 <__aeabi_uldivmod>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	4b60      	ldr	r3, [pc, #384]	@ (800afb4 <UART_SetConfig+0x4e4>)
 800ae32:	fba3 2302 	umull	r2, r3, r3, r2
 800ae36:	095b      	lsrs	r3, r3, #5
 800ae38:	011c      	lsls	r4, r3, #4
 800ae3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ae44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ae48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	464b      	mov	r3, r9
 800ae50:	1891      	adds	r1, r2, r2
 800ae52:	61b9      	str	r1, [r7, #24]
 800ae54:	415b      	adcs	r3, r3
 800ae56:	61fb      	str	r3, [r7, #28]
 800ae58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae5c:	4641      	mov	r1, r8
 800ae5e:	1851      	adds	r1, r2, r1
 800ae60:	6139      	str	r1, [r7, #16]
 800ae62:	4649      	mov	r1, r9
 800ae64:	414b      	adcs	r3, r1
 800ae66:	617b      	str	r3, [r7, #20]
 800ae68:	f04f 0200 	mov.w	r2, #0
 800ae6c:	f04f 0300 	mov.w	r3, #0
 800ae70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae74:	4659      	mov	r1, fp
 800ae76:	00cb      	lsls	r3, r1, #3
 800ae78:	4651      	mov	r1, sl
 800ae7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae7e:	4651      	mov	r1, sl
 800ae80:	00ca      	lsls	r2, r1, #3
 800ae82:	4610      	mov	r0, r2
 800ae84:	4619      	mov	r1, r3
 800ae86:	4603      	mov	r3, r0
 800ae88:	4642      	mov	r2, r8
 800ae8a:	189b      	adds	r3, r3, r2
 800ae8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae90:	464b      	mov	r3, r9
 800ae92:	460a      	mov	r2, r1
 800ae94:	eb42 0303 	adc.w	r3, r2, r3
 800ae98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aea6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aea8:	f04f 0200 	mov.w	r2, #0
 800aeac:	f04f 0300 	mov.w	r3, #0
 800aeb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	008b      	lsls	r3, r1, #2
 800aeb8:	4641      	mov	r1, r8
 800aeba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aebe:	4641      	mov	r1, r8
 800aec0:	008a      	lsls	r2, r1, #2
 800aec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800aec6:	f7f5 fe6f 	bl	8000ba8 <__aeabi_uldivmod>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	4b38      	ldr	r3, [pc, #224]	@ (800afb4 <UART_SetConfig+0x4e4>)
 800aed2:	fba3 2301 	umull	r2, r3, r3, r1
 800aed6:	095b      	lsrs	r3, r3, #5
 800aed8:	2264      	movs	r2, #100	@ 0x64
 800aeda:	fb02 f303 	mul.w	r3, r2, r3
 800aede:	1acb      	subs	r3, r1, r3
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	3332      	adds	r3, #50	@ 0x32
 800aee4:	4a33      	ldr	r2, [pc, #204]	@ (800afb4 <UART_SetConfig+0x4e4>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	095b      	lsrs	r3, r3, #5
 800aeec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aef0:	441c      	add	r4, r3
 800aef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aef6:	2200      	movs	r2, #0
 800aef8:	673b      	str	r3, [r7, #112]	@ 0x70
 800aefa:	677a      	str	r2, [r7, #116]	@ 0x74
 800aefc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800af00:	4642      	mov	r2, r8
 800af02:	464b      	mov	r3, r9
 800af04:	1891      	adds	r1, r2, r2
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	415b      	adcs	r3, r3
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af10:	4641      	mov	r1, r8
 800af12:	1851      	adds	r1, r2, r1
 800af14:	6039      	str	r1, [r7, #0]
 800af16:	4649      	mov	r1, r9
 800af18:	414b      	adcs	r3, r1
 800af1a:	607b      	str	r3, [r7, #4]
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	f04f 0300 	mov.w	r3, #0
 800af24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af28:	4659      	mov	r1, fp
 800af2a:	00cb      	lsls	r3, r1, #3
 800af2c:	4651      	mov	r1, sl
 800af2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af32:	4651      	mov	r1, sl
 800af34:	00ca      	lsls	r2, r1, #3
 800af36:	4610      	mov	r0, r2
 800af38:	4619      	mov	r1, r3
 800af3a:	4603      	mov	r3, r0
 800af3c:	4642      	mov	r2, r8
 800af3e:	189b      	adds	r3, r3, r2
 800af40:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af42:	464b      	mov	r3, r9
 800af44:	460a      	mov	r2, r1
 800af46:	eb42 0303 	adc.w	r3, r2, r3
 800af4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	663b      	str	r3, [r7, #96]	@ 0x60
 800af56:	667a      	str	r2, [r7, #100]	@ 0x64
 800af58:	f04f 0200 	mov.w	r2, #0
 800af5c:	f04f 0300 	mov.w	r3, #0
 800af60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800af64:	4649      	mov	r1, r9
 800af66:	008b      	lsls	r3, r1, #2
 800af68:	4641      	mov	r1, r8
 800af6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af6e:	4641      	mov	r1, r8
 800af70:	008a      	lsls	r2, r1, #2
 800af72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800af76:	f7f5 fe17 	bl	8000ba8 <__aeabi_uldivmod>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4b0d      	ldr	r3, [pc, #52]	@ (800afb4 <UART_SetConfig+0x4e4>)
 800af80:	fba3 1302 	umull	r1, r3, r3, r2
 800af84:	095b      	lsrs	r3, r3, #5
 800af86:	2164      	movs	r1, #100	@ 0x64
 800af88:	fb01 f303 	mul.w	r3, r1, r3
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	3332      	adds	r3, #50	@ 0x32
 800af92:	4a08      	ldr	r2, [pc, #32]	@ (800afb4 <UART_SetConfig+0x4e4>)
 800af94:	fba2 2303 	umull	r2, r3, r2, r3
 800af98:	095b      	lsrs	r3, r3, #5
 800af9a:	f003 020f 	and.w	r2, r3, #15
 800af9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4422      	add	r2, r4
 800afa6:	609a      	str	r2, [r3, #8]
}
 800afa8:	bf00      	nop
 800afaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800afae:	46bd      	mov	sp, r7
 800afb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afb4:	51eb851f 	.word	0x51eb851f

0800afb8 <LL_GPIO_SetPinMode>:
{
 800afb8:	b480      	push	{r7}
 800afba:	b08b      	sub	sp, #44	@ 0x2c
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	fa93 f3a3 	rbit	r3, r3
 800afd2:	613b      	str	r3, [r7, #16]
  return result;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800afde:	2320      	movs	r3, #32
 800afe0:	e003      	b.n	800afea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	fab3 f383 	clz	r3, r3
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	2103      	movs	r1, #3
 800afee:	fa01 f303 	lsl.w	r3, r1, r3
 800aff2:	43db      	mvns	r3, r3
 800aff4:	401a      	ands	r2, r3
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	fa93 f3a3 	rbit	r3, r3
 800b000:	61fb      	str	r3, [r7, #28]
  return result;
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b00c:	2320      	movs	r3, #32
 800b00e:	e003      	b.n	800b018 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b012:	fab3 f383 	clz	r3, r3
 800b016:	b2db      	uxtb	r3, r3
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	fa01 f303 	lsl.w	r3, r1, r3
 800b020:	431a      	orrs	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	601a      	str	r2, [r3, #0]
}
 800b026:	bf00      	nop
 800b028:	372c      	adds	r7, #44	@ 0x2c
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <LL_GPIO_SetPinOutputType>:
{
 800b032:	b480      	push	{r7}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	60b9      	str	r1, [r7, #8]
 800b03c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	43db      	mvns	r3, r3
 800b046:	401a      	ands	r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	fb01 f303 	mul.w	r3, r1, r3
 800b050:	431a      	orrs	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	605a      	str	r2, [r3, #4]
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <LL_GPIO_SetPinSpeed>:
{
 800b062:	b480      	push	{r7}
 800b064:	b08b      	sub	sp, #44	@ 0x2c
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	fa93 f3a3 	rbit	r3, r3
 800b07c:	613b      	str	r3, [r7, #16]
  return result;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d101      	bne.n	800b08c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b088:	2320      	movs	r3, #32
 800b08a:	e003      	b.n	800b094 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	fab3 f383 	clz	r3, r3
 800b092:	b2db      	uxtb	r3, r3
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	2103      	movs	r1, #3
 800b098:	fa01 f303 	lsl.w	r3, r1, r3
 800b09c:	43db      	mvns	r3, r3
 800b09e:	401a      	ands	r2, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	fa93 f3a3 	rbit	r3, r3
 800b0aa:	61fb      	str	r3, [r7, #28]
  return result;
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b0b6:	2320      	movs	r3, #32
 800b0b8:	e003      	b.n	800b0c2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0bc:	fab3 f383 	clz	r3, r3
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	005b      	lsls	r3, r3, #1
 800b0c4:	6879      	ldr	r1, [r7, #4]
 800b0c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	609a      	str	r2, [r3, #8]
}
 800b0d0:	bf00      	nop
 800b0d2:	372c      	adds	r7, #44	@ 0x2c
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <LL_GPIO_SetPinPull>:
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b08b      	sub	sp, #44	@ 0x2c
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68da      	ldr	r2, [r3, #12]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	fa93 f3a3 	rbit	r3, r3
 800b0f6:	613b      	str	r3, [r7, #16]
  return result;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b102:	2320      	movs	r3, #32
 800b104:	e003      	b.n	800b10e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	fab3 f383 	clz	r3, r3
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	005b      	lsls	r3, r3, #1
 800b110:	2103      	movs	r1, #3
 800b112:	fa01 f303 	lsl.w	r3, r1, r3
 800b116:	43db      	mvns	r3, r3
 800b118:	401a      	ands	r2, r3
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	fa93 f3a3 	rbit	r3, r3
 800b124:	61fb      	str	r3, [r7, #28]
  return result;
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b130:	2320      	movs	r3, #32
 800b132:	e003      	b.n	800b13c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b136:	fab3 f383 	clz	r3, r3
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	fa01 f303 	lsl.w	r3, r1, r3
 800b144:	431a      	orrs	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	60da      	str	r2, [r3, #12]
}
 800b14a:	bf00      	nop
 800b14c:	372c      	adds	r7, #44	@ 0x2c
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <LL_GPIO_SetAFPin_0_7>:
{
 800b156:	b480      	push	{r7}
 800b158:	b08b      	sub	sp, #44	@ 0x2c
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	60f8      	str	r0, [r7, #12]
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6a1a      	ldr	r2, [r3, #32]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	fa93 f3a3 	rbit	r3, r3
 800b170:	613b      	str	r3, [r7, #16]
  return result;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d101      	bne.n	800b180 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b17c:	2320      	movs	r3, #32
 800b17e:	e003      	b.n	800b188 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	fab3 f383 	clz	r3, r3
 800b186:	b2db      	uxtb	r3, r3
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	210f      	movs	r1, #15
 800b18c:	fa01 f303 	lsl.w	r3, r1, r3
 800b190:	43db      	mvns	r3, r3
 800b192:	401a      	ands	r2, r3
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	fa93 f3a3 	rbit	r3, r3
 800b19e:	61fb      	str	r3, [r7, #28]
  return result;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b1aa:	2320      	movs	r3, #32
 800b1ac:	e003      	b.n	800b1b6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b0:	fab3 f383 	clz	r3, r3
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	621a      	str	r2, [r3, #32]
}
 800b1c4:	bf00      	nop
 800b1c6:	372c      	adds	r7, #44	@ 0x2c
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <LL_GPIO_SetAFPin_8_15>:
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b08b      	sub	sp, #44	@ 0x2c
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	0a1b      	lsrs	r3, r3, #8
 800b1e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	fa93 f3a3 	rbit	r3, r3
 800b1ec:	613b      	str	r3, [r7, #16]
  return result;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	e003      	b.n	800b204 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	fab3 f383 	clz	r3, r3
 800b202:	b2db      	uxtb	r3, r3
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	210f      	movs	r1, #15
 800b208:	fa01 f303 	lsl.w	r3, r1, r3
 800b20c:	43db      	mvns	r3, r3
 800b20e:	401a      	ands	r2, r3
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	0a1b      	lsrs	r3, r3, #8
 800b214:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	fa93 f3a3 	rbit	r3, r3
 800b21c:	61fb      	str	r3, [r7, #28]
  return result;
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b228:	2320      	movs	r3, #32
 800b22a:	e003      	b.n	800b234 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	fab3 f383 	clz	r3, r3
 800b232:	b2db      	uxtb	r3, r3
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	fa01 f303 	lsl.w	r3, r1, r3
 800b23c:	431a      	orrs	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b242:	bf00      	nop
 800b244:	372c      	adds	r7, #44	@ 0x2c
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b08a      	sub	sp, #40	@ 0x28
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b258:	2300      	movs	r3, #0
 800b25a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	fa93 f3a3 	rbit	r3, r3
 800b26c:	617b      	str	r3, [r7, #20]
  return result;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <LL_GPIO_Init+0x2e>
    return 32U;
 800b278:	2320      	movs	r3, #32
 800b27a:	e003      	b.n	800b284 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	fab3 f383 	clz	r3, r3
 800b282:	b2db      	uxtb	r3, r3
 800b284:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b286:	e057      	b.n	800b338 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	2101      	movs	r1, #1
 800b28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b290:	fa01 f303 	lsl.w	r3, r1, r3
 800b294:	4013      	ands	r3, r2
 800b296:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d049      	beq.n	800b332 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d003      	beq.n	800b2ae <LL_GPIO_Init+0x60>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d10d      	bne.n	800b2ca <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	6a39      	ldr	r1, [r7, #32]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7ff fed3 	bl	800b062 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	6a39      	ldr	r1, [r7, #32]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff feb4 	bl	800b032 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6a39      	ldr	r1, [r7, #32]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff ff02 	bl	800b0dc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d121      	bne.n	800b324 <LL_GPIO_Init+0xd6>
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	fa93 f3a3 	rbit	r3, r3
 800b2ea:	60bb      	str	r3, [r7, #8]
  return result;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <LL_GPIO_Init+0xac>
    return 32U;
 800b2f6:	2320      	movs	r3, #32
 800b2f8:	e003      	b.n	800b302 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	fab3 f383 	clz	r3, r3
 800b300:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b302:	2b07      	cmp	r3, #7
 800b304:	d807      	bhi.n	800b316 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	461a      	mov	r2, r3
 800b30c:	6a39      	ldr	r1, [r7, #32]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff ff21 	bl	800b156 <LL_GPIO_SetAFPin_0_7>
 800b314:	e006      	b.n	800b324 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	461a      	mov	r2, r3
 800b31c:	6a39      	ldr	r1, [r7, #32]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7ff ff56 	bl	800b1d0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	461a      	mov	r2, r3
 800b32a:	6a39      	ldr	r1, [r7, #32]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7ff fe43 	bl	800afb8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b334:	3301      	adds	r3, #1
 800b336:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	fa22 f303 	lsr.w	r3, r2, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1a0      	bne.n	800b288 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3728      	adds	r7, #40	@ 0x28
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800b350:	b480      	push	{r7}
 800b352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b354:	4b04      	ldr	r3, [pc, #16]	@ (800b368 <LL_RCC_GetSysClkSource+0x18>)
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f003 030c 	and.w	r3, r3, #12
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	40023800 	.word	0x40023800

0800b36c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b36c:	b480      	push	{r7}
 800b36e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b370:	4b04      	ldr	r3, [pc, #16]	@ (800b384 <LL_RCC_GetAHBPrescaler+0x18>)
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	40023800 	.word	0x40023800

0800b388 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b38c:	4b04      	ldr	r3, [pc, #16]	@ (800b3a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800b394:	4618      	mov	r0, r3
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	40023800 	.word	0x40023800

0800b3a4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b3a8:	4b04      	ldr	r3, [pc, #16]	@ (800b3bc <LL_RCC_GetAPB2Prescaler+0x18>)
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	40023800 	.word	0x40023800

0800b3c0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b3c4:	4b04      	ldr	r3, [pc, #16]	@ (800b3d8 <LL_RCC_PLL_GetMainSource+0x18>)
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	40023800 	.word	0x40023800

0800b3dc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b3e0:	4b04      	ldr	r3, [pc, #16]	@ (800b3f4 <LL_RCC_PLL_GetN+0x18>)
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	099b      	lsrs	r3, r3, #6
 800b3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	40023800 	.word	0x40023800

0800b3f8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b3fc:	4b04      	ldr	r3, [pc, #16]	@ (800b410 <LL_RCC_PLL_GetP+0x18>)
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b404:	4618      	mov	r0, r3
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	40023800 	.word	0x40023800

0800b414 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b418:	4b04      	ldr	r3, [pc, #16]	@ (800b42c <LL_RCC_PLL_GetDivider+0x18>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800b420:	4618      	mov	r0, r3
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	40023800 	.word	0x40023800

0800b430 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b438:	f000 f820 	bl	800b47c <RCC_GetSystemClockFreq>
 800b43c:	4602      	mov	r2, r0
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4618      	mov	r0, r3
 800b448:	f000 f840 	bl	800b4cc <RCC_GetHCLKClockFreq>
 800b44c:	4602      	mov	r2, r0
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f84e 	bl	800b4f8 <RCC_GetPCLK1ClockFreq>
 800b45c:	4602      	mov	r2, r0
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f85a 	bl	800b520 <RCC_GetPCLK2ClockFreq>
 800b46c:	4602      	mov	r2, r0
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	60da      	str	r2, [r3, #12]
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b486:	f7ff ff63 	bl	800b350 <LL_RCC_GetSysClkSource>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b08      	cmp	r3, #8
 800b48e:	d00c      	beq.n	800b4aa <RCC_GetSystemClockFreq+0x2e>
 800b490:	2b08      	cmp	r3, #8
 800b492:	d80f      	bhi.n	800b4b4 <RCC_GetSystemClockFreq+0x38>
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <RCC_GetSystemClockFreq+0x22>
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d003      	beq.n	800b4a4 <RCC_GetSystemClockFreq+0x28>
 800b49c:	e00a      	b.n	800b4b4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b49e:	4b09      	ldr	r3, [pc, #36]	@ (800b4c4 <RCC_GetSystemClockFreq+0x48>)
 800b4a0:	607b      	str	r3, [r7, #4]
      break;
 800b4a2:	e00a      	b.n	800b4ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b4a4:	4b08      	ldr	r3, [pc, #32]	@ (800b4c8 <RCC_GetSystemClockFreq+0x4c>)
 800b4a6:	607b      	str	r3, [r7, #4]
      break;
 800b4a8:	e007      	b.n	800b4ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b4aa:	2008      	movs	r0, #8
 800b4ac:	f000 f84c 	bl	800b548 <RCC_PLL_GetFreqDomain_SYS>
 800b4b0:	6078      	str	r0, [r7, #4]
      break;
 800b4b2:	e002      	b.n	800b4ba <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b4b4:	4b03      	ldr	r3, [pc, #12]	@ (800b4c4 <RCC_GetSystemClockFreq+0x48>)
 800b4b6:	607b      	str	r3, [r7, #4]
      break;
 800b4b8:	bf00      	nop
  }

  return frequency;
 800b4ba:	687b      	ldr	r3, [r7, #4]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	00f42400 	.word	0x00f42400
 800b4c8:	007a1200 	.word	0x007a1200

0800b4cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b4d4:	f7ff ff4a 	bl	800b36c <LL_RCC_GetAHBPrescaler>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	091b      	lsrs	r3, r3, #4
 800b4dc:	f003 030f 	and.w	r3, r3, #15
 800b4e0:	4a04      	ldr	r2, [pc, #16]	@ (800b4f4 <RCC_GetHCLKClockFreq+0x28>)
 800b4e2:	5cd3      	ldrb	r3, [r2, r3]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	40d3      	lsrs	r3, r2
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800fcb0 	.word	0x0800fcb0

0800b4f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b500:	f7ff ff42 	bl	800b388 <LL_RCC_GetAPB1Prescaler>
 800b504:	4603      	mov	r3, r0
 800b506:	0a9b      	lsrs	r3, r3, #10
 800b508:	4a04      	ldr	r2, [pc, #16]	@ (800b51c <RCC_GetPCLK1ClockFreq+0x24>)
 800b50a:	5cd3      	ldrb	r3, [r2, r3]
 800b50c:	461a      	mov	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	40d3      	lsrs	r3, r2
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	0800fcc0 	.word	0x0800fcc0

0800b520 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b528:	f7ff ff3c 	bl	800b3a4 <LL_RCC_GetAPB2Prescaler>
 800b52c:	4603      	mov	r3, r0
 800b52e:	0b5b      	lsrs	r3, r3, #13
 800b530:	4a04      	ldr	r2, [pc, #16]	@ (800b544 <RCC_GetPCLK2ClockFreq+0x24>)
 800b532:	5cd3      	ldrb	r3, [r2, r3]
 800b534:	461a      	mov	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	40d3      	lsrs	r3, r2
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	0800fcc0 	.word	0x0800fcc0

0800b548 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	2300      	movs	r3, #0
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	2300      	movs	r3, #0
 800b55a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b55c:	f7ff ff30 	bl	800b3c0 <LL_RCC_PLL_GetMainSource>
 800b560:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d004      	beq.n	800b572 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b56e:	d003      	beq.n	800b578 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800b570:	e005      	b.n	800b57e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b572:	4b12      	ldr	r3, [pc, #72]	@ (800b5bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b574:	617b      	str	r3, [r7, #20]
      break;
 800b576:	e005      	b.n	800b584 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b578:	4b11      	ldr	r3, [pc, #68]	@ (800b5c0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800b57a:	617b      	str	r3, [r7, #20]
      break;
 800b57c:	e002      	b.n	800b584 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800b57e:	4b0f      	ldr	r3, [pc, #60]	@ (800b5bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b580:	617b      	str	r3, [r7, #20]
      break;
 800b582:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b08      	cmp	r3, #8
 800b588:	d113      	bne.n	800b5b2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b58a:	f7ff ff43 	bl	800b414 <LL_RCC_PLL_GetDivider>
 800b58e:	4602      	mov	r2, r0
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	fbb3 f4f2 	udiv	r4, r3, r2
 800b596:	f7ff ff21 	bl	800b3dc <LL_RCC_PLL_GetN>
 800b59a:	4603      	mov	r3, r0
 800b59c:	fb03 f404 	mul.w	r4, r3, r4
 800b5a0:	f7ff ff2a 	bl	800b3f8 <LL_RCC_PLL_GetP>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	0c1b      	lsrs	r3, r3, #16
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	fbb4 f3f3 	udiv	r3, r4, r3
 800b5b0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800b5b2:	693b      	ldr	r3, [r7, #16]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	371c      	adds	r7, #28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd90      	pop	{r4, r7, pc}
 800b5bc:	00f42400 	.word	0x00f42400
 800b5c0:	007a1200 	.word	0x007a1200

0800b5c4 <LL_SPI_IsEnabled>:
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5d4:	2b40      	cmp	r3, #64	@ 0x40
 800b5d6:	d101      	bne.n	800b5dc <LL_SPI_IsEnabled+0x18>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e000      	b.n	800b5de <LL_SPI_IsEnabled+0x1a>
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <LL_SPI_SetCRCPolynomial>:
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	611a      	str	r2, [r3, #16]
}
 800b5fe:	bf00      	nop
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff ffd3 	bl	800b5c4 <LL_SPI_IsEnabled>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d139      	bne.n	800b698 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b62c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	6811      	ldr	r1, [r2, #0]
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	6852      	ldr	r2, [r2, #4]
 800b638:	4311      	orrs	r1, r2
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	6892      	ldr	r2, [r2, #8]
 800b63e:	4311      	orrs	r1, r2
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	68d2      	ldr	r2, [r2, #12]
 800b644:	4311      	orrs	r1, r2
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	6912      	ldr	r2, [r2, #16]
 800b64a:	4311      	orrs	r1, r2
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	6952      	ldr	r2, [r2, #20]
 800b650:	4311      	orrs	r1, r2
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	6992      	ldr	r2, [r2, #24]
 800b656:	4311      	orrs	r1, r2
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	69d2      	ldr	r2, [r2, #28]
 800b65c:	4311      	orrs	r1, r2
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	6a12      	ldr	r2, [r2, #32]
 800b662:	430a      	orrs	r2, r1
 800b664:	431a      	orrs	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f023 0204 	bic.w	r2, r3, #4
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	0c1b      	lsrs	r3, r3, #16
 800b678:	431a      	orrs	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b686:	d105      	bne.n	800b694 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff ffab 	bl	800b5ea <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800b694:	2300      	movs	r3, #0
 800b696:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	69db      	ldr	r3, [r3, #28]
 800b69c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	61da      	str	r2, [r3, #28]
  return status;
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <LL_TIM_SetPrescaler>:
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <LL_TIM_SetAutoReload>:
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <LL_TIM_SetRepetitionCounter>:
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <LL_TIM_OC_SetCompareCH1>:
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <LL_TIM_OC_SetCompareCH2>:
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b72e:	bf00      	nop
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <LL_TIM_OC_SetCompareCH3>:
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b74a:	bf00      	nop
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <LL_TIM_OC_SetCompareCH4>:
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800b772:	b480      	push	{r7}
 800b774:	b083      	sub	sp, #12
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	f043 0201 	orr.w	r2, r3, #1
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	615a      	str	r2, [r3, #20]
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
	...

0800b794 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a3d      	ldr	r2, [pc, #244]	@ (800b89c <LL_TIM_Init+0x108>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d013      	beq.n	800b7d4 <LL_TIM_Init+0x40>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7b2:	d00f      	beq.n	800b7d4 <LL_TIM_Init+0x40>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a3a      	ldr	r2, [pc, #232]	@ (800b8a0 <LL_TIM_Init+0x10c>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d00b      	beq.n	800b7d4 <LL_TIM_Init+0x40>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a39      	ldr	r2, [pc, #228]	@ (800b8a4 <LL_TIM_Init+0x110>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d007      	beq.n	800b7d4 <LL_TIM_Init+0x40>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a38      	ldr	r2, [pc, #224]	@ (800b8a8 <LL_TIM_Init+0x114>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d003      	beq.n	800b7d4 <LL_TIM_Init+0x40>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a37      	ldr	r2, [pc, #220]	@ (800b8ac <LL_TIM_Init+0x118>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d106      	bne.n	800b7e2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a2d      	ldr	r2, [pc, #180]	@ (800b89c <LL_TIM_Init+0x108>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d02b      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7f0:	d027      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a2a      	ldr	r2, [pc, #168]	@ (800b8a0 <LL_TIM_Init+0x10c>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d023      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a29      	ldr	r2, [pc, #164]	@ (800b8a4 <LL_TIM_Init+0x110>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d01f      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a28      	ldr	r2, [pc, #160]	@ (800b8a8 <LL_TIM_Init+0x114>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d01b      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a27      	ldr	r2, [pc, #156]	@ (800b8ac <LL_TIM_Init+0x118>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d017      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a26      	ldr	r2, [pc, #152]	@ (800b8b0 <LL_TIM_Init+0x11c>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d013      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a25      	ldr	r2, [pc, #148]	@ (800b8b4 <LL_TIM_Init+0x120>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00f      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a24      	ldr	r2, [pc, #144]	@ (800b8b8 <LL_TIM_Init+0x124>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00b      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a23      	ldr	r2, [pc, #140]	@ (800b8bc <LL_TIM_Init+0x128>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a22      	ldr	r2, [pc, #136]	@ (800b8c0 <LL_TIM_Init+0x12c>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d003      	beq.n	800b842 <LL_TIM_Init+0xae>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a21      	ldr	r2, [pc, #132]	@ (800b8c4 <LL_TIM_Init+0x130>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d106      	bne.n	800b850 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ff34 	bl	800b6ca <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff ff20 	bl	800b6ae <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a0a      	ldr	r2, [pc, #40]	@ (800b89c <LL_TIM_Init+0x108>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d003      	beq.n	800b87e <LL_TIM_Init+0xea>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a0c      	ldr	r2, [pc, #48]	@ (800b8ac <LL_TIM_Init+0x118>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d105      	bne.n	800b88a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff ff2e 	bl	800b6e6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff ff71 	bl	800b772 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	40010000 	.word	0x40010000
 800b8a0:	40000400 	.word	0x40000400
 800b8a4:	40000800 	.word	0x40000800
 800b8a8:	40000c00 	.word	0x40000c00
 800b8ac:	40010400 	.word	0x40010400
 800b8b0:	40014000 	.word	0x40014000
 800b8b4:	40014400 	.word	0x40014400
 800b8b8:	40014800 	.word	0x40014800
 800b8bc:	40001800 	.word	0x40001800
 800b8c0:	40001c00 	.word	0x40001c00
 800b8c4:	40002000 	.word	0x40002000

0800b8c8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8de:	d027      	beq.n	800b930 <LL_TIM_OC_Init+0x68>
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8e6:	d82a      	bhi.n	800b93e <LL_TIM_OC_Init+0x76>
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8ee:	d018      	beq.n	800b922 <LL_TIM_OC_Init+0x5a>
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8f6:	d822      	bhi.n	800b93e <LL_TIM_OC_Init+0x76>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d003      	beq.n	800b906 <LL_TIM_OC_Init+0x3e>
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b10      	cmp	r3, #16
 800b902:	d007      	beq.n	800b914 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800b904:	e01b      	b.n	800b93e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 f81f 	bl	800b94c <OC1Config>
 800b90e:	4603      	mov	r3, r0
 800b910:	75fb      	strb	r3, [r7, #23]
      break;
 800b912:	e015      	b.n	800b940 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 f884 	bl	800ba24 <OC2Config>
 800b91c:	4603      	mov	r3, r0
 800b91e:	75fb      	strb	r3, [r7, #23]
      break;
 800b920:	e00e      	b.n	800b940 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 f8ed 	bl	800bb04 <OC3Config>
 800b92a:	4603      	mov	r3, r0
 800b92c:	75fb      	strb	r3, [r7, #23]
      break;
 800b92e:	e007      	b.n	800b940 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800b930:	6879      	ldr	r1, [r7, #4]
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 f956 	bl	800bbe4 <OC4Config>
 800b938:	4603      	mov	r3, r0
 800b93a:	75fb      	strb	r3, [r7, #23]
      break;
 800b93c:	e000      	b.n	800b940 <LL_TIM_OC_Init+0x78>
      break;
 800b93e:	bf00      	nop
  }

  return result;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a1b      	ldr	r3, [r3, #32]
 800b95a:	f023 0201 	bic.w	r2, r3, #1
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f023 0303 	bic.w	r3, r3, #3
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4313      	orrs	r3, r2
 800b988:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f023 0202 	bic.w	r2, r3, #2
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	4313      	orrs	r3, r2
 800b996:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f023 0201 	bic.w	r2, r3, #1
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba1c <OC1Config+0xd0>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d003      	beq.n	800b9b6 <OC1Config+0x6a>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a1b      	ldr	r2, [pc, #108]	@ (800ba20 <OC1Config+0xd4>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d11e      	bne.n	800b9f4 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f023 0208 	bic.w	r2, r3, #8
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f023 0204 	bic.w	r2, r3, #4
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fe7b 	bl	800b702 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	40010000 	.word	0x40010000
 800ba20:	40010400 	.word	0x40010400

0800ba24 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	f023 0210 	bic.w	r2, r3, #16
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a1b      	ldr	r3, [r3, #32]
 800ba3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f023 0220 	bic.w	r2, r3, #32
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	011b      	lsls	r3, r3, #4
 800ba70:	4313      	orrs	r3, r2
 800ba72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	f023 0210 	bic.w	r2, r3, #16
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	4313      	orrs	r3, r2
 800ba82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a1d      	ldr	r2, [pc, #116]	@ (800bafc <OC2Config+0xd8>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d003      	beq.n	800ba94 <OC2Config+0x70>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a1c      	ldr	r2, [pc, #112]	@ (800bb00 <OC2Config+0xdc>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d11f      	bne.n	800bad4 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	019b      	lsls	r3, r3, #6
 800baa0:	4313      	orrs	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	019b      	lsls	r3, r3, #6
 800bab0:	4313      	orrs	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4313      	orrs	r3, r2
 800bac2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	4313      	orrs	r3, r2
 800bad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff fe19 	bl	800b71e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	40010000 	.word	0x40010000
 800bb00:	40010400 	.word	0x40010400

0800bb04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0303 	bic.w	r3, r3, #3
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	021b      	lsls	r3, r3, #8
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a1d      	ldr	r2, [pc, #116]	@ (800bbdc <OC3Config+0xd8>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d003      	beq.n	800bb72 <OC3Config+0x6e>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a1c      	ldr	r2, [pc, #112]	@ (800bbe0 <OC3Config+0xdc>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d11f      	bne.n	800bbb2 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	029b      	lsls	r3, r3, #10
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	029b      	lsls	r3, r3, #10
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	011b      	lsls	r3, r3, #4
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	69db      	ldr	r3, [r3, #28]
 800bbac:	015b      	lsls	r3, r3, #5
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7ff fdb8 	bl	800b73a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	40010000 	.word	0x40010000
 800bbe0:	40010400 	.word	0x40010400

0800bbe4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	031b      	lsls	r3, r3, #12
 800bc30:	4313      	orrs	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	031b      	lsls	r3, r3, #12
 800bc40:	4313      	orrs	r3, r2
 800bc42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a11      	ldr	r2, [pc, #68]	@ (800bc8c <OC4Config+0xa8>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d003      	beq.n	800bc54 <OC4Config+0x70>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a10      	ldr	r2, [pc, #64]	@ (800bc90 <OC4Config+0xac>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d107      	bne.n	800bc64 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	019b      	lsls	r3, r3, #6
 800bc60:	4313      	orrs	r3, r2
 800bc62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff fd6d 	bl	800b756 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	40010000 	.word	0x40010000
 800bc90:	40010400 	.word	0x40010400

0800bc94 <LL_USART_IsEnabled>:
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bca8:	bf0c      	ite	eq
 800bcaa:	2301      	moveq	r3, #1
 800bcac:	2300      	movne	r3, #0
 800bcae:	b2db      	uxtb	r3, r3
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <LL_USART_SetStopBitsLength>:
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	611a      	str	r2, [r3, #16]
}
 800bcd6:	bf00      	nop
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <LL_USART_SetHWFlowCtrl>:
{
 800bce2:	b480      	push	{r7}
 800bce4:	b083      	sub	sp, #12
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	615a      	str	r2, [r3, #20]
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <LL_USART_SetBaudRate>:
{
 800bd08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd0c:	b0c0      	sub	sp, #256	@ 0x100
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bd14:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800bd18:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800bd1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800bd20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd28:	f040 810c 	bne.w	800bf44 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800bd2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bd30:	2200      	movs	r2, #0
 800bd32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bd36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bd3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bd3e:	4622      	mov	r2, r4
 800bd40:	462b      	mov	r3, r5
 800bd42:	1891      	adds	r1, r2, r2
 800bd44:	6639      	str	r1, [r7, #96]	@ 0x60
 800bd46:	415b      	adcs	r3, r3
 800bd48:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd4a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800bd4e:	4621      	mov	r1, r4
 800bd50:	eb12 0801 	adds.w	r8, r2, r1
 800bd54:	4629      	mov	r1, r5
 800bd56:	eb43 0901 	adc.w	r9, r3, r1
 800bd5a:	f04f 0200 	mov.w	r2, #0
 800bd5e:	f04f 0300 	mov.w	r3, #0
 800bd62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd6e:	4690      	mov	r8, r2
 800bd70:	4699      	mov	r9, r3
 800bd72:	4623      	mov	r3, r4
 800bd74:	eb18 0303 	adds.w	r3, r8, r3
 800bd78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	eb49 0303 	adc.w	r3, r9, r3
 800bd82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	469a      	mov	sl, r3
 800bd8e:	4693      	mov	fp, r2
 800bd90:	eb1a 030a 	adds.w	r3, sl, sl
 800bd94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd96:	eb4b 030b 	adc.w	r3, fp, fp
 800bd9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bda0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bda4:	f7f4 ff00 	bl	8000ba8 <__aeabi_uldivmod>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4b64      	ldr	r3, [pc, #400]	@ (800bf40 <LL_USART_SetBaudRate+0x238>)
 800bdae:	fba3 2302 	umull	r2, r3, r3, r2
 800bdb2:	095b      	lsrs	r3, r3, #5
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	b29c      	uxth	r4, r3
 800bdba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bdc4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bdc8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800bdcc:	4642      	mov	r2, r8
 800bdce:	464b      	mov	r3, r9
 800bdd0:	1891      	adds	r1, r2, r2
 800bdd2:	6539      	str	r1, [r7, #80]	@ 0x50
 800bdd4:	415b      	adcs	r3, r3
 800bdd6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bddc:	4641      	mov	r1, r8
 800bdde:	1851      	adds	r1, r2, r1
 800bde0:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bde2:	4649      	mov	r1, r9
 800bde4:	414b      	adcs	r3, r1
 800bde6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bde8:	f04f 0200 	mov.w	r2, #0
 800bdec:	f04f 0300 	mov.w	r3, #0
 800bdf0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800bdf4:	4659      	mov	r1, fp
 800bdf6:	00cb      	lsls	r3, r1, #3
 800bdf8:	4651      	mov	r1, sl
 800bdfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdfe:	4651      	mov	r1, sl
 800be00:	00ca      	lsls	r2, r1, #3
 800be02:	4610      	mov	r0, r2
 800be04:	4619      	mov	r1, r3
 800be06:	4603      	mov	r3, r0
 800be08:	4642      	mov	r2, r8
 800be0a:	189b      	adds	r3, r3, r2
 800be0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be10:	464b      	mov	r3, r9
 800be12:	460a      	mov	r2, r1
 800be14:	eb42 0303 	adc.w	r3, r2, r3
 800be18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800be20:	2200      	movs	r2, #0
 800be22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be26:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800be2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800be2e:	460b      	mov	r3, r1
 800be30:	18db      	adds	r3, r3, r3
 800be32:	643b      	str	r3, [r7, #64]	@ 0x40
 800be34:	4613      	mov	r3, r2
 800be36:	eb42 0303 	adc.w	r3, r2, r3
 800be3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800be3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800be40:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800be44:	f7f4 feb0 	bl	8000ba8 <__aeabi_uldivmod>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4611      	mov	r1, r2
 800be4e:	4b3c      	ldr	r3, [pc, #240]	@ (800bf40 <LL_USART_SetBaudRate+0x238>)
 800be50:	fba3 2301 	umull	r2, r3, r3, r1
 800be54:	095b      	lsrs	r3, r3, #5
 800be56:	2264      	movs	r2, #100	@ 0x64
 800be58:	fb02 f303 	mul.w	r3, r2, r3
 800be5c:	1acb      	subs	r3, r1, r3
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800be64:	4b36      	ldr	r3, [pc, #216]	@ (800bf40 <LL_USART_SetBaudRate+0x238>)
 800be66:	fba3 2302 	umull	r2, r3, r3, r2
 800be6a:	095b      	lsrs	r3, r3, #5
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	b29b      	uxth	r3, r3
 800be72:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800be76:	b29b      	uxth	r3, r3
 800be78:	4423      	add	r3, r4
 800be7a:	b29c      	uxth	r4, r3
 800be7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800be80:	2200      	movs	r2, #0
 800be82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be86:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800be8a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800be8e:	4642      	mov	r2, r8
 800be90:	464b      	mov	r3, r9
 800be92:	1891      	adds	r1, r2, r2
 800be94:	63b9      	str	r1, [r7, #56]	@ 0x38
 800be96:	415b      	adcs	r3, r3
 800be98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800be9e:	4641      	mov	r1, r8
 800bea0:	1851      	adds	r1, r2, r1
 800bea2:	6339      	str	r1, [r7, #48]	@ 0x30
 800bea4:	4649      	mov	r1, r9
 800bea6:	414b      	adcs	r3, r1
 800bea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	f04f 0300 	mov.w	r3, #0
 800beb2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800beb6:	4659      	mov	r1, fp
 800beb8:	00cb      	lsls	r3, r1, #3
 800beba:	4651      	mov	r1, sl
 800bebc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bec0:	4651      	mov	r1, sl
 800bec2:	00ca      	lsls	r2, r1, #3
 800bec4:	4610      	mov	r0, r2
 800bec6:	4619      	mov	r1, r3
 800bec8:	4603      	mov	r3, r0
 800beca:	4642      	mov	r2, r8
 800becc:	189b      	adds	r3, r3, r2
 800bece:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bed2:	464b      	mov	r3, r9
 800bed4:	460a      	mov	r2, r1
 800bed6:	eb42 0303 	adc.w	r3, r2, r3
 800beda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bede:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bee8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800beec:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bef0:	460b      	mov	r3, r1
 800bef2:	18db      	adds	r3, r3, r3
 800bef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bef6:	4613      	mov	r3, r2
 800bef8:	eb42 0303 	adc.w	r3, r2, r3
 800befc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800befe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bf02:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800bf06:	f7f4 fe4f 	bl	8000ba8 <__aeabi_uldivmod>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4b0c      	ldr	r3, [pc, #48]	@ (800bf40 <LL_USART_SetBaudRate+0x238>)
 800bf10:	fba3 1302 	umull	r1, r3, r3, r2
 800bf14:	095b      	lsrs	r3, r3, #5
 800bf16:	2164      	movs	r1, #100	@ 0x64
 800bf18:	fb01 f303 	mul.w	r3, r1, r3
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	3332      	adds	r3, #50	@ 0x32
 800bf22:	4a07      	ldr	r2, [pc, #28]	@ (800bf40 <LL_USART_SetBaudRate+0x238>)
 800bf24:	fba2 2303 	umull	r2, r3, r2, r3
 800bf28:	095b      	lsrs	r3, r3, #5
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	f003 0307 	and.w	r3, r3, #7
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	4423      	add	r3, r4
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	461a      	mov	r2, r3
 800bf38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf3c:	609a      	str	r2, [r3, #8]
}
 800bf3e:	e108      	b.n	800c152 <LL_USART_SetBaudRate+0x44a>
 800bf40:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800bf44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bf4e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bf52:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800bf56:	4642      	mov	r2, r8
 800bf58:	464b      	mov	r3, r9
 800bf5a:	1891      	adds	r1, r2, r2
 800bf5c:	6239      	str	r1, [r7, #32]
 800bf5e:	415b      	adcs	r3, r3
 800bf60:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf66:	4641      	mov	r1, r8
 800bf68:	1854      	adds	r4, r2, r1
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	eb43 0501 	adc.w	r5, r3, r1
 800bf70:	f04f 0200 	mov.w	r2, #0
 800bf74:	f04f 0300 	mov.w	r3, #0
 800bf78:	00eb      	lsls	r3, r5, #3
 800bf7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf7e:	00e2      	lsls	r2, r4, #3
 800bf80:	4614      	mov	r4, r2
 800bf82:	461d      	mov	r5, r3
 800bf84:	4643      	mov	r3, r8
 800bf86:	18e3      	adds	r3, r4, r3
 800bf88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf8c:	464b      	mov	r3, r9
 800bf8e:	eb45 0303 	adc.w	r3, r5, r3
 800bf92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bf96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bfa0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800bfa4:	f04f 0200 	mov.w	r2, #0
 800bfa8:	f04f 0300 	mov.w	r3, #0
 800bfac:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	008b      	lsls	r3, r1, #2
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfba:	4621      	mov	r1, r4
 800bfbc:	008a      	lsls	r2, r1, #2
 800bfbe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800bfc2:	f7f4 fdf1 	bl	8000ba8 <__aeabi_uldivmod>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4b65      	ldr	r3, [pc, #404]	@ (800c160 <LL_USART_SetBaudRate+0x458>)
 800bfcc:	fba3 2302 	umull	r2, r3, r3, r2
 800bfd0:	095b      	lsrs	r3, r3, #5
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	011b      	lsls	r3, r3, #4
 800bfd6:	b29c      	uxth	r4, r3
 800bfd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfe2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bfe6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800bfea:	4642      	mov	r2, r8
 800bfec:	464b      	mov	r3, r9
 800bfee:	1891      	adds	r1, r2, r2
 800bff0:	61b9      	str	r1, [r7, #24]
 800bff2:	415b      	adcs	r3, r3
 800bff4:	61fb      	str	r3, [r7, #28]
 800bff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bffa:	4641      	mov	r1, r8
 800bffc:	1851      	adds	r1, r2, r1
 800bffe:	6139      	str	r1, [r7, #16]
 800c000:	4649      	mov	r1, r9
 800c002:	414b      	adcs	r3, r1
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	f04f 0200 	mov.w	r2, #0
 800c00a:	f04f 0300 	mov.w	r3, #0
 800c00e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c012:	4659      	mov	r1, fp
 800c014:	00cb      	lsls	r3, r1, #3
 800c016:	4651      	mov	r1, sl
 800c018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c01c:	4651      	mov	r1, sl
 800c01e:	00ca      	lsls	r2, r1, #3
 800c020:	4610      	mov	r0, r2
 800c022:	4619      	mov	r1, r3
 800c024:	4603      	mov	r3, r0
 800c026:	4642      	mov	r2, r8
 800c028:	189b      	adds	r3, r3, r2
 800c02a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c02e:	464b      	mov	r3, r9
 800c030:	460a      	mov	r2, r1
 800c032:	eb42 0303 	adc.w	r3, r2, r3
 800c036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c03a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c03e:	2200      	movs	r2, #0
 800c040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c044:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c048:	f04f 0200 	mov.w	r2, #0
 800c04c:	f04f 0300 	mov.w	r3, #0
 800c050:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800c054:	4649      	mov	r1, r9
 800c056:	008b      	lsls	r3, r1, #2
 800c058:	4641      	mov	r1, r8
 800c05a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c05e:	4641      	mov	r1, r8
 800c060:	008a      	lsls	r2, r1, #2
 800c062:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800c066:	f7f4 fd9f 	bl	8000ba8 <__aeabi_uldivmod>
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	4611      	mov	r1, r2
 800c070:	4b3b      	ldr	r3, [pc, #236]	@ (800c160 <LL_USART_SetBaudRate+0x458>)
 800c072:	fba3 2301 	umull	r2, r3, r3, r1
 800c076:	095b      	lsrs	r3, r3, #5
 800c078:	2264      	movs	r2, #100	@ 0x64
 800c07a:	fb02 f303 	mul.w	r3, r2, r3
 800c07e:	1acb      	subs	r3, r1, r3
 800c080:	011b      	lsls	r3, r3, #4
 800c082:	3332      	adds	r3, #50	@ 0x32
 800c084:	4a36      	ldr	r2, [pc, #216]	@ (800c160 <LL_USART_SetBaudRate+0x458>)
 800c086:	fba2 2303 	umull	r2, r3, r2, r3
 800c08a:	095b      	lsrs	r3, r3, #5
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c092:	b29b      	uxth	r3, r3
 800c094:	4423      	add	r3, r4
 800c096:	b29c      	uxth	r4, r3
 800c098:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c09c:	2200      	movs	r2, #0
 800c09e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c0a0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c0a2:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c0a6:	4642      	mov	r2, r8
 800c0a8:	464b      	mov	r3, r9
 800c0aa:	1891      	adds	r1, r2, r2
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	415b      	adcs	r3, r3
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0b6:	4641      	mov	r1, r8
 800c0b8:	1851      	adds	r1, r2, r1
 800c0ba:	6039      	str	r1, [r7, #0]
 800c0bc:	4649      	mov	r1, r9
 800c0be:	414b      	adcs	r3, r1
 800c0c0:	607b      	str	r3, [r7, #4]
 800c0c2:	f04f 0200 	mov.w	r2, #0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c0ce:	4659      	mov	r1, fp
 800c0d0:	00cb      	lsls	r3, r1, #3
 800c0d2:	4651      	mov	r1, sl
 800c0d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0d8:	4651      	mov	r1, sl
 800c0da:	00ca      	lsls	r2, r1, #3
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	4642      	mov	r2, r8
 800c0e4:	189b      	adds	r3, r3, r2
 800c0e6:	673b      	str	r3, [r7, #112]	@ 0x70
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	460a      	mov	r2, r1
 800c0ec:	eb42 0303 	adc.w	r3, r2, r3
 800c0f0:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c0fc:	f04f 0200 	mov.w	r2, #0
 800c100:	f04f 0300 	mov.w	r3, #0
 800c104:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800c108:	4649      	mov	r1, r9
 800c10a:	008b      	lsls	r3, r1, #2
 800c10c:	4641      	mov	r1, r8
 800c10e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c112:	4641      	mov	r1, r8
 800c114:	008a      	lsls	r2, r1, #2
 800c116:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c11a:	f7f4 fd45 	bl	8000ba8 <__aeabi_uldivmod>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	4b0f      	ldr	r3, [pc, #60]	@ (800c160 <LL_USART_SetBaudRate+0x458>)
 800c124:	fba3 1302 	umull	r1, r3, r3, r2
 800c128:	095b      	lsrs	r3, r3, #5
 800c12a:	2164      	movs	r1, #100	@ 0x64
 800c12c:	fb01 f303 	mul.w	r3, r1, r3
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	011b      	lsls	r3, r3, #4
 800c134:	3332      	adds	r3, #50	@ 0x32
 800c136:	4a0a      	ldr	r2, [pc, #40]	@ (800c160 <LL_USART_SetBaudRate+0x458>)
 800c138:	fba2 2303 	umull	r2, r3, r2, r3
 800c13c:	095b      	lsrs	r3, r3, #5
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f003 030f 	and.w	r3, r3, #15
 800c144:	b29b      	uxth	r3, r3
 800c146:	4423      	add	r3, r4
 800c148:	b29b      	uxth	r3, r3
 800c14a:	461a      	mov	r2, r3
 800c14c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c150:	609a      	str	r2, [r3, #8]
}
 800c152:	bf00      	nop
 800c154:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c158:	46bd      	mov	sp, r7
 800c15a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c15e:	bf00      	nop
 800c160:	51eb851f 	.word	0x51eb851f

0800c164 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c172:	2300      	movs	r3, #0
 800c174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff fd8c 	bl	800bc94 <LL_USART_IsEnabled>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d15e      	bne.n	800c240 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800c18a:	f023 030c 	bic.w	r3, r3, #12
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	6851      	ldr	r1, [r2, #4]
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	68d2      	ldr	r2, [r2, #12]
 800c196:	4311      	orrs	r1, r2
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	6912      	ldr	r2, [r2, #16]
 800c19c:	4311      	orrs	r1, r2
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	6992      	ldr	r2, [r2, #24]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	431a      	orrs	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff fd83 	bl	800bcbc <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff fd90 	bl	800bce2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c1c2:	f107 0308 	add.w	r3, r7, #8
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff f932 	bl	800b430 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a1f      	ldr	r2, [pc, #124]	@ (800c24c <LL_USART_Init+0xe8>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d102      	bne.n	800c1da <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	e021      	b.n	800c21e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a1c      	ldr	r2, [pc, #112]	@ (800c250 <LL_USART_Init+0xec>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d102      	bne.n	800c1e8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	61bb      	str	r3, [r7, #24]
 800c1e6:	e01a      	b.n	800c21e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c254 <LL_USART_Init+0xf0>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d102      	bne.n	800c1f6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	61bb      	str	r3, [r7, #24]
 800c1f4:	e013      	b.n	800c21e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a17      	ldr	r2, [pc, #92]	@ (800c258 <LL_USART_Init+0xf4>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d102      	bne.n	800c204 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	61bb      	str	r3, [r7, #24]
 800c202:	e00c      	b.n	800c21e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a15      	ldr	r2, [pc, #84]	@ (800c25c <LL_USART_Init+0xf8>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d102      	bne.n	800c212 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	e005      	b.n	800c21e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a12      	ldr	r2, [pc, #72]	@ (800c260 <LL_USART_Init+0xfc>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d101      	bne.n	800c21e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00d      	beq.n	800c240 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d009      	beq.n	800c240 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800c22c:	2300      	movs	r3, #0
 800c22e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c238:	69b9      	ldr	r1, [r7, #24]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff fd64 	bl	800bd08 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c240:	7ffb      	ldrb	r3, [r7, #31]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	40011000 	.word	0x40011000
 800c250:	40004400 	.word	0x40004400
 800c254:	40004800 	.word	0x40004800
 800c258:	40011400 	.word	0x40011400
 800c25c:	40004c00 	.word	0x40004c00
 800c260:	40005000 	.word	0x40005000

0800c264 <__cvt>:
 800c264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	ec57 6b10 	vmov	r6, r7, d0
 800c26c:	2f00      	cmp	r7, #0
 800c26e:	460c      	mov	r4, r1
 800c270:	4619      	mov	r1, r3
 800c272:	463b      	mov	r3, r7
 800c274:	bfbb      	ittet	lt
 800c276:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c27a:	461f      	movlt	r7, r3
 800c27c:	2300      	movge	r3, #0
 800c27e:	232d      	movlt	r3, #45	@ 0x2d
 800c280:	700b      	strb	r3, [r1, #0]
 800c282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c284:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c288:	4691      	mov	r9, r2
 800c28a:	f023 0820 	bic.w	r8, r3, #32
 800c28e:	bfbc      	itt	lt
 800c290:	4632      	movlt	r2, r6
 800c292:	4616      	movlt	r6, r2
 800c294:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c298:	d005      	beq.n	800c2a6 <__cvt+0x42>
 800c29a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c29e:	d100      	bne.n	800c2a2 <__cvt+0x3e>
 800c2a0:	3401      	adds	r4, #1
 800c2a2:	2102      	movs	r1, #2
 800c2a4:	e000      	b.n	800c2a8 <__cvt+0x44>
 800c2a6:	2103      	movs	r1, #3
 800c2a8:	ab03      	add	r3, sp, #12
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	ab02      	add	r3, sp, #8
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	ec47 6b10 	vmov	d0, r6, r7
 800c2b4:	4653      	mov	r3, sl
 800c2b6:	4622      	mov	r2, r4
 800c2b8:	f000 ff3e 	bl	800d138 <_dtoa_r>
 800c2bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	d119      	bne.n	800c2f8 <__cvt+0x94>
 800c2c4:	f019 0f01 	tst.w	r9, #1
 800c2c8:	d00e      	beq.n	800c2e8 <__cvt+0x84>
 800c2ca:	eb00 0904 	add.w	r9, r0, r4
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	f7f4 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2da:	b108      	cbz	r0, 800c2e0 <__cvt+0x7c>
 800c2dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2e0:	2230      	movs	r2, #48	@ 0x30
 800c2e2:	9b03      	ldr	r3, [sp, #12]
 800c2e4:	454b      	cmp	r3, r9
 800c2e6:	d31e      	bcc.n	800c326 <__cvt+0xc2>
 800c2e8:	9b03      	ldr	r3, [sp, #12]
 800c2ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2ec:	1b5b      	subs	r3, r3, r5
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	b004      	add	sp, #16
 800c2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2fc:	eb00 0904 	add.w	r9, r0, r4
 800c300:	d1e5      	bne.n	800c2ce <__cvt+0x6a>
 800c302:	7803      	ldrb	r3, [r0, #0]
 800c304:	2b30      	cmp	r3, #48	@ 0x30
 800c306:	d10a      	bne.n	800c31e <__cvt+0xba>
 800c308:	2200      	movs	r2, #0
 800c30a:	2300      	movs	r3, #0
 800c30c:	4630      	mov	r0, r6
 800c30e:	4639      	mov	r1, r7
 800c310:	f7f4 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800c314:	b918      	cbnz	r0, 800c31e <__cvt+0xba>
 800c316:	f1c4 0401 	rsb	r4, r4, #1
 800c31a:	f8ca 4000 	str.w	r4, [sl]
 800c31e:	f8da 3000 	ldr.w	r3, [sl]
 800c322:	4499      	add	r9, r3
 800c324:	e7d3      	b.n	800c2ce <__cvt+0x6a>
 800c326:	1c59      	adds	r1, r3, #1
 800c328:	9103      	str	r1, [sp, #12]
 800c32a:	701a      	strb	r2, [r3, #0]
 800c32c:	e7d9      	b.n	800c2e2 <__cvt+0x7e>

0800c32e <__exponent>:
 800c32e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c330:	2900      	cmp	r1, #0
 800c332:	bfba      	itte	lt
 800c334:	4249      	neglt	r1, r1
 800c336:	232d      	movlt	r3, #45	@ 0x2d
 800c338:	232b      	movge	r3, #43	@ 0x2b
 800c33a:	2909      	cmp	r1, #9
 800c33c:	7002      	strb	r2, [r0, #0]
 800c33e:	7043      	strb	r3, [r0, #1]
 800c340:	dd29      	ble.n	800c396 <__exponent+0x68>
 800c342:	f10d 0307 	add.w	r3, sp, #7
 800c346:	461d      	mov	r5, r3
 800c348:	270a      	movs	r7, #10
 800c34a:	461a      	mov	r2, r3
 800c34c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c350:	fb07 1416 	mls	r4, r7, r6, r1
 800c354:	3430      	adds	r4, #48	@ 0x30
 800c356:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c35a:	460c      	mov	r4, r1
 800c35c:	2c63      	cmp	r4, #99	@ 0x63
 800c35e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c362:	4631      	mov	r1, r6
 800c364:	dcf1      	bgt.n	800c34a <__exponent+0x1c>
 800c366:	3130      	adds	r1, #48	@ 0x30
 800c368:	1e94      	subs	r4, r2, #2
 800c36a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c36e:	1c41      	adds	r1, r0, #1
 800c370:	4623      	mov	r3, r4
 800c372:	42ab      	cmp	r3, r5
 800c374:	d30a      	bcc.n	800c38c <__exponent+0x5e>
 800c376:	f10d 0309 	add.w	r3, sp, #9
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	42ac      	cmp	r4, r5
 800c37e:	bf88      	it	hi
 800c380:	2300      	movhi	r3, #0
 800c382:	3302      	adds	r3, #2
 800c384:	4403      	add	r3, r0
 800c386:	1a18      	subs	r0, r3, r0
 800c388:	b003      	add	sp, #12
 800c38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c38c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c390:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c394:	e7ed      	b.n	800c372 <__exponent+0x44>
 800c396:	2330      	movs	r3, #48	@ 0x30
 800c398:	3130      	adds	r1, #48	@ 0x30
 800c39a:	7083      	strb	r3, [r0, #2]
 800c39c:	70c1      	strb	r1, [r0, #3]
 800c39e:	1d03      	adds	r3, r0, #4
 800c3a0:	e7f1      	b.n	800c386 <__exponent+0x58>
	...

0800c3a4 <_printf_float>:
 800c3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a8:	b08d      	sub	sp, #52	@ 0x34
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c3b0:	4616      	mov	r6, r2
 800c3b2:	461f      	mov	r7, r3
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	f000 fdbf 	bl	800cf38 <_localeconv_r>
 800c3ba:	6803      	ldr	r3, [r0, #0]
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f3 ff56 	bl	8000270 <strlen>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3cc:	9005      	str	r0, [sp, #20]
 800c3ce:	3307      	adds	r3, #7
 800c3d0:	f023 0307 	bic.w	r3, r3, #7
 800c3d4:	f103 0208 	add.w	r2, r3, #8
 800c3d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3dc:	f8d4 b000 	ldr.w	fp, [r4]
 800c3e0:	f8c8 2000 	str.w	r2, [r8]
 800c3e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c3ec:	9307      	str	r3, [sp, #28]
 800c3ee:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3fa:	4b9c      	ldr	r3, [pc, #624]	@ (800c66c <_printf_float+0x2c8>)
 800c3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c400:	f7f4 fb94 	bl	8000b2c <__aeabi_dcmpun>
 800c404:	bb70      	cbnz	r0, 800c464 <_printf_float+0xc0>
 800c406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c40a:	4b98      	ldr	r3, [pc, #608]	@ (800c66c <_printf_float+0x2c8>)
 800c40c:	f04f 32ff 	mov.w	r2, #4294967295
 800c410:	f7f4 fb6e 	bl	8000af0 <__aeabi_dcmple>
 800c414:	bb30      	cbnz	r0, 800c464 <_printf_float+0xc0>
 800c416:	2200      	movs	r2, #0
 800c418:	2300      	movs	r3, #0
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f4 fb5d 	bl	8000adc <__aeabi_dcmplt>
 800c422:	b110      	cbz	r0, 800c42a <_printf_float+0x86>
 800c424:	232d      	movs	r3, #45	@ 0x2d
 800c426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c42a:	4a91      	ldr	r2, [pc, #580]	@ (800c670 <_printf_float+0x2cc>)
 800c42c:	4b91      	ldr	r3, [pc, #580]	@ (800c674 <_printf_float+0x2d0>)
 800c42e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c432:	bf94      	ite	ls
 800c434:	4690      	movls	r8, r2
 800c436:	4698      	movhi	r8, r3
 800c438:	2303      	movs	r3, #3
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	f02b 0304 	bic.w	r3, fp, #4
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	f04f 0900 	mov.w	r9, #0
 800c446:	9700      	str	r7, [sp, #0]
 800c448:	4633      	mov	r3, r6
 800c44a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f9d2 	bl	800c7f8 <_printf_common>
 800c454:	3001      	adds	r0, #1
 800c456:	f040 808d 	bne.w	800c574 <_printf_float+0x1d0>
 800c45a:	f04f 30ff 	mov.w	r0, #4294967295
 800c45e:	b00d      	add	sp, #52	@ 0x34
 800c460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c464:	4642      	mov	r2, r8
 800c466:	464b      	mov	r3, r9
 800c468:	4640      	mov	r0, r8
 800c46a:	4649      	mov	r1, r9
 800c46c:	f7f4 fb5e 	bl	8000b2c <__aeabi_dcmpun>
 800c470:	b140      	cbz	r0, 800c484 <_printf_float+0xe0>
 800c472:	464b      	mov	r3, r9
 800c474:	2b00      	cmp	r3, #0
 800c476:	bfbc      	itt	lt
 800c478:	232d      	movlt	r3, #45	@ 0x2d
 800c47a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c47e:	4a7e      	ldr	r2, [pc, #504]	@ (800c678 <_printf_float+0x2d4>)
 800c480:	4b7e      	ldr	r3, [pc, #504]	@ (800c67c <_printf_float+0x2d8>)
 800c482:	e7d4      	b.n	800c42e <_printf_float+0x8a>
 800c484:	6863      	ldr	r3, [r4, #4]
 800c486:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c48a:	9206      	str	r2, [sp, #24]
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	d13b      	bne.n	800c508 <_printf_float+0x164>
 800c490:	2306      	movs	r3, #6
 800c492:	6063      	str	r3, [r4, #4]
 800c494:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c498:	2300      	movs	r3, #0
 800c49a:	6022      	str	r2, [r4, #0]
 800c49c:	9303      	str	r3, [sp, #12]
 800c49e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c4a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c4a4:	ab09      	add	r3, sp, #36	@ 0x24
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	6861      	ldr	r1, [r4, #4]
 800c4aa:	ec49 8b10 	vmov	d0, r8, r9
 800c4ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f7ff fed6 	bl	800c264 <__cvt>
 800c4b8:	9b06      	ldr	r3, [sp, #24]
 800c4ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4bc:	2b47      	cmp	r3, #71	@ 0x47
 800c4be:	4680      	mov	r8, r0
 800c4c0:	d129      	bne.n	800c516 <_printf_float+0x172>
 800c4c2:	1cc8      	adds	r0, r1, #3
 800c4c4:	db02      	blt.n	800c4cc <_printf_float+0x128>
 800c4c6:	6863      	ldr	r3, [r4, #4]
 800c4c8:	4299      	cmp	r1, r3
 800c4ca:	dd41      	ble.n	800c550 <_printf_float+0x1ac>
 800c4cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4d0:	fa5f fa8a 	uxtb.w	sl, sl
 800c4d4:	3901      	subs	r1, #1
 800c4d6:	4652      	mov	r2, sl
 800c4d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4de:	f7ff ff26 	bl	800c32e <__exponent>
 800c4e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4e4:	1813      	adds	r3, r2, r0
 800c4e6:	2a01      	cmp	r2, #1
 800c4e8:	4681      	mov	r9, r0
 800c4ea:	6123      	str	r3, [r4, #16]
 800c4ec:	dc02      	bgt.n	800c4f4 <_printf_float+0x150>
 800c4ee:	6822      	ldr	r2, [r4, #0]
 800c4f0:	07d2      	lsls	r2, r2, #31
 800c4f2:	d501      	bpl.n	800c4f8 <_printf_float+0x154>
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	6123      	str	r3, [r4, #16]
 800c4f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d0a2      	beq.n	800c446 <_printf_float+0xa2>
 800c500:	232d      	movs	r3, #45	@ 0x2d
 800c502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c506:	e79e      	b.n	800c446 <_printf_float+0xa2>
 800c508:	9a06      	ldr	r2, [sp, #24]
 800c50a:	2a47      	cmp	r2, #71	@ 0x47
 800c50c:	d1c2      	bne.n	800c494 <_printf_float+0xf0>
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1c0      	bne.n	800c494 <_printf_float+0xf0>
 800c512:	2301      	movs	r3, #1
 800c514:	e7bd      	b.n	800c492 <_printf_float+0xee>
 800c516:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c51a:	d9db      	bls.n	800c4d4 <_printf_float+0x130>
 800c51c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c520:	d118      	bne.n	800c554 <_printf_float+0x1b0>
 800c522:	2900      	cmp	r1, #0
 800c524:	6863      	ldr	r3, [r4, #4]
 800c526:	dd0b      	ble.n	800c540 <_printf_float+0x19c>
 800c528:	6121      	str	r1, [r4, #16]
 800c52a:	b913      	cbnz	r3, 800c532 <_printf_float+0x18e>
 800c52c:	6822      	ldr	r2, [r4, #0]
 800c52e:	07d0      	lsls	r0, r2, #31
 800c530:	d502      	bpl.n	800c538 <_printf_float+0x194>
 800c532:	3301      	adds	r3, #1
 800c534:	440b      	add	r3, r1
 800c536:	6123      	str	r3, [r4, #16]
 800c538:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c53a:	f04f 0900 	mov.w	r9, #0
 800c53e:	e7db      	b.n	800c4f8 <_printf_float+0x154>
 800c540:	b913      	cbnz	r3, 800c548 <_printf_float+0x1a4>
 800c542:	6822      	ldr	r2, [r4, #0]
 800c544:	07d2      	lsls	r2, r2, #31
 800c546:	d501      	bpl.n	800c54c <_printf_float+0x1a8>
 800c548:	3302      	adds	r3, #2
 800c54a:	e7f4      	b.n	800c536 <_printf_float+0x192>
 800c54c:	2301      	movs	r3, #1
 800c54e:	e7f2      	b.n	800c536 <_printf_float+0x192>
 800c550:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c556:	4299      	cmp	r1, r3
 800c558:	db05      	blt.n	800c566 <_printf_float+0x1c2>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	6121      	str	r1, [r4, #16]
 800c55e:	07d8      	lsls	r0, r3, #31
 800c560:	d5ea      	bpl.n	800c538 <_printf_float+0x194>
 800c562:	1c4b      	adds	r3, r1, #1
 800c564:	e7e7      	b.n	800c536 <_printf_float+0x192>
 800c566:	2900      	cmp	r1, #0
 800c568:	bfd4      	ite	le
 800c56a:	f1c1 0202 	rsble	r2, r1, #2
 800c56e:	2201      	movgt	r2, #1
 800c570:	4413      	add	r3, r2
 800c572:	e7e0      	b.n	800c536 <_printf_float+0x192>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	055a      	lsls	r2, r3, #21
 800c578:	d407      	bmi.n	800c58a <_printf_float+0x1e6>
 800c57a:	6923      	ldr	r3, [r4, #16]
 800c57c:	4642      	mov	r2, r8
 800c57e:	4631      	mov	r1, r6
 800c580:	4628      	mov	r0, r5
 800c582:	47b8      	blx	r7
 800c584:	3001      	adds	r0, #1
 800c586:	d12b      	bne.n	800c5e0 <_printf_float+0x23c>
 800c588:	e767      	b.n	800c45a <_printf_float+0xb6>
 800c58a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c58e:	f240 80dd 	bls.w	800c74c <_printf_float+0x3a8>
 800c592:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c596:	2200      	movs	r2, #0
 800c598:	2300      	movs	r3, #0
 800c59a:	f7f4 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d033      	beq.n	800c60a <_printf_float+0x266>
 800c5a2:	4a37      	ldr	r2, [pc, #220]	@ (800c680 <_printf_float+0x2dc>)
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	47b8      	blx	r7
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f43f af54 	beq.w	800c45a <_printf_float+0xb6>
 800c5b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c5b6:	4543      	cmp	r3, r8
 800c5b8:	db02      	blt.n	800c5c0 <_printf_float+0x21c>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	07d8      	lsls	r0, r3, #31
 800c5be:	d50f      	bpl.n	800c5e0 <_printf_float+0x23c>
 800c5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f af45 	beq.w	800c45a <_printf_float+0xb6>
 800c5d0:	f04f 0900 	mov.w	r9, #0
 800c5d4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5d8:	f104 0a1a 	add.w	sl, r4, #26
 800c5dc:	45c8      	cmp	r8, r9
 800c5de:	dc09      	bgt.n	800c5f4 <_printf_float+0x250>
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	079b      	lsls	r3, r3, #30
 800c5e4:	f100 8103 	bmi.w	800c7ee <_printf_float+0x44a>
 800c5e8:	68e0      	ldr	r0, [r4, #12]
 800c5ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5ec:	4298      	cmp	r0, r3
 800c5ee:	bfb8      	it	lt
 800c5f0:	4618      	movlt	r0, r3
 800c5f2:	e734      	b.n	800c45e <_printf_float+0xba>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f af2b 	beq.w	800c45a <_printf_float+0xb6>
 800c604:	f109 0901 	add.w	r9, r9, #1
 800c608:	e7e8      	b.n	800c5dc <_printf_float+0x238>
 800c60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dc39      	bgt.n	800c684 <_printf_float+0x2e0>
 800c610:	4a1b      	ldr	r2, [pc, #108]	@ (800c680 <_printf_float+0x2dc>)
 800c612:	2301      	movs	r3, #1
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	f43f af1d 	beq.w	800c45a <_printf_float+0xb6>
 800c620:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c624:	ea59 0303 	orrs.w	r3, r9, r3
 800c628:	d102      	bne.n	800c630 <_printf_float+0x28c>
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	07d9      	lsls	r1, r3, #31
 800c62e:	d5d7      	bpl.n	800c5e0 <_printf_float+0x23c>
 800c630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c634:	4631      	mov	r1, r6
 800c636:	4628      	mov	r0, r5
 800c638:	47b8      	blx	r7
 800c63a:	3001      	adds	r0, #1
 800c63c:	f43f af0d 	beq.w	800c45a <_printf_float+0xb6>
 800c640:	f04f 0a00 	mov.w	sl, #0
 800c644:	f104 0b1a 	add.w	fp, r4, #26
 800c648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64a:	425b      	negs	r3, r3
 800c64c:	4553      	cmp	r3, sl
 800c64e:	dc01      	bgt.n	800c654 <_printf_float+0x2b0>
 800c650:	464b      	mov	r3, r9
 800c652:	e793      	b.n	800c57c <_printf_float+0x1d8>
 800c654:	2301      	movs	r3, #1
 800c656:	465a      	mov	r2, fp
 800c658:	4631      	mov	r1, r6
 800c65a:	4628      	mov	r0, r5
 800c65c:	47b8      	blx	r7
 800c65e:	3001      	adds	r0, #1
 800c660:	f43f aefb 	beq.w	800c45a <_printf_float+0xb6>
 800c664:	f10a 0a01 	add.w	sl, sl, #1
 800c668:	e7ee      	b.n	800c648 <_printf_float+0x2a4>
 800c66a:	bf00      	nop
 800c66c:	7fefffff 	.word	0x7fefffff
 800c670:	0800fce0 	.word	0x0800fce0
 800c674:	0800fce4 	.word	0x0800fce4
 800c678:	0800fce8 	.word	0x0800fce8
 800c67c:	0800fcec 	.word	0x0800fcec
 800c680:	0800fcf0 	.word	0x0800fcf0
 800c684:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c686:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c68a:	4553      	cmp	r3, sl
 800c68c:	bfa8      	it	ge
 800c68e:	4653      	movge	r3, sl
 800c690:	2b00      	cmp	r3, #0
 800c692:	4699      	mov	r9, r3
 800c694:	dc36      	bgt.n	800c704 <_printf_float+0x360>
 800c696:	f04f 0b00 	mov.w	fp, #0
 800c69a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c69e:	f104 021a 	add.w	r2, r4, #26
 800c6a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c6a4:	9306      	str	r3, [sp, #24]
 800c6a6:	eba3 0309 	sub.w	r3, r3, r9
 800c6aa:	455b      	cmp	r3, fp
 800c6ac:	dc31      	bgt.n	800c712 <_printf_float+0x36e>
 800c6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b0:	459a      	cmp	sl, r3
 800c6b2:	dc3a      	bgt.n	800c72a <_printf_float+0x386>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	07da      	lsls	r2, r3, #31
 800c6b8:	d437      	bmi.n	800c72a <_printf_float+0x386>
 800c6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6bc:	ebaa 0903 	sub.w	r9, sl, r3
 800c6c0:	9b06      	ldr	r3, [sp, #24]
 800c6c2:	ebaa 0303 	sub.w	r3, sl, r3
 800c6c6:	4599      	cmp	r9, r3
 800c6c8:	bfa8      	it	ge
 800c6ca:	4699      	movge	r9, r3
 800c6cc:	f1b9 0f00 	cmp.w	r9, #0
 800c6d0:	dc33      	bgt.n	800c73a <_printf_float+0x396>
 800c6d2:	f04f 0800 	mov.w	r8, #0
 800c6d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6da:	f104 0b1a 	add.w	fp, r4, #26
 800c6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e0:	ebaa 0303 	sub.w	r3, sl, r3
 800c6e4:	eba3 0309 	sub.w	r3, r3, r9
 800c6e8:	4543      	cmp	r3, r8
 800c6ea:	f77f af79 	ble.w	800c5e0 <_printf_float+0x23c>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	465a      	mov	r2, fp
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	f43f aeae 	beq.w	800c45a <_printf_float+0xb6>
 800c6fe:	f108 0801 	add.w	r8, r8, #1
 800c702:	e7ec      	b.n	800c6de <_printf_float+0x33a>
 800c704:	4642      	mov	r2, r8
 800c706:	4631      	mov	r1, r6
 800c708:	4628      	mov	r0, r5
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	d1c2      	bne.n	800c696 <_printf_float+0x2f2>
 800c710:	e6a3      	b.n	800c45a <_printf_float+0xb6>
 800c712:	2301      	movs	r3, #1
 800c714:	4631      	mov	r1, r6
 800c716:	4628      	mov	r0, r5
 800c718:	9206      	str	r2, [sp, #24]
 800c71a:	47b8      	blx	r7
 800c71c:	3001      	adds	r0, #1
 800c71e:	f43f ae9c 	beq.w	800c45a <_printf_float+0xb6>
 800c722:	9a06      	ldr	r2, [sp, #24]
 800c724:	f10b 0b01 	add.w	fp, fp, #1
 800c728:	e7bb      	b.n	800c6a2 <_printf_float+0x2fe>
 800c72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c72e:	4631      	mov	r1, r6
 800c730:	4628      	mov	r0, r5
 800c732:	47b8      	blx	r7
 800c734:	3001      	adds	r0, #1
 800c736:	d1c0      	bne.n	800c6ba <_printf_float+0x316>
 800c738:	e68f      	b.n	800c45a <_printf_float+0xb6>
 800c73a:	9a06      	ldr	r2, [sp, #24]
 800c73c:	464b      	mov	r3, r9
 800c73e:	4442      	add	r2, r8
 800c740:	4631      	mov	r1, r6
 800c742:	4628      	mov	r0, r5
 800c744:	47b8      	blx	r7
 800c746:	3001      	adds	r0, #1
 800c748:	d1c3      	bne.n	800c6d2 <_printf_float+0x32e>
 800c74a:	e686      	b.n	800c45a <_printf_float+0xb6>
 800c74c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c750:	f1ba 0f01 	cmp.w	sl, #1
 800c754:	dc01      	bgt.n	800c75a <_printf_float+0x3b6>
 800c756:	07db      	lsls	r3, r3, #31
 800c758:	d536      	bpl.n	800c7c8 <_printf_float+0x424>
 800c75a:	2301      	movs	r3, #1
 800c75c:	4642      	mov	r2, r8
 800c75e:	4631      	mov	r1, r6
 800c760:	4628      	mov	r0, r5
 800c762:	47b8      	blx	r7
 800c764:	3001      	adds	r0, #1
 800c766:	f43f ae78 	beq.w	800c45a <_printf_float+0xb6>
 800c76a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c76e:	4631      	mov	r1, r6
 800c770:	4628      	mov	r0, r5
 800c772:	47b8      	blx	r7
 800c774:	3001      	adds	r0, #1
 800c776:	f43f ae70 	beq.w	800c45a <_printf_float+0xb6>
 800c77a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c77e:	2200      	movs	r2, #0
 800c780:	2300      	movs	r3, #0
 800c782:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c786:	f7f4 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c78a:	b9c0      	cbnz	r0, 800c7be <_printf_float+0x41a>
 800c78c:	4653      	mov	r3, sl
 800c78e:	f108 0201 	add.w	r2, r8, #1
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	3001      	adds	r0, #1
 800c79a:	d10c      	bne.n	800c7b6 <_printf_float+0x412>
 800c79c:	e65d      	b.n	800c45a <_printf_float+0xb6>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	465a      	mov	r2, fp
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b8      	blx	r7
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	f43f ae56 	beq.w	800c45a <_printf_float+0xb6>
 800c7ae:	f108 0801 	add.w	r8, r8, #1
 800c7b2:	45d0      	cmp	r8, sl
 800c7b4:	dbf3      	blt.n	800c79e <_printf_float+0x3fa>
 800c7b6:	464b      	mov	r3, r9
 800c7b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c7bc:	e6df      	b.n	800c57e <_printf_float+0x1da>
 800c7be:	f04f 0800 	mov.w	r8, #0
 800c7c2:	f104 0b1a 	add.w	fp, r4, #26
 800c7c6:	e7f4      	b.n	800c7b2 <_printf_float+0x40e>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	4642      	mov	r2, r8
 800c7cc:	e7e1      	b.n	800c792 <_printf_float+0x3ee>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	464a      	mov	r2, r9
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	47b8      	blx	r7
 800c7d8:	3001      	adds	r0, #1
 800c7da:	f43f ae3e 	beq.w	800c45a <_printf_float+0xb6>
 800c7de:	f108 0801 	add.w	r8, r8, #1
 800c7e2:	68e3      	ldr	r3, [r4, #12]
 800c7e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7e6:	1a5b      	subs	r3, r3, r1
 800c7e8:	4543      	cmp	r3, r8
 800c7ea:	dcf0      	bgt.n	800c7ce <_printf_float+0x42a>
 800c7ec:	e6fc      	b.n	800c5e8 <_printf_float+0x244>
 800c7ee:	f04f 0800 	mov.w	r8, #0
 800c7f2:	f104 0919 	add.w	r9, r4, #25
 800c7f6:	e7f4      	b.n	800c7e2 <_printf_float+0x43e>

0800c7f8 <_printf_common>:
 800c7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	4698      	mov	r8, r3
 800c800:	688a      	ldr	r2, [r1, #8]
 800c802:	690b      	ldr	r3, [r1, #16]
 800c804:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c808:	4293      	cmp	r3, r2
 800c80a:	bfb8      	it	lt
 800c80c:	4613      	movlt	r3, r2
 800c80e:	6033      	str	r3, [r6, #0]
 800c810:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c814:	4607      	mov	r7, r0
 800c816:	460c      	mov	r4, r1
 800c818:	b10a      	cbz	r2, 800c81e <_printf_common+0x26>
 800c81a:	3301      	adds	r3, #1
 800c81c:	6033      	str	r3, [r6, #0]
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	0699      	lsls	r1, r3, #26
 800c822:	bf42      	ittt	mi
 800c824:	6833      	ldrmi	r3, [r6, #0]
 800c826:	3302      	addmi	r3, #2
 800c828:	6033      	strmi	r3, [r6, #0]
 800c82a:	6825      	ldr	r5, [r4, #0]
 800c82c:	f015 0506 	ands.w	r5, r5, #6
 800c830:	d106      	bne.n	800c840 <_printf_common+0x48>
 800c832:	f104 0a19 	add.w	sl, r4, #25
 800c836:	68e3      	ldr	r3, [r4, #12]
 800c838:	6832      	ldr	r2, [r6, #0]
 800c83a:	1a9b      	subs	r3, r3, r2
 800c83c:	42ab      	cmp	r3, r5
 800c83e:	dc26      	bgt.n	800c88e <_printf_common+0x96>
 800c840:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c844:	6822      	ldr	r2, [r4, #0]
 800c846:	3b00      	subs	r3, #0
 800c848:	bf18      	it	ne
 800c84a:	2301      	movne	r3, #1
 800c84c:	0692      	lsls	r2, r2, #26
 800c84e:	d42b      	bmi.n	800c8a8 <_printf_common+0xb0>
 800c850:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c854:	4641      	mov	r1, r8
 800c856:	4638      	mov	r0, r7
 800c858:	47c8      	blx	r9
 800c85a:	3001      	adds	r0, #1
 800c85c:	d01e      	beq.n	800c89c <_printf_common+0xa4>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	6922      	ldr	r2, [r4, #16]
 800c862:	f003 0306 	and.w	r3, r3, #6
 800c866:	2b04      	cmp	r3, #4
 800c868:	bf02      	ittt	eq
 800c86a:	68e5      	ldreq	r5, [r4, #12]
 800c86c:	6833      	ldreq	r3, [r6, #0]
 800c86e:	1aed      	subeq	r5, r5, r3
 800c870:	68a3      	ldr	r3, [r4, #8]
 800c872:	bf0c      	ite	eq
 800c874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c878:	2500      	movne	r5, #0
 800c87a:	4293      	cmp	r3, r2
 800c87c:	bfc4      	itt	gt
 800c87e:	1a9b      	subgt	r3, r3, r2
 800c880:	18ed      	addgt	r5, r5, r3
 800c882:	2600      	movs	r6, #0
 800c884:	341a      	adds	r4, #26
 800c886:	42b5      	cmp	r5, r6
 800c888:	d11a      	bne.n	800c8c0 <_printf_common+0xc8>
 800c88a:	2000      	movs	r0, #0
 800c88c:	e008      	b.n	800c8a0 <_printf_common+0xa8>
 800c88e:	2301      	movs	r3, #1
 800c890:	4652      	mov	r2, sl
 800c892:	4641      	mov	r1, r8
 800c894:	4638      	mov	r0, r7
 800c896:	47c8      	blx	r9
 800c898:	3001      	adds	r0, #1
 800c89a:	d103      	bne.n	800c8a4 <_printf_common+0xac>
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a4:	3501      	adds	r5, #1
 800c8a6:	e7c6      	b.n	800c836 <_printf_common+0x3e>
 800c8a8:	18e1      	adds	r1, r4, r3
 800c8aa:	1c5a      	adds	r2, r3, #1
 800c8ac:	2030      	movs	r0, #48	@ 0x30
 800c8ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8b2:	4422      	add	r2, r4
 800c8b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c8bc:	3302      	adds	r3, #2
 800c8be:	e7c7      	b.n	800c850 <_printf_common+0x58>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	4622      	mov	r2, r4
 800c8c4:	4641      	mov	r1, r8
 800c8c6:	4638      	mov	r0, r7
 800c8c8:	47c8      	blx	r9
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	d0e6      	beq.n	800c89c <_printf_common+0xa4>
 800c8ce:	3601      	adds	r6, #1
 800c8d0:	e7d9      	b.n	800c886 <_printf_common+0x8e>
	...

0800c8d4 <_printf_i>:
 800c8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	7e0f      	ldrb	r7, [r1, #24]
 800c8da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8dc:	2f78      	cmp	r7, #120	@ 0x78
 800c8de:	4691      	mov	r9, r2
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	469a      	mov	sl, r3
 800c8e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8ea:	d807      	bhi.n	800c8fc <_printf_i+0x28>
 800c8ec:	2f62      	cmp	r7, #98	@ 0x62
 800c8ee:	d80a      	bhi.n	800c906 <_printf_i+0x32>
 800c8f0:	2f00      	cmp	r7, #0
 800c8f2:	f000 80d2 	beq.w	800ca9a <_printf_i+0x1c6>
 800c8f6:	2f58      	cmp	r7, #88	@ 0x58
 800c8f8:	f000 80b9 	beq.w	800ca6e <_printf_i+0x19a>
 800c8fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c900:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c904:	e03a      	b.n	800c97c <_printf_i+0xa8>
 800c906:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c90a:	2b15      	cmp	r3, #21
 800c90c:	d8f6      	bhi.n	800c8fc <_printf_i+0x28>
 800c90e:	a101      	add	r1, pc, #4	@ (adr r1, 800c914 <_printf_i+0x40>)
 800c910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c914:	0800c96d 	.word	0x0800c96d
 800c918:	0800c981 	.word	0x0800c981
 800c91c:	0800c8fd 	.word	0x0800c8fd
 800c920:	0800c8fd 	.word	0x0800c8fd
 800c924:	0800c8fd 	.word	0x0800c8fd
 800c928:	0800c8fd 	.word	0x0800c8fd
 800c92c:	0800c981 	.word	0x0800c981
 800c930:	0800c8fd 	.word	0x0800c8fd
 800c934:	0800c8fd 	.word	0x0800c8fd
 800c938:	0800c8fd 	.word	0x0800c8fd
 800c93c:	0800c8fd 	.word	0x0800c8fd
 800c940:	0800ca81 	.word	0x0800ca81
 800c944:	0800c9ab 	.word	0x0800c9ab
 800c948:	0800ca3b 	.word	0x0800ca3b
 800c94c:	0800c8fd 	.word	0x0800c8fd
 800c950:	0800c8fd 	.word	0x0800c8fd
 800c954:	0800caa3 	.word	0x0800caa3
 800c958:	0800c8fd 	.word	0x0800c8fd
 800c95c:	0800c9ab 	.word	0x0800c9ab
 800c960:	0800c8fd 	.word	0x0800c8fd
 800c964:	0800c8fd 	.word	0x0800c8fd
 800c968:	0800ca43 	.word	0x0800ca43
 800c96c:	6833      	ldr	r3, [r6, #0]
 800c96e:	1d1a      	adds	r2, r3, #4
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6032      	str	r2, [r6, #0]
 800c974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c978:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c97c:	2301      	movs	r3, #1
 800c97e:	e09d      	b.n	800cabc <_printf_i+0x1e8>
 800c980:	6833      	ldr	r3, [r6, #0]
 800c982:	6820      	ldr	r0, [r4, #0]
 800c984:	1d19      	adds	r1, r3, #4
 800c986:	6031      	str	r1, [r6, #0]
 800c988:	0606      	lsls	r6, r0, #24
 800c98a:	d501      	bpl.n	800c990 <_printf_i+0xbc>
 800c98c:	681d      	ldr	r5, [r3, #0]
 800c98e:	e003      	b.n	800c998 <_printf_i+0xc4>
 800c990:	0645      	lsls	r5, r0, #25
 800c992:	d5fb      	bpl.n	800c98c <_printf_i+0xb8>
 800c994:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c998:	2d00      	cmp	r5, #0
 800c99a:	da03      	bge.n	800c9a4 <_printf_i+0xd0>
 800c99c:	232d      	movs	r3, #45	@ 0x2d
 800c99e:	426d      	negs	r5, r5
 800c9a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9a4:	4859      	ldr	r0, [pc, #356]	@ (800cb0c <_printf_i+0x238>)
 800c9a6:	230a      	movs	r3, #10
 800c9a8:	e011      	b.n	800c9ce <_printf_i+0xfa>
 800c9aa:	6821      	ldr	r1, [r4, #0]
 800c9ac:	6833      	ldr	r3, [r6, #0]
 800c9ae:	0608      	lsls	r0, r1, #24
 800c9b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9b4:	d402      	bmi.n	800c9bc <_printf_i+0xe8>
 800c9b6:	0649      	lsls	r1, r1, #25
 800c9b8:	bf48      	it	mi
 800c9ba:	b2ad      	uxthmi	r5, r5
 800c9bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c9be:	4853      	ldr	r0, [pc, #332]	@ (800cb0c <_printf_i+0x238>)
 800c9c0:	6033      	str	r3, [r6, #0]
 800c9c2:	bf14      	ite	ne
 800c9c4:	230a      	movne	r3, #10
 800c9c6:	2308      	moveq	r3, #8
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9ce:	6866      	ldr	r6, [r4, #4]
 800c9d0:	60a6      	str	r6, [r4, #8]
 800c9d2:	2e00      	cmp	r6, #0
 800c9d4:	bfa2      	ittt	ge
 800c9d6:	6821      	ldrge	r1, [r4, #0]
 800c9d8:	f021 0104 	bicge.w	r1, r1, #4
 800c9dc:	6021      	strge	r1, [r4, #0]
 800c9de:	b90d      	cbnz	r5, 800c9e4 <_printf_i+0x110>
 800c9e0:	2e00      	cmp	r6, #0
 800c9e2:	d04b      	beq.n	800ca7c <_printf_i+0x1a8>
 800c9e4:	4616      	mov	r6, r2
 800c9e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9ea:	fb03 5711 	mls	r7, r3, r1, r5
 800c9ee:	5dc7      	ldrb	r7, [r0, r7]
 800c9f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9f4:	462f      	mov	r7, r5
 800c9f6:	42bb      	cmp	r3, r7
 800c9f8:	460d      	mov	r5, r1
 800c9fa:	d9f4      	bls.n	800c9e6 <_printf_i+0x112>
 800c9fc:	2b08      	cmp	r3, #8
 800c9fe:	d10b      	bne.n	800ca18 <_printf_i+0x144>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	07df      	lsls	r7, r3, #31
 800ca04:	d508      	bpl.n	800ca18 <_printf_i+0x144>
 800ca06:	6923      	ldr	r3, [r4, #16]
 800ca08:	6861      	ldr	r1, [r4, #4]
 800ca0a:	4299      	cmp	r1, r3
 800ca0c:	bfde      	ittt	le
 800ca0e:	2330      	movle	r3, #48	@ 0x30
 800ca10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca18:	1b92      	subs	r2, r2, r6
 800ca1a:	6122      	str	r2, [r4, #16]
 800ca1c:	f8cd a000 	str.w	sl, [sp]
 800ca20:	464b      	mov	r3, r9
 800ca22:	aa03      	add	r2, sp, #12
 800ca24:	4621      	mov	r1, r4
 800ca26:	4640      	mov	r0, r8
 800ca28:	f7ff fee6 	bl	800c7f8 <_printf_common>
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	d14a      	bne.n	800cac6 <_printf_i+0x1f2>
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	b004      	add	sp, #16
 800ca36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	f043 0320 	orr.w	r3, r3, #32
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	4833      	ldr	r0, [pc, #204]	@ (800cb10 <_printf_i+0x23c>)
 800ca44:	2778      	movs	r7, #120	@ 0x78
 800ca46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	6831      	ldr	r1, [r6, #0]
 800ca4e:	061f      	lsls	r7, r3, #24
 800ca50:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca54:	d402      	bmi.n	800ca5c <_printf_i+0x188>
 800ca56:	065f      	lsls	r7, r3, #25
 800ca58:	bf48      	it	mi
 800ca5a:	b2ad      	uxthmi	r5, r5
 800ca5c:	6031      	str	r1, [r6, #0]
 800ca5e:	07d9      	lsls	r1, r3, #31
 800ca60:	bf44      	itt	mi
 800ca62:	f043 0320 	orrmi.w	r3, r3, #32
 800ca66:	6023      	strmi	r3, [r4, #0]
 800ca68:	b11d      	cbz	r5, 800ca72 <_printf_i+0x19e>
 800ca6a:	2310      	movs	r3, #16
 800ca6c:	e7ac      	b.n	800c9c8 <_printf_i+0xf4>
 800ca6e:	4827      	ldr	r0, [pc, #156]	@ (800cb0c <_printf_i+0x238>)
 800ca70:	e7e9      	b.n	800ca46 <_printf_i+0x172>
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	f023 0320 	bic.w	r3, r3, #32
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	e7f6      	b.n	800ca6a <_printf_i+0x196>
 800ca7c:	4616      	mov	r6, r2
 800ca7e:	e7bd      	b.n	800c9fc <_printf_i+0x128>
 800ca80:	6833      	ldr	r3, [r6, #0]
 800ca82:	6825      	ldr	r5, [r4, #0]
 800ca84:	6961      	ldr	r1, [r4, #20]
 800ca86:	1d18      	adds	r0, r3, #4
 800ca88:	6030      	str	r0, [r6, #0]
 800ca8a:	062e      	lsls	r6, r5, #24
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	d501      	bpl.n	800ca94 <_printf_i+0x1c0>
 800ca90:	6019      	str	r1, [r3, #0]
 800ca92:	e002      	b.n	800ca9a <_printf_i+0x1c6>
 800ca94:	0668      	lsls	r0, r5, #25
 800ca96:	d5fb      	bpl.n	800ca90 <_printf_i+0x1bc>
 800ca98:	8019      	strh	r1, [r3, #0]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6123      	str	r3, [r4, #16]
 800ca9e:	4616      	mov	r6, r2
 800caa0:	e7bc      	b.n	800ca1c <_printf_i+0x148>
 800caa2:	6833      	ldr	r3, [r6, #0]
 800caa4:	1d1a      	adds	r2, r3, #4
 800caa6:	6032      	str	r2, [r6, #0]
 800caa8:	681e      	ldr	r6, [r3, #0]
 800caaa:	6862      	ldr	r2, [r4, #4]
 800caac:	2100      	movs	r1, #0
 800caae:	4630      	mov	r0, r6
 800cab0:	f7f3 fb8e 	bl	80001d0 <memchr>
 800cab4:	b108      	cbz	r0, 800caba <_printf_i+0x1e6>
 800cab6:	1b80      	subs	r0, r0, r6
 800cab8:	6060      	str	r0, [r4, #4]
 800caba:	6863      	ldr	r3, [r4, #4]
 800cabc:	6123      	str	r3, [r4, #16]
 800cabe:	2300      	movs	r3, #0
 800cac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cac4:	e7aa      	b.n	800ca1c <_printf_i+0x148>
 800cac6:	6923      	ldr	r3, [r4, #16]
 800cac8:	4632      	mov	r2, r6
 800caca:	4649      	mov	r1, r9
 800cacc:	4640      	mov	r0, r8
 800cace:	47d0      	blx	sl
 800cad0:	3001      	adds	r0, #1
 800cad2:	d0ad      	beq.n	800ca30 <_printf_i+0x15c>
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	079b      	lsls	r3, r3, #30
 800cad8:	d413      	bmi.n	800cb02 <_printf_i+0x22e>
 800cada:	68e0      	ldr	r0, [r4, #12]
 800cadc:	9b03      	ldr	r3, [sp, #12]
 800cade:	4298      	cmp	r0, r3
 800cae0:	bfb8      	it	lt
 800cae2:	4618      	movlt	r0, r3
 800cae4:	e7a6      	b.n	800ca34 <_printf_i+0x160>
 800cae6:	2301      	movs	r3, #1
 800cae8:	4632      	mov	r2, r6
 800caea:	4649      	mov	r1, r9
 800caec:	4640      	mov	r0, r8
 800caee:	47d0      	blx	sl
 800caf0:	3001      	adds	r0, #1
 800caf2:	d09d      	beq.n	800ca30 <_printf_i+0x15c>
 800caf4:	3501      	adds	r5, #1
 800caf6:	68e3      	ldr	r3, [r4, #12]
 800caf8:	9903      	ldr	r1, [sp, #12]
 800cafa:	1a5b      	subs	r3, r3, r1
 800cafc:	42ab      	cmp	r3, r5
 800cafe:	dcf2      	bgt.n	800cae6 <_printf_i+0x212>
 800cb00:	e7eb      	b.n	800cada <_printf_i+0x206>
 800cb02:	2500      	movs	r5, #0
 800cb04:	f104 0619 	add.w	r6, r4, #25
 800cb08:	e7f5      	b.n	800caf6 <_printf_i+0x222>
 800cb0a:	bf00      	nop
 800cb0c:	0800fcf2 	.word	0x0800fcf2
 800cb10:	0800fd03 	.word	0x0800fd03

0800cb14 <std>:
 800cb14:	2300      	movs	r3, #0
 800cb16:	b510      	push	{r4, lr}
 800cb18:	4604      	mov	r4, r0
 800cb1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cb1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb22:	6083      	str	r3, [r0, #8]
 800cb24:	8181      	strh	r1, [r0, #12]
 800cb26:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb28:	81c2      	strh	r2, [r0, #14]
 800cb2a:	6183      	str	r3, [r0, #24]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	2208      	movs	r2, #8
 800cb30:	305c      	adds	r0, #92	@ 0x5c
 800cb32:	f000 f9f9 	bl	800cf28 <memset>
 800cb36:	4b0d      	ldr	r3, [pc, #52]	@ (800cb6c <std+0x58>)
 800cb38:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb70 <std+0x5c>)
 800cb3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb74 <std+0x60>)
 800cb40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb42:	4b0d      	ldr	r3, [pc, #52]	@ (800cb78 <std+0x64>)
 800cb44:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb46:	4b0d      	ldr	r3, [pc, #52]	@ (800cb7c <std+0x68>)
 800cb48:	6224      	str	r4, [r4, #32]
 800cb4a:	429c      	cmp	r4, r3
 800cb4c:	d006      	beq.n	800cb5c <std+0x48>
 800cb4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb52:	4294      	cmp	r4, r2
 800cb54:	d002      	beq.n	800cb5c <std+0x48>
 800cb56:	33d0      	adds	r3, #208	@ 0xd0
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	d105      	bne.n	800cb68 <std+0x54>
 800cb5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb64:	f000 ba5c 	b.w	800d020 <__retarget_lock_init_recursive>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	bf00      	nop
 800cb6c:	0800cd79 	.word	0x0800cd79
 800cb70:	0800cd9b 	.word	0x0800cd9b
 800cb74:	0800cdd3 	.word	0x0800cdd3
 800cb78:	0800cdf7 	.word	0x0800cdf7
 800cb7c:	20000634 	.word	0x20000634

0800cb80 <stdio_exit_handler>:
 800cb80:	4a02      	ldr	r2, [pc, #8]	@ (800cb8c <stdio_exit_handler+0xc>)
 800cb82:	4903      	ldr	r1, [pc, #12]	@ (800cb90 <stdio_exit_handler+0x10>)
 800cb84:	4803      	ldr	r0, [pc, #12]	@ (800cb94 <stdio_exit_handler+0x14>)
 800cb86:	f000 b869 	b.w	800cc5c <_fwalk_sglue>
 800cb8a:	bf00      	nop
 800cb8c:	20000010 	.word	0x20000010
 800cb90:	0800e951 	.word	0x0800e951
 800cb94:	20000020 	.word	0x20000020

0800cb98 <cleanup_stdio>:
 800cb98:	6841      	ldr	r1, [r0, #4]
 800cb9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbcc <cleanup_stdio+0x34>)
 800cb9c:	4299      	cmp	r1, r3
 800cb9e:	b510      	push	{r4, lr}
 800cba0:	4604      	mov	r4, r0
 800cba2:	d001      	beq.n	800cba8 <cleanup_stdio+0x10>
 800cba4:	f001 fed4 	bl	800e950 <_fflush_r>
 800cba8:	68a1      	ldr	r1, [r4, #8]
 800cbaa:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <cleanup_stdio+0x38>)
 800cbac:	4299      	cmp	r1, r3
 800cbae:	d002      	beq.n	800cbb6 <cleanup_stdio+0x1e>
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f001 fecd 	bl	800e950 <_fflush_r>
 800cbb6:	68e1      	ldr	r1, [r4, #12]
 800cbb8:	4b06      	ldr	r3, [pc, #24]	@ (800cbd4 <cleanup_stdio+0x3c>)
 800cbba:	4299      	cmp	r1, r3
 800cbbc:	d004      	beq.n	800cbc8 <cleanup_stdio+0x30>
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc4:	f001 bec4 	b.w	800e950 <_fflush_r>
 800cbc8:	bd10      	pop	{r4, pc}
 800cbca:	bf00      	nop
 800cbcc:	20000634 	.word	0x20000634
 800cbd0:	2000069c 	.word	0x2000069c
 800cbd4:	20000704 	.word	0x20000704

0800cbd8 <global_stdio_init.part.0>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	4b0b      	ldr	r3, [pc, #44]	@ (800cc08 <global_stdio_init.part.0+0x30>)
 800cbdc:	4c0b      	ldr	r4, [pc, #44]	@ (800cc0c <global_stdio_init.part.0+0x34>)
 800cbde:	4a0c      	ldr	r2, [pc, #48]	@ (800cc10 <global_stdio_init.part.0+0x38>)
 800cbe0:	601a      	str	r2, [r3, #0]
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2104      	movs	r1, #4
 800cbe8:	f7ff ff94 	bl	800cb14 <std>
 800cbec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	2109      	movs	r1, #9
 800cbf4:	f7ff ff8e 	bl	800cb14 <std>
 800cbf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbfc:	2202      	movs	r2, #2
 800cbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc02:	2112      	movs	r1, #18
 800cc04:	f7ff bf86 	b.w	800cb14 <std>
 800cc08:	2000076c 	.word	0x2000076c
 800cc0c:	20000634 	.word	0x20000634
 800cc10:	0800cb81 	.word	0x0800cb81

0800cc14 <__sfp_lock_acquire>:
 800cc14:	4801      	ldr	r0, [pc, #4]	@ (800cc1c <__sfp_lock_acquire+0x8>)
 800cc16:	f000 ba04 	b.w	800d022 <__retarget_lock_acquire_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	20000775 	.word	0x20000775

0800cc20 <__sfp_lock_release>:
 800cc20:	4801      	ldr	r0, [pc, #4]	@ (800cc28 <__sfp_lock_release+0x8>)
 800cc22:	f000 b9ff 	b.w	800d024 <__retarget_lock_release_recursive>
 800cc26:	bf00      	nop
 800cc28:	20000775 	.word	0x20000775

0800cc2c <__sinit>:
 800cc2c:	b510      	push	{r4, lr}
 800cc2e:	4604      	mov	r4, r0
 800cc30:	f7ff fff0 	bl	800cc14 <__sfp_lock_acquire>
 800cc34:	6a23      	ldr	r3, [r4, #32]
 800cc36:	b11b      	cbz	r3, 800cc40 <__sinit+0x14>
 800cc38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc3c:	f7ff bff0 	b.w	800cc20 <__sfp_lock_release>
 800cc40:	4b04      	ldr	r3, [pc, #16]	@ (800cc54 <__sinit+0x28>)
 800cc42:	6223      	str	r3, [r4, #32]
 800cc44:	4b04      	ldr	r3, [pc, #16]	@ (800cc58 <__sinit+0x2c>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1f5      	bne.n	800cc38 <__sinit+0xc>
 800cc4c:	f7ff ffc4 	bl	800cbd8 <global_stdio_init.part.0>
 800cc50:	e7f2      	b.n	800cc38 <__sinit+0xc>
 800cc52:	bf00      	nop
 800cc54:	0800cb99 	.word	0x0800cb99
 800cc58:	2000076c 	.word	0x2000076c

0800cc5c <_fwalk_sglue>:
 800cc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc60:	4607      	mov	r7, r0
 800cc62:	4688      	mov	r8, r1
 800cc64:	4614      	mov	r4, r2
 800cc66:	2600      	movs	r6, #0
 800cc68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc6c:	f1b9 0901 	subs.w	r9, r9, #1
 800cc70:	d505      	bpl.n	800cc7e <_fwalk_sglue+0x22>
 800cc72:	6824      	ldr	r4, [r4, #0]
 800cc74:	2c00      	cmp	r4, #0
 800cc76:	d1f7      	bne.n	800cc68 <_fwalk_sglue+0xc>
 800cc78:	4630      	mov	r0, r6
 800cc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc7e:	89ab      	ldrh	r3, [r5, #12]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d907      	bls.n	800cc94 <_fwalk_sglue+0x38>
 800cc84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	d003      	beq.n	800cc94 <_fwalk_sglue+0x38>
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	4638      	mov	r0, r7
 800cc90:	47c0      	blx	r8
 800cc92:	4306      	orrs	r6, r0
 800cc94:	3568      	adds	r5, #104	@ 0x68
 800cc96:	e7e9      	b.n	800cc6c <_fwalk_sglue+0x10>

0800cc98 <iprintf>:
 800cc98:	b40f      	push	{r0, r1, r2, r3}
 800cc9a:	b507      	push	{r0, r1, r2, lr}
 800cc9c:	4906      	ldr	r1, [pc, #24]	@ (800ccb8 <iprintf+0x20>)
 800cc9e:	ab04      	add	r3, sp, #16
 800cca0:	6808      	ldr	r0, [r1, #0]
 800cca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cca6:	6881      	ldr	r1, [r0, #8]
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	f001 fcb5 	bl	800e618 <_vfiprintf_r>
 800ccae:	b003      	add	sp, #12
 800ccb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccb4:	b004      	add	sp, #16
 800ccb6:	4770      	bx	lr
 800ccb8:	2000001c 	.word	0x2000001c

0800ccbc <_puts_r>:
 800ccbc:	6a03      	ldr	r3, [r0, #32]
 800ccbe:	b570      	push	{r4, r5, r6, lr}
 800ccc0:	6884      	ldr	r4, [r0, #8]
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	460e      	mov	r6, r1
 800ccc6:	b90b      	cbnz	r3, 800cccc <_puts_r+0x10>
 800ccc8:	f7ff ffb0 	bl	800cc2c <__sinit>
 800cccc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccce:	07db      	lsls	r3, r3, #31
 800ccd0:	d405      	bmi.n	800ccde <_puts_r+0x22>
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	0598      	lsls	r0, r3, #22
 800ccd6:	d402      	bmi.n	800ccde <_puts_r+0x22>
 800ccd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccda:	f000 f9a2 	bl	800d022 <__retarget_lock_acquire_recursive>
 800ccde:	89a3      	ldrh	r3, [r4, #12]
 800cce0:	0719      	lsls	r1, r3, #28
 800cce2:	d502      	bpl.n	800ccea <_puts_r+0x2e>
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d135      	bne.n	800cd56 <_puts_r+0x9a>
 800ccea:	4621      	mov	r1, r4
 800ccec:	4628      	mov	r0, r5
 800ccee:	f000 f8c5 	bl	800ce7c <__swsetup_r>
 800ccf2:	b380      	cbz	r0, 800cd56 <_puts_r+0x9a>
 800ccf4:	f04f 35ff 	mov.w	r5, #4294967295
 800ccf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccfa:	07da      	lsls	r2, r3, #31
 800ccfc:	d405      	bmi.n	800cd0a <_puts_r+0x4e>
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	059b      	lsls	r3, r3, #22
 800cd02:	d402      	bmi.n	800cd0a <_puts_r+0x4e>
 800cd04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd06:	f000 f98d 	bl	800d024 <__retarget_lock_release_recursive>
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	bd70      	pop	{r4, r5, r6, pc}
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	da04      	bge.n	800cd1c <_puts_r+0x60>
 800cd12:	69a2      	ldr	r2, [r4, #24]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	dc17      	bgt.n	800cd48 <_puts_r+0x8c>
 800cd18:	290a      	cmp	r1, #10
 800cd1a:	d015      	beq.n	800cd48 <_puts_r+0x8c>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	6022      	str	r2, [r4, #0]
 800cd22:	7019      	strb	r1, [r3, #0]
 800cd24:	68a3      	ldr	r3, [r4, #8]
 800cd26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	60a3      	str	r3, [r4, #8]
 800cd2e:	2900      	cmp	r1, #0
 800cd30:	d1ed      	bne.n	800cd0e <_puts_r+0x52>
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	da11      	bge.n	800cd5a <_puts_r+0x9e>
 800cd36:	4622      	mov	r2, r4
 800cd38:	210a      	movs	r1, #10
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f000 f85f 	bl	800cdfe <__swbuf_r>
 800cd40:	3001      	adds	r0, #1
 800cd42:	d0d7      	beq.n	800ccf4 <_puts_r+0x38>
 800cd44:	250a      	movs	r5, #10
 800cd46:	e7d7      	b.n	800ccf8 <_puts_r+0x3c>
 800cd48:	4622      	mov	r2, r4
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	f000 f857 	bl	800cdfe <__swbuf_r>
 800cd50:	3001      	adds	r0, #1
 800cd52:	d1e7      	bne.n	800cd24 <_puts_r+0x68>
 800cd54:	e7ce      	b.n	800ccf4 <_puts_r+0x38>
 800cd56:	3e01      	subs	r6, #1
 800cd58:	e7e4      	b.n	800cd24 <_puts_r+0x68>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	6022      	str	r2, [r4, #0]
 800cd60:	220a      	movs	r2, #10
 800cd62:	701a      	strb	r2, [r3, #0]
 800cd64:	e7ee      	b.n	800cd44 <_puts_r+0x88>
	...

0800cd68 <puts>:
 800cd68:	4b02      	ldr	r3, [pc, #8]	@ (800cd74 <puts+0xc>)
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	6818      	ldr	r0, [r3, #0]
 800cd6e:	f7ff bfa5 	b.w	800ccbc <_puts_r>
 800cd72:	bf00      	nop
 800cd74:	2000001c 	.word	0x2000001c

0800cd78 <__sread>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd80:	f000 f900 	bl	800cf84 <_read_r>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	bfab      	itete	ge
 800cd88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd8a:	89a3      	ldrhlt	r3, [r4, #12]
 800cd8c:	181b      	addge	r3, r3, r0
 800cd8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd92:	bfac      	ite	ge
 800cd94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd96:	81a3      	strhlt	r3, [r4, #12]
 800cd98:	bd10      	pop	{r4, pc}

0800cd9a <__swrite>:
 800cd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd9e:	461f      	mov	r7, r3
 800cda0:	898b      	ldrh	r3, [r1, #12]
 800cda2:	05db      	lsls	r3, r3, #23
 800cda4:	4605      	mov	r5, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	4616      	mov	r6, r2
 800cdaa:	d505      	bpl.n	800cdb8 <__swrite+0x1e>
 800cdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f000 f8d4 	bl	800cf60 <_lseek_r>
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	4632      	mov	r2, r6
 800cdc6:	463b      	mov	r3, r7
 800cdc8:	4628      	mov	r0, r5
 800cdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdce:	f000 b8eb 	b.w	800cfa8 <_write_r>

0800cdd2 <__sseek>:
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdda:	f000 f8c1 	bl	800cf60 <_lseek_r>
 800cdde:	1c43      	adds	r3, r0, #1
 800cde0:	89a3      	ldrh	r3, [r4, #12]
 800cde2:	bf15      	itete	ne
 800cde4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cde6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cdea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cdee:	81a3      	strheq	r3, [r4, #12]
 800cdf0:	bf18      	it	ne
 800cdf2:	81a3      	strhne	r3, [r4, #12]
 800cdf4:	bd10      	pop	{r4, pc}

0800cdf6 <__sclose>:
 800cdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdfa:	f000 b8a1 	b.w	800cf40 <_close_r>

0800cdfe <__swbuf_r>:
 800cdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce00:	460e      	mov	r6, r1
 800ce02:	4614      	mov	r4, r2
 800ce04:	4605      	mov	r5, r0
 800ce06:	b118      	cbz	r0, 800ce10 <__swbuf_r+0x12>
 800ce08:	6a03      	ldr	r3, [r0, #32]
 800ce0a:	b90b      	cbnz	r3, 800ce10 <__swbuf_r+0x12>
 800ce0c:	f7ff ff0e 	bl	800cc2c <__sinit>
 800ce10:	69a3      	ldr	r3, [r4, #24]
 800ce12:	60a3      	str	r3, [r4, #8]
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	071a      	lsls	r2, r3, #28
 800ce18:	d501      	bpl.n	800ce1e <__swbuf_r+0x20>
 800ce1a:	6923      	ldr	r3, [r4, #16]
 800ce1c:	b943      	cbnz	r3, 800ce30 <__swbuf_r+0x32>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 f82b 	bl	800ce7c <__swsetup_r>
 800ce26:	b118      	cbz	r0, 800ce30 <__swbuf_r+0x32>
 800ce28:	f04f 37ff 	mov.w	r7, #4294967295
 800ce2c:	4638      	mov	r0, r7
 800ce2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	6922      	ldr	r2, [r4, #16]
 800ce34:	1a98      	subs	r0, r3, r2
 800ce36:	6963      	ldr	r3, [r4, #20]
 800ce38:	b2f6      	uxtb	r6, r6
 800ce3a:	4283      	cmp	r3, r0
 800ce3c:	4637      	mov	r7, r6
 800ce3e:	dc05      	bgt.n	800ce4c <__swbuf_r+0x4e>
 800ce40:	4621      	mov	r1, r4
 800ce42:	4628      	mov	r0, r5
 800ce44:	f001 fd84 	bl	800e950 <_fflush_r>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d1ed      	bne.n	800ce28 <__swbuf_r+0x2a>
 800ce4c:	68a3      	ldr	r3, [r4, #8]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	60a3      	str	r3, [r4, #8]
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	1c5a      	adds	r2, r3, #1
 800ce56:	6022      	str	r2, [r4, #0]
 800ce58:	701e      	strb	r6, [r3, #0]
 800ce5a:	6962      	ldr	r2, [r4, #20]
 800ce5c:	1c43      	adds	r3, r0, #1
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d004      	beq.n	800ce6c <__swbuf_r+0x6e>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	07db      	lsls	r3, r3, #31
 800ce66:	d5e1      	bpl.n	800ce2c <__swbuf_r+0x2e>
 800ce68:	2e0a      	cmp	r6, #10
 800ce6a:	d1df      	bne.n	800ce2c <__swbuf_r+0x2e>
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f001 fd6e 	bl	800e950 <_fflush_r>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d0d9      	beq.n	800ce2c <__swbuf_r+0x2e>
 800ce78:	e7d6      	b.n	800ce28 <__swbuf_r+0x2a>
	...

0800ce7c <__swsetup_r>:
 800ce7c:	b538      	push	{r3, r4, r5, lr}
 800ce7e:	4b29      	ldr	r3, [pc, #164]	@ (800cf24 <__swsetup_r+0xa8>)
 800ce80:	4605      	mov	r5, r0
 800ce82:	6818      	ldr	r0, [r3, #0]
 800ce84:	460c      	mov	r4, r1
 800ce86:	b118      	cbz	r0, 800ce90 <__swsetup_r+0x14>
 800ce88:	6a03      	ldr	r3, [r0, #32]
 800ce8a:	b90b      	cbnz	r3, 800ce90 <__swsetup_r+0x14>
 800ce8c:	f7ff fece 	bl	800cc2c <__sinit>
 800ce90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce94:	0719      	lsls	r1, r3, #28
 800ce96:	d422      	bmi.n	800cede <__swsetup_r+0x62>
 800ce98:	06da      	lsls	r2, r3, #27
 800ce9a:	d407      	bmi.n	800ceac <__swsetup_r+0x30>
 800ce9c:	2209      	movs	r2, #9
 800ce9e:	602a      	str	r2, [r5, #0]
 800cea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cea4:	81a3      	strh	r3, [r4, #12]
 800cea6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceaa:	e033      	b.n	800cf14 <__swsetup_r+0x98>
 800ceac:	0758      	lsls	r0, r3, #29
 800ceae:	d512      	bpl.n	800ced6 <__swsetup_r+0x5a>
 800ceb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceb2:	b141      	cbz	r1, 800cec6 <__swsetup_r+0x4a>
 800ceb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ceb8:	4299      	cmp	r1, r3
 800ceba:	d002      	beq.n	800cec2 <__swsetup_r+0x46>
 800cebc:	4628      	mov	r0, r5
 800cebe:	f000 feff 	bl	800dcc0 <_free_r>
 800cec2:	2300      	movs	r3, #0
 800cec4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cecc:	81a3      	strh	r3, [r4, #12]
 800cece:	2300      	movs	r3, #0
 800ced0:	6063      	str	r3, [r4, #4]
 800ced2:	6923      	ldr	r3, [r4, #16]
 800ced4:	6023      	str	r3, [r4, #0]
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f043 0308 	orr.w	r3, r3, #8
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	6923      	ldr	r3, [r4, #16]
 800cee0:	b94b      	cbnz	r3, 800cef6 <__swsetup_r+0x7a>
 800cee2:	89a3      	ldrh	r3, [r4, #12]
 800cee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ceec:	d003      	beq.n	800cef6 <__swsetup_r+0x7a>
 800ceee:	4621      	mov	r1, r4
 800cef0:	4628      	mov	r0, r5
 800cef2:	f001 fd7b 	bl	800e9ec <__smakebuf_r>
 800cef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefa:	f013 0201 	ands.w	r2, r3, #1
 800cefe:	d00a      	beq.n	800cf16 <__swsetup_r+0x9a>
 800cf00:	2200      	movs	r2, #0
 800cf02:	60a2      	str	r2, [r4, #8]
 800cf04:	6962      	ldr	r2, [r4, #20]
 800cf06:	4252      	negs	r2, r2
 800cf08:	61a2      	str	r2, [r4, #24]
 800cf0a:	6922      	ldr	r2, [r4, #16]
 800cf0c:	b942      	cbnz	r2, 800cf20 <__swsetup_r+0xa4>
 800cf0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf12:	d1c5      	bne.n	800cea0 <__swsetup_r+0x24>
 800cf14:	bd38      	pop	{r3, r4, r5, pc}
 800cf16:	0799      	lsls	r1, r3, #30
 800cf18:	bf58      	it	pl
 800cf1a:	6962      	ldrpl	r2, [r4, #20]
 800cf1c:	60a2      	str	r2, [r4, #8]
 800cf1e:	e7f4      	b.n	800cf0a <__swsetup_r+0x8e>
 800cf20:	2000      	movs	r0, #0
 800cf22:	e7f7      	b.n	800cf14 <__swsetup_r+0x98>
 800cf24:	2000001c 	.word	0x2000001c

0800cf28 <memset>:
 800cf28:	4402      	add	r2, r0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d100      	bne.n	800cf32 <memset+0xa>
 800cf30:	4770      	bx	lr
 800cf32:	f803 1b01 	strb.w	r1, [r3], #1
 800cf36:	e7f9      	b.n	800cf2c <memset+0x4>

0800cf38 <_localeconv_r>:
 800cf38:	4800      	ldr	r0, [pc, #0]	@ (800cf3c <_localeconv_r+0x4>)
 800cf3a:	4770      	bx	lr
 800cf3c:	2000015c 	.word	0x2000015c

0800cf40 <_close_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d06      	ldr	r5, [pc, #24]	@ (800cf5c <_close_r+0x1c>)
 800cf44:	2300      	movs	r3, #0
 800cf46:	4604      	mov	r4, r0
 800cf48:	4608      	mov	r0, r1
 800cf4a:	602b      	str	r3, [r5, #0]
 800cf4c:	f7f9 f964 	bl	8006218 <_close>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d102      	bne.n	800cf5a <_close_r+0x1a>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	b103      	cbz	r3, 800cf5a <_close_r+0x1a>
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	20000770 	.word	0x20000770

0800cf60 <_lseek_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	4d07      	ldr	r5, [pc, #28]	@ (800cf80 <_lseek_r+0x20>)
 800cf64:	4604      	mov	r4, r0
 800cf66:	4608      	mov	r0, r1
 800cf68:	4611      	mov	r1, r2
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	602a      	str	r2, [r5, #0]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	f7f9 f979 	bl	8006266 <_lseek>
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	d102      	bne.n	800cf7e <_lseek_r+0x1e>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	b103      	cbz	r3, 800cf7e <_lseek_r+0x1e>
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	bd38      	pop	{r3, r4, r5, pc}
 800cf80:	20000770 	.word	0x20000770

0800cf84 <_read_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4d07      	ldr	r5, [pc, #28]	@ (800cfa4 <_read_r+0x20>)
 800cf88:	4604      	mov	r4, r0
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	2200      	movs	r2, #0
 800cf90:	602a      	str	r2, [r5, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	f7f9 f923 	bl	80061de <_read>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_read_r+0x1e>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_read_r+0x1e>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	20000770 	.word	0x20000770

0800cfa8 <_write_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	@ (800cfc8 <_write_r+0x20>)
 800cfac:	4604      	mov	r4, r0
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	602a      	str	r2, [r5, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f7f6 fcc4 	bl	8003944 <_write>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_write_r+0x1e>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_write_r+0x1e>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	20000770 	.word	0x20000770

0800cfcc <__errno>:
 800cfcc:	4b01      	ldr	r3, [pc, #4]	@ (800cfd4 <__errno+0x8>)
 800cfce:	6818      	ldr	r0, [r3, #0]
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	2000001c 	.word	0x2000001c

0800cfd8 <__libc_init_array>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	4d0d      	ldr	r5, [pc, #52]	@ (800d010 <__libc_init_array+0x38>)
 800cfdc:	4c0d      	ldr	r4, [pc, #52]	@ (800d014 <__libc_init_array+0x3c>)
 800cfde:	1b64      	subs	r4, r4, r5
 800cfe0:	10a4      	asrs	r4, r4, #2
 800cfe2:	2600      	movs	r6, #0
 800cfe4:	42a6      	cmp	r6, r4
 800cfe6:	d109      	bne.n	800cffc <__libc_init_array+0x24>
 800cfe8:	4d0b      	ldr	r5, [pc, #44]	@ (800d018 <__libc_init_array+0x40>)
 800cfea:	4c0c      	ldr	r4, [pc, #48]	@ (800d01c <__libc_init_array+0x44>)
 800cfec:	f002 fc80 	bl	800f8f0 <_init>
 800cff0:	1b64      	subs	r4, r4, r5
 800cff2:	10a4      	asrs	r4, r4, #2
 800cff4:	2600      	movs	r6, #0
 800cff6:	42a6      	cmp	r6, r4
 800cff8:	d105      	bne.n	800d006 <__libc_init_array+0x2e>
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d000:	4798      	blx	r3
 800d002:	3601      	adds	r6, #1
 800d004:	e7ee      	b.n	800cfe4 <__libc_init_array+0xc>
 800d006:	f855 3b04 	ldr.w	r3, [r5], #4
 800d00a:	4798      	blx	r3
 800d00c:	3601      	adds	r6, #1
 800d00e:	e7f2      	b.n	800cff6 <__libc_init_array+0x1e>
 800d010:	080100a8 	.word	0x080100a8
 800d014:	080100a8 	.word	0x080100a8
 800d018:	080100a8 	.word	0x080100a8
 800d01c:	080100ac 	.word	0x080100ac

0800d020 <__retarget_lock_init_recursive>:
 800d020:	4770      	bx	lr

0800d022 <__retarget_lock_acquire_recursive>:
 800d022:	4770      	bx	lr

0800d024 <__retarget_lock_release_recursive>:
 800d024:	4770      	bx	lr

0800d026 <quorem>:
 800d026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02a:	6903      	ldr	r3, [r0, #16]
 800d02c:	690c      	ldr	r4, [r1, #16]
 800d02e:	42a3      	cmp	r3, r4
 800d030:	4607      	mov	r7, r0
 800d032:	db7e      	blt.n	800d132 <quorem+0x10c>
 800d034:	3c01      	subs	r4, #1
 800d036:	f101 0814 	add.w	r8, r1, #20
 800d03a:	00a3      	lsls	r3, r4, #2
 800d03c:	f100 0514 	add.w	r5, r0, #20
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d046:	9301      	str	r3, [sp, #4]
 800d048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d04c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d050:	3301      	adds	r3, #1
 800d052:	429a      	cmp	r2, r3
 800d054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d058:	fbb2 f6f3 	udiv	r6, r2, r3
 800d05c:	d32e      	bcc.n	800d0bc <quorem+0x96>
 800d05e:	f04f 0a00 	mov.w	sl, #0
 800d062:	46c4      	mov	ip, r8
 800d064:	46ae      	mov	lr, r5
 800d066:	46d3      	mov	fp, sl
 800d068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d06c:	b298      	uxth	r0, r3
 800d06e:	fb06 a000 	mla	r0, r6, r0, sl
 800d072:	0c02      	lsrs	r2, r0, #16
 800d074:	0c1b      	lsrs	r3, r3, #16
 800d076:	fb06 2303 	mla	r3, r6, r3, r2
 800d07a:	f8de 2000 	ldr.w	r2, [lr]
 800d07e:	b280      	uxth	r0, r0
 800d080:	b292      	uxth	r2, r2
 800d082:	1a12      	subs	r2, r2, r0
 800d084:	445a      	add	r2, fp
 800d086:	f8de 0000 	ldr.w	r0, [lr]
 800d08a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d08e:	b29b      	uxth	r3, r3
 800d090:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d094:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d098:	b292      	uxth	r2, r2
 800d09a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d09e:	45e1      	cmp	r9, ip
 800d0a0:	f84e 2b04 	str.w	r2, [lr], #4
 800d0a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d0a8:	d2de      	bcs.n	800d068 <quorem+0x42>
 800d0aa:	9b00      	ldr	r3, [sp, #0]
 800d0ac:	58eb      	ldr	r3, [r5, r3]
 800d0ae:	b92b      	cbnz	r3, 800d0bc <quorem+0x96>
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	3b04      	subs	r3, #4
 800d0b4:	429d      	cmp	r5, r3
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	d32f      	bcc.n	800d11a <quorem+0xf4>
 800d0ba:	613c      	str	r4, [r7, #16]
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f001 f979 	bl	800e3b4 <__mcmp>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	db25      	blt.n	800d112 <quorem+0xec>
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0ce:	f8d1 c000 	ldr.w	ip, [r1]
 800d0d2:	fa1f fe82 	uxth.w	lr, r2
 800d0d6:	fa1f f38c 	uxth.w	r3, ip
 800d0da:	eba3 030e 	sub.w	r3, r3, lr
 800d0de:	4403      	add	r3, r0
 800d0e0:	0c12      	lsrs	r2, r2, #16
 800d0e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d0e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0f0:	45c1      	cmp	r9, r8
 800d0f2:	f841 3b04 	str.w	r3, [r1], #4
 800d0f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d0fa:	d2e6      	bcs.n	800d0ca <quorem+0xa4>
 800d0fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d104:	b922      	cbnz	r2, 800d110 <quorem+0xea>
 800d106:	3b04      	subs	r3, #4
 800d108:	429d      	cmp	r5, r3
 800d10a:	461a      	mov	r2, r3
 800d10c:	d30b      	bcc.n	800d126 <quorem+0x100>
 800d10e:	613c      	str	r4, [r7, #16]
 800d110:	3601      	adds	r6, #1
 800d112:	4630      	mov	r0, r6
 800d114:	b003      	add	sp, #12
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11a:	6812      	ldr	r2, [r2, #0]
 800d11c:	3b04      	subs	r3, #4
 800d11e:	2a00      	cmp	r2, #0
 800d120:	d1cb      	bne.n	800d0ba <quorem+0x94>
 800d122:	3c01      	subs	r4, #1
 800d124:	e7c6      	b.n	800d0b4 <quorem+0x8e>
 800d126:	6812      	ldr	r2, [r2, #0]
 800d128:	3b04      	subs	r3, #4
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	d1ef      	bne.n	800d10e <quorem+0xe8>
 800d12e:	3c01      	subs	r4, #1
 800d130:	e7ea      	b.n	800d108 <quorem+0xe2>
 800d132:	2000      	movs	r0, #0
 800d134:	e7ee      	b.n	800d114 <quorem+0xee>
	...

0800d138 <_dtoa_r>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	69c7      	ldr	r7, [r0, #28]
 800d13e:	b099      	sub	sp, #100	@ 0x64
 800d140:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d144:	ec55 4b10 	vmov	r4, r5, d0
 800d148:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d14a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d14c:	4683      	mov	fp, r0
 800d14e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d150:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d152:	b97f      	cbnz	r7, 800d174 <_dtoa_r+0x3c>
 800d154:	2010      	movs	r0, #16
 800d156:	f000 fdfd 	bl	800dd54 <malloc>
 800d15a:	4602      	mov	r2, r0
 800d15c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d160:	b920      	cbnz	r0, 800d16c <_dtoa_r+0x34>
 800d162:	4ba7      	ldr	r3, [pc, #668]	@ (800d400 <_dtoa_r+0x2c8>)
 800d164:	21ef      	movs	r1, #239	@ 0xef
 800d166:	48a7      	ldr	r0, [pc, #668]	@ (800d404 <_dtoa_r+0x2cc>)
 800d168:	f001 fcbc 	bl	800eae4 <__assert_func>
 800d16c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d170:	6007      	str	r7, [r0, #0]
 800d172:	60c7      	str	r7, [r0, #12]
 800d174:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d178:	6819      	ldr	r1, [r3, #0]
 800d17a:	b159      	cbz	r1, 800d194 <_dtoa_r+0x5c>
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	604a      	str	r2, [r1, #4]
 800d180:	2301      	movs	r3, #1
 800d182:	4093      	lsls	r3, r2
 800d184:	608b      	str	r3, [r1, #8]
 800d186:	4658      	mov	r0, fp
 800d188:	f000 feda 	bl	800df40 <_Bfree>
 800d18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	1e2b      	subs	r3, r5, #0
 800d196:	bfb9      	ittee	lt
 800d198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d19c:	9303      	strlt	r3, [sp, #12]
 800d19e:	2300      	movge	r3, #0
 800d1a0:	6033      	strge	r3, [r6, #0]
 800d1a2:	9f03      	ldr	r7, [sp, #12]
 800d1a4:	4b98      	ldr	r3, [pc, #608]	@ (800d408 <_dtoa_r+0x2d0>)
 800d1a6:	bfbc      	itt	lt
 800d1a8:	2201      	movlt	r2, #1
 800d1aa:	6032      	strlt	r2, [r6, #0]
 800d1ac:	43bb      	bics	r3, r7
 800d1ae:	d112      	bne.n	800d1d6 <_dtoa_r+0x9e>
 800d1b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1bc:	4323      	orrs	r3, r4
 800d1be:	f000 854d 	beq.w	800dc5c <_dtoa_r+0xb24>
 800d1c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d41c <_dtoa_r+0x2e4>
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 854f 	beq.w	800dc6c <_dtoa_r+0xb34>
 800d1ce:	f10a 0303 	add.w	r3, sl, #3
 800d1d2:	f000 bd49 	b.w	800dc68 <_dtoa_r+0xb30>
 800d1d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	ec51 0b17 	vmov	r0, r1, d7
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d1e6:	f7f3 fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	b158      	cbz	r0, 800d206 <_dtoa_r+0xce>
 800d1ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	6013      	str	r3, [r2, #0]
 800d1f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1f6:	b113      	cbz	r3, 800d1fe <_dtoa_r+0xc6>
 800d1f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d1fa:	4b84      	ldr	r3, [pc, #528]	@ (800d40c <_dtoa_r+0x2d4>)
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d420 <_dtoa_r+0x2e8>
 800d202:	f000 bd33 	b.w	800dc6c <_dtoa_r+0xb34>
 800d206:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d20a:	aa16      	add	r2, sp, #88	@ 0x58
 800d20c:	a917      	add	r1, sp, #92	@ 0x5c
 800d20e:	4658      	mov	r0, fp
 800d210:	f001 f980 	bl	800e514 <__d2b>
 800d214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d218:	4681      	mov	r9, r0
 800d21a:	2e00      	cmp	r6, #0
 800d21c:	d077      	beq.n	800d30e <_dtoa_r+0x1d6>
 800d21e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d220:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d22c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d238:	4619      	mov	r1, r3
 800d23a:	2200      	movs	r2, #0
 800d23c:	4b74      	ldr	r3, [pc, #464]	@ (800d410 <_dtoa_r+0x2d8>)
 800d23e:	f7f3 f823 	bl	8000288 <__aeabi_dsub>
 800d242:	a369      	add	r3, pc, #420	@ (adr r3, 800d3e8 <_dtoa_r+0x2b0>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f9d6 	bl	80005f8 <__aeabi_dmul>
 800d24c:	a368      	add	r3, pc, #416	@ (adr r3, 800d3f0 <_dtoa_r+0x2b8>)
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f7f3 f81b 	bl	800028c <__adddf3>
 800d256:	4604      	mov	r4, r0
 800d258:	4630      	mov	r0, r6
 800d25a:	460d      	mov	r5, r1
 800d25c:	f7f3 f962 	bl	8000524 <__aeabi_i2d>
 800d260:	a365      	add	r3, pc, #404	@ (adr r3, 800d3f8 <_dtoa_r+0x2c0>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f9c7 	bl	80005f8 <__aeabi_dmul>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4620      	mov	r0, r4
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 f80b 	bl	800028c <__adddf3>
 800d276:	4604      	mov	r4, r0
 800d278:	460d      	mov	r5, r1
 800d27a:	f7f3 fc6d 	bl	8000b58 <__aeabi_d2iz>
 800d27e:	2200      	movs	r2, #0
 800d280:	4607      	mov	r7, r0
 800d282:	2300      	movs	r3, #0
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 fc28 	bl	8000adc <__aeabi_dcmplt>
 800d28c:	b140      	cbz	r0, 800d2a0 <_dtoa_r+0x168>
 800d28e:	4638      	mov	r0, r7
 800d290:	f7f3 f948 	bl	8000524 <__aeabi_i2d>
 800d294:	4622      	mov	r2, r4
 800d296:	462b      	mov	r3, r5
 800d298:	f7f3 fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800d29c:	b900      	cbnz	r0, 800d2a0 <_dtoa_r+0x168>
 800d29e:	3f01      	subs	r7, #1
 800d2a0:	2f16      	cmp	r7, #22
 800d2a2:	d851      	bhi.n	800d348 <_dtoa_r+0x210>
 800d2a4:	4b5b      	ldr	r3, [pc, #364]	@ (800d414 <_dtoa_r+0x2dc>)
 800d2a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2b2:	f7f3 fc13 	bl	8000adc <__aeabi_dcmplt>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d048      	beq.n	800d34c <_dtoa_r+0x214>
 800d2ba:	3f01      	subs	r7, #1
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d2c2:	1b9b      	subs	r3, r3, r6
 800d2c4:	1e5a      	subs	r2, r3, #1
 800d2c6:	bf44      	itt	mi
 800d2c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d2cc:	2300      	movmi	r3, #0
 800d2ce:	9208      	str	r2, [sp, #32]
 800d2d0:	bf54      	ite	pl
 800d2d2:	f04f 0800 	movpl.w	r8, #0
 800d2d6:	9308      	strmi	r3, [sp, #32]
 800d2d8:	2f00      	cmp	r7, #0
 800d2da:	db39      	blt.n	800d350 <_dtoa_r+0x218>
 800d2dc:	9b08      	ldr	r3, [sp, #32]
 800d2de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d2e0:	443b      	add	r3, r7
 800d2e2:	9308      	str	r3, [sp, #32]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ea:	2b09      	cmp	r3, #9
 800d2ec:	d864      	bhi.n	800d3b8 <_dtoa_r+0x280>
 800d2ee:	2b05      	cmp	r3, #5
 800d2f0:	bfc4      	itt	gt
 800d2f2:	3b04      	subgt	r3, #4
 800d2f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f8:	f1a3 0302 	sub.w	r3, r3, #2
 800d2fc:	bfcc      	ite	gt
 800d2fe:	2400      	movgt	r4, #0
 800d300:	2401      	movle	r4, #1
 800d302:	2b03      	cmp	r3, #3
 800d304:	d863      	bhi.n	800d3ce <_dtoa_r+0x296>
 800d306:	e8df f003 	tbb	[pc, r3]
 800d30a:	372a      	.short	0x372a
 800d30c:	5535      	.short	0x5535
 800d30e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d312:	441e      	add	r6, r3
 800d314:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d318:	2b20      	cmp	r3, #32
 800d31a:	bfc1      	itttt	gt
 800d31c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d320:	409f      	lslgt	r7, r3
 800d322:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d326:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d32a:	bfd6      	itet	le
 800d32c:	f1c3 0320 	rsble	r3, r3, #32
 800d330:	ea47 0003 	orrgt.w	r0, r7, r3
 800d334:	fa04 f003 	lslle.w	r0, r4, r3
 800d338:	f7f3 f8e4 	bl	8000504 <__aeabi_ui2d>
 800d33c:	2201      	movs	r2, #1
 800d33e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d342:	3e01      	subs	r6, #1
 800d344:	9214      	str	r2, [sp, #80]	@ 0x50
 800d346:	e777      	b.n	800d238 <_dtoa_r+0x100>
 800d348:	2301      	movs	r3, #1
 800d34a:	e7b8      	b.n	800d2be <_dtoa_r+0x186>
 800d34c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d34e:	e7b7      	b.n	800d2c0 <_dtoa_r+0x188>
 800d350:	427b      	negs	r3, r7
 800d352:	930a      	str	r3, [sp, #40]	@ 0x28
 800d354:	2300      	movs	r3, #0
 800d356:	eba8 0807 	sub.w	r8, r8, r7
 800d35a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d35c:	e7c4      	b.n	800d2e8 <_dtoa_r+0x1b0>
 800d35e:	2300      	movs	r3, #0
 800d360:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d364:	2b00      	cmp	r3, #0
 800d366:	dc35      	bgt.n	800d3d4 <_dtoa_r+0x29c>
 800d368:	2301      	movs	r3, #1
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	9307      	str	r3, [sp, #28]
 800d36e:	461a      	mov	r2, r3
 800d370:	920e      	str	r2, [sp, #56]	@ 0x38
 800d372:	e00b      	b.n	800d38c <_dtoa_r+0x254>
 800d374:	2301      	movs	r3, #1
 800d376:	e7f3      	b.n	800d360 <_dtoa_r+0x228>
 800d378:	2300      	movs	r3, #0
 800d37a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d37c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d37e:	18fb      	adds	r3, r7, r3
 800d380:	9300      	str	r3, [sp, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	2b01      	cmp	r3, #1
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	bfb8      	it	lt
 800d38a:	2301      	movlt	r3, #1
 800d38c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d390:	2100      	movs	r1, #0
 800d392:	2204      	movs	r2, #4
 800d394:	f102 0514 	add.w	r5, r2, #20
 800d398:	429d      	cmp	r5, r3
 800d39a:	d91f      	bls.n	800d3dc <_dtoa_r+0x2a4>
 800d39c:	6041      	str	r1, [r0, #4]
 800d39e:	4658      	mov	r0, fp
 800d3a0:	f000 fd8e 	bl	800dec0 <_Balloc>
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d13c      	bne.n	800d424 <_dtoa_r+0x2ec>
 800d3aa:	4b1b      	ldr	r3, [pc, #108]	@ (800d418 <_dtoa_r+0x2e0>)
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800d3b2:	e6d8      	b.n	800d166 <_dtoa_r+0x2e>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e7e0      	b.n	800d37a <_dtoa_r+0x242>
 800d3b8:	2401      	movs	r4, #1
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2312      	movs	r3, #18
 800d3cc:	e7d0      	b.n	800d370 <_dtoa_r+0x238>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d2:	e7f5      	b.n	800d3c0 <_dtoa_r+0x288>
 800d3d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	9307      	str	r3, [sp, #28]
 800d3da:	e7d7      	b.n	800d38c <_dtoa_r+0x254>
 800d3dc:	3101      	adds	r1, #1
 800d3de:	0052      	lsls	r2, r2, #1
 800d3e0:	e7d8      	b.n	800d394 <_dtoa_r+0x25c>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	636f4361 	.word	0x636f4361
 800d3ec:	3fd287a7 	.word	0x3fd287a7
 800d3f0:	8b60c8b3 	.word	0x8b60c8b3
 800d3f4:	3fc68a28 	.word	0x3fc68a28
 800d3f8:	509f79fb 	.word	0x509f79fb
 800d3fc:	3fd34413 	.word	0x3fd34413
 800d400:	0800fd21 	.word	0x0800fd21
 800d404:	0800fd38 	.word	0x0800fd38
 800d408:	7ff00000 	.word	0x7ff00000
 800d40c:	0800fcf1 	.word	0x0800fcf1
 800d410:	3ff80000 	.word	0x3ff80000
 800d414:	0800fe30 	.word	0x0800fe30
 800d418:	0800fd90 	.word	0x0800fd90
 800d41c:	0800fd1d 	.word	0x0800fd1d
 800d420:	0800fcf0 	.word	0x0800fcf0
 800d424:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d428:	6018      	str	r0, [r3, #0]
 800d42a:	9b07      	ldr	r3, [sp, #28]
 800d42c:	2b0e      	cmp	r3, #14
 800d42e:	f200 80a4 	bhi.w	800d57a <_dtoa_r+0x442>
 800d432:	2c00      	cmp	r4, #0
 800d434:	f000 80a1 	beq.w	800d57a <_dtoa_r+0x442>
 800d438:	2f00      	cmp	r7, #0
 800d43a:	dd33      	ble.n	800d4a4 <_dtoa_r+0x36c>
 800d43c:	4bad      	ldr	r3, [pc, #692]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d43e:	f007 020f 	and.w	r2, r7, #15
 800d442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d446:	ed93 7b00 	vldr	d7, [r3]
 800d44a:	05f8      	lsls	r0, r7, #23
 800d44c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d450:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d454:	d516      	bpl.n	800d484 <_dtoa_r+0x34c>
 800d456:	4ba8      	ldr	r3, [pc, #672]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d460:	f7f3 f9f4 	bl	800084c <__aeabi_ddiv>
 800d464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d468:	f004 040f 	and.w	r4, r4, #15
 800d46c:	2603      	movs	r6, #3
 800d46e:	4da2      	ldr	r5, [pc, #648]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d470:	b954      	cbnz	r4, 800d488 <_dtoa_r+0x350>
 800d472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d47a:	f7f3 f9e7 	bl	800084c <__aeabi_ddiv>
 800d47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d482:	e028      	b.n	800d4d6 <_dtoa_r+0x39e>
 800d484:	2602      	movs	r6, #2
 800d486:	e7f2      	b.n	800d46e <_dtoa_r+0x336>
 800d488:	07e1      	lsls	r1, r4, #31
 800d48a:	d508      	bpl.n	800d49e <_dtoa_r+0x366>
 800d48c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d490:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d494:	f7f3 f8b0 	bl	80005f8 <__aeabi_dmul>
 800d498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d49c:	3601      	adds	r6, #1
 800d49e:	1064      	asrs	r4, r4, #1
 800d4a0:	3508      	adds	r5, #8
 800d4a2:	e7e5      	b.n	800d470 <_dtoa_r+0x338>
 800d4a4:	f000 80d2 	beq.w	800d64c <_dtoa_r+0x514>
 800d4a8:	427c      	negs	r4, r7
 800d4aa:	4b92      	ldr	r3, [pc, #584]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d4ac:	4d92      	ldr	r5, [pc, #584]	@ (800d6f8 <_dtoa_r+0x5c0>)
 800d4ae:	f004 020f 	and.w	r2, r4, #15
 800d4b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4be:	f7f3 f89b 	bl	80005f8 <__aeabi_dmul>
 800d4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4c6:	1124      	asrs	r4, r4, #4
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	2602      	movs	r6, #2
 800d4cc:	2c00      	cmp	r4, #0
 800d4ce:	f040 80b2 	bne.w	800d636 <_dtoa_r+0x4fe>
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1d3      	bne.n	800d47e <_dtoa_r+0x346>
 800d4d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 80b7 	beq.w	800d650 <_dtoa_r+0x518>
 800d4e2:	4b86      	ldr	r3, [pc, #536]	@ (800d6fc <_dtoa_r+0x5c4>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	f7f3 faf7 	bl	8000adc <__aeabi_dcmplt>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f000 80ae 	beq.w	800d650 <_dtoa_r+0x518>
 800d4f4:	9b07      	ldr	r3, [sp, #28]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f000 80aa 	beq.w	800d650 <_dtoa_r+0x518>
 800d4fc:	9b00      	ldr	r3, [sp, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	dd37      	ble.n	800d572 <_dtoa_r+0x43a>
 800d502:	1e7b      	subs	r3, r7, #1
 800d504:	9304      	str	r3, [sp, #16]
 800d506:	4620      	mov	r0, r4
 800d508:	4b7d      	ldr	r3, [pc, #500]	@ (800d700 <_dtoa_r+0x5c8>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f3 f873 	bl	80005f8 <__aeabi_dmul>
 800d512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d516:	9c00      	ldr	r4, [sp, #0]
 800d518:	3601      	adds	r6, #1
 800d51a:	4630      	mov	r0, r6
 800d51c:	f7f3 f802 	bl	8000524 <__aeabi_i2d>
 800d520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d524:	f7f3 f868 	bl	80005f8 <__aeabi_dmul>
 800d528:	4b76      	ldr	r3, [pc, #472]	@ (800d704 <_dtoa_r+0x5cc>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	f7f2 feae 	bl	800028c <__adddf3>
 800d530:	4605      	mov	r5, r0
 800d532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d536:	2c00      	cmp	r4, #0
 800d538:	f040 808d 	bne.w	800d656 <_dtoa_r+0x51e>
 800d53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d540:	4b71      	ldr	r3, [pc, #452]	@ (800d708 <_dtoa_r+0x5d0>)
 800d542:	2200      	movs	r2, #0
 800d544:	f7f2 fea0 	bl	8000288 <__aeabi_dsub>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d550:	462a      	mov	r2, r5
 800d552:	4633      	mov	r3, r6
 800d554:	f7f3 fae0 	bl	8000b18 <__aeabi_dcmpgt>
 800d558:	2800      	cmp	r0, #0
 800d55a:	f040 828b 	bne.w	800da74 <_dtoa_r+0x93c>
 800d55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d562:	462a      	mov	r2, r5
 800d564:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d568:	f7f3 fab8 	bl	8000adc <__aeabi_dcmplt>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f040 8128 	bne.w	800d7c2 <_dtoa_r+0x68a>
 800d572:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d57a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f2c0 815a 	blt.w	800d836 <_dtoa_r+0x6fe>
 800d582:	2f0e      	cmp	r7, #14
 800d584:	f300 8157 	bgt.w	800d836 <_dtoa_r+0x6fe>
 800d588:	4b5a      	ldr	r3, [pc, #360]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d58a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d58e:	ed93 7b00 	vldr	d7, [r3]
 800d592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d594:	2b00      	cmp	r3, #0
 800d596:	ed8d 7b00 	vstr	d7, [sp]
 800d59a:	da03      	bge.n	800d5a4 <_dtoa_r+0x46c>
 800d59c:	9b07      	ldr	r3, [sp, #28]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f340 8101 	ble.w	800d7a6 <_dtoa_r+0x66e>
 800d5a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5a8:	4656      	mov	r6, sl
 800d5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	f7f3 f94b 	bl	800084c <__aeabi_ddiv>
 800d5b6:	f7f3 facf 	bl	8000b58 <__aeabi_d2iz>
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	f7f2 ffb2 	bl	8000524 <__aeabi_i2d>
 800d5c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c4:	f7f3 f818 	bl	80005f8 <__aeabi_dmul>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5d4:	f7f2 fe58 	bl	8000288 <__aeabi_dsub>
 800d5d8:	f806 4b01 	strb.w	r4, [r6], #1
 800d5dc:	9d07      	ldr	r5, [sp, #28]
 800d5de:	eba6 040a 	sub.w	r4, r6, sl
 800d5e2:	42a5      	cmp	r5, r4
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	f040 8117 	bne.w	800d81a <_dtoa_r+0x6e2>
 800d5ec:	f7f2 fe4e 	bl	800028c <__adddf3>
 800d5f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	f7f3 fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f040 80f9 	bne.w	800d7f4 <_dtoa_r+0x6bc>
 800d602:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f3 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d60e:	b118      	cbz	r0, 800d618 <_dtoa_r+0x4e0>
 800d610:	f018 0f01 	tst.w	r8, #1
 800d614:	f040 80ee 	bne.w	800d7f4 <_dtoa_r+0x6bc>
 800d618:	4649      	mov	r1, r9
 800d61a:	4658      	mov	r0, fp
 800d61c:	f000 fc90 	bl	800df40 <_Bfree>
 800d620:	2300      	movs	r3, #0
 800d622:	7033      	strb	r3, [r6, #0]
 800d624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d626:	3701      	adds	r7, #1
 800d628:	601f      	str	r7, [r3, #0]
 800d62a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 831d 	beq.w	800dc6c <_dtoa_r+0xb34>
 800d632:	601e      	str	r6, [r3, #0]
 800d634:	e31a      	b.n	800dc6c <_dtoa_r+0xb34>
 800d636:	07e2      	lsls	r2, r4, #31
 800d638:	d505      	bpl.n	800d646 <_dtoa_r+0x50e>
 800d63a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d63e:	f7f2 ffdb 	bl	80005f8 <__aeabi_dmul>
 800d642:	3601      	adds	r6, #1
 800d644:	2301      	movs	r3, #1
 800d646:	1064      	asrs	r4, r4, #1
 800d648:	3508      	adds	r5, #8
 800d64a:	e73f      	b.n	800d4cc <_dtoa_r+0x394>
 800d64c:	2602      	movs	r6, #2
 800d64e:	e742      	b.n	800d4d6 <_dtoa_r+0x39e>
 800d650:	9c07      	ldr	r4, [sp, #28]
 800d652:	9704      	str	r7, [sp, #16]
 800d654:	e761      	b.n	800d51a <_dtoa_r+0x3e2>
 800d656:	4b27      	ldr	r3, [pc, #156]	@ (800d6f4 <_dtoa_r+0x5bc>)
 800d658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d65a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d65e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d662:	4454      	add	r4, sl
 800d664:	2900      	cmp	r1, #0
 800d666:	d053      	beq.n	800d710 <_dtoa_r+0x5d8>
 800d668:	4928      	ldr	r1, [pc, #160]	@ (800d70c <_dtoa_r+0x5d4>)
 800d66a:	2000      	movs	r0, #0
 800d66c:	f7f3 f8ee 	bl	800084c <__aeabi_ddiv>
 800d670:	4633      	mov	r3, r6
 800d672:	462a      	mov	r2, r5
 800d674:	f7f2 fe08 	bl	8000288 <__aeabi_dsub>
 800d678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d67c:	4656      	mov	r6, sl
 800d67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d682:	f7f3 fa69 	bl	8000b58 <__aeabi_d2iz>
 800d686:	4605      	mov	r5, r0
 800d688:	f7f2 ff4c 	bl	8000524 <__aeabi_i2d>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d694:	f7f2 fdf8 	bl	8000288 <__aeabi_dsub>
 800d698:	3530      	adds	r5, #48	@ 0x30
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6a2:	f806 5b01 	strb.w	r5, [r6], #1
 800d6a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6aa:	f7f3 fa17 	bl	8000adc <__aeabi_dcmplt>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d171      	bne.n	800d796 <_dtoa_r+0x65e>
 800d6b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6b6:	4911      	ldr	r1, [pc, #68]	@ (800d6fc <_dtoa_r+0x5c4>)
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	f7f2 fde5 	bl	8000288 <__aeabi_dsub>
 800d6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6c2:	f7f3 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f040 8095 	bne.w	800d7f6 <_dtoa_r+0x6be>
 800d6cc:	42a6      	cmp	r6, r4
 800d6ce:	f43f af50 	beq.w	800d572 <_dtoa_r+0x43a>
 800d6d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d700 <_dtoa_r+0x5c8>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f7f2 ff8d 	bl	80005f8 <__aeabi_dmul>
 800d6de:	4b08      	ldr	r3, [pc, #32]	@ (800d700 <_dtoa_r+0x5c8>)
 800d6e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ea:	f7f2 ff85 	bl	80005f8 <__aeabi_dmul>
 800d6ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f2:	e7c4      	b.n	800d67e <_dtoa_r+0x546>
 800d6f4:	0800fe30 	.word	0x0800fe30
 800d6f8:	0800fe08 	.word	0x0800fe08
 800d6fc:	3ff00000 	.word	0x3ff00000
 800d700:	40240000 	.word	0x40240000
 800d704:	401c0000 	.word	0x401c0000
 800d708:	40140000 	.word	0x40140000
 800d70c:	3fe00000 	.word	0x3fe00000
 800d710:	4631      	mov	r1, r6
 800d712:	4628      	mov	r0, r5
 800d714:	f7f2 ff70 	bl	80005f8 <__aeabi_dmul>
 800d718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d71c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d71e:	4656      	mov	r6, sl
 800d720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d724:	f7f3 fa18 	bl	8000b58 <__aeabi_d2iz>
 800d728:	4605      	mov	r5, r0
 800d72a:	f7f2 fefb 	bl	8000524 <__aeabi_i2d>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d736:	f7f2 fda7 	bl	8000288 <__aeabi_dsub>
 800d73a:	3530      	adds	r5, #48	@ 0x30
 800d73c:	f806 5b01 	strb.w	r5, [r6], #1
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	42a6      	cmp	r6, r4
 800d746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d74a:	f04f 0200 	mov.w	r2, #0
 800d74e:	d124      	bne.n	800d79a <_dtoa_r+0x662>
 800d750:	4bac      	ldr	r3, [pc, #688]	@ (800da04 <_dtoa_r+0x8cc>)
 800d752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d756:	f7f2 fd99 	bl	800028c <__adddf3>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d762:	f7f3 f9d9 	bl	8000b18 <__aeabi_dcmpgt>
 800d766:	2800      	cmp	r0, #0
 800d768:	d145      	bne.n	800d7f6 <_dtoa_r+0x6be>
 800d76a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d76e:	49a5      	ldr	r1, [pc, #660]	@ (800da04 <_dtoa_r+0x8cc>)
 800d770:	2000      	movs	r0, #0
 800d772:	f7f2 fd89 	bl	8000288 <__aeabi_dsub>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d77e:	f7f3 f9ad 	bl	8000adc <__aeabi_dcmplt>
 800d782:	2800      	cmp	r0, #0
 800d784:	f43f aef5 	beq.w	800d572 <_dtoa_r+0x43a>
 800d788:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d78a:	1e73      	subs	r3, r6, #1
 800d78c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d78e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d792:	2b30      	cmp	r3, #48	@ 0x30
 800d794:	d0f8      	beq.n	800d788 <_dtoa_r+0x650>
 800d796:	9f04      	ldr	r7, [sp, #16]
 800d798:	e73e      	b.n	800d618 <_dtoa_r+0x4e0>
 800d79a:	4b9b      	ldr	r3, [pc, #620]	@ (800da08 <_dtoa_r+0x8d0>)
 800d79c:	f7f2 ff2c 	bl	80005f8 <__aeabi_dmul>
 800d7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7a4:	e7bc      	b.n	800d720 <_dtoa_r+0x5e8>
 800d7a6:	d10c      	bne.n	800d7c2 <_dtoa_r+0x68a>
 800d7a8:	4b98      	ldr	r3, [pc, #608]	@ (800da0c <_dtoa_r+0x8d4>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7b0:	f7f2 ff22 	bl	80005f8 <__aeabi_dmul>
 800d7b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7b8:	f7f3 f9a4 	bl	8000b04 <__aeabi_dcmpge>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	f000 8157 	beq.w	800da70 <_dtoa_r+0x938>
 800d7c2:	2400      	movs	r4, #0
 800d7c4:	4625      	mov	r5, r4
 800d7c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7c8:	43db      	mvns	r3, r3
 800d7ca:	9304      	str	r3, [sp, #16]
 800d7cc:	4656      	mov	r6, sl
 800d7ce:	2700      	movs	r7, #0
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	4658      	mov	r0, fp
 800d7d4:	f000 fbb4 	bl	800df40 <_Bfree>
 800d7d8:	2d00      	cmp	r5, #0
 800d7da:	d0dc      	beq.n	800d796 <_dtoa_r+0x65e>
 800d7dc:	b12f      	cbz	r7, 800d7ea <_dtoa_r+0x6b2>
 800d7de:	42af      	cmp	r7, r5
 800d7e0:	d003      	beq.n	800d7ea <_dtoa_r+0x6b2>
 800d7e2:	4639      	mov	r1, r7
 800d7e4:	4658      	mov	r0, fp
 800d7e6:	f000 fbab 	bl	800df40 <_Bfree>
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	4658      	mov	r0, fp
 800d7ee:	f000 fba7 	bl	800df40 <_Bfree>
 800d7f2:	e7d0      	b.n	800d796 <_dtoa_r+0x65e>
 800d7f4:	9704      	str	r7, [sp, #16]
 800d7f6:	4633      	mov	r3, r6
 800d7f8:	461e      	mov	r6, r3
 800d7fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7fe:	2a39      	cmp	r2, #57	@ 0x39
 800d800:	d107      	bne.n	800d812 <_dtoa_r+0x6da>
 800d802:	459a      	cmp	sl, r3
 800d804:	d1f8      	bne.n	800d7f8 <_dtoa_r+0x6c0>
 800d806:	9a04      	ldr	r2, [sp, #16]
 800d808:	3201      	adds	r2, #1
 800d80a:	9204      	str	r2, [sp, #16]
 800d80c:	2230      	movs	r2, #48	@ 0x30
 800d80e:	f88a 2000 	strb.w	r2, [sl]
 800d812:	781a      	ldrb	r2, [r3, #0]
 800d814:	3201      	adds	r2, #1
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	e7bd      	b.n	800d796 <_dtoa_r+0x65e>
 800d81a:	4b7b      	ldr	r3, [pc, #492]	@ (800da08 <_dtoa_r+0x8d0>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	f7f2 feeb 	bl	80005f8 <__aeabi_dmul>
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	f7f3 f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d82e:	2800      	cmp	r0, #0
 800d830:	f43f aebb 	beq.w	800d5aa <_dtoa_r+0x472>
 800d834:	e6f0      	b.n	800d618 <_dtoa_r+0x4e0>
 800d836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d838:	2a00      	cmp	r2, #0
 800d83a:	f000 80db 	beq.w	800d9f4 <_dtoa_r+0x8bc>
 800d83e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d840:	2a01      	cmp	r2, #1
 800d842:	f300 80bf 	bgt.w	800d9c4 <_dtoa_r+0x88c>
 800d846:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d848:	2a00      	cmp	r2, #0
 800d84a:	f000 80b7 	beq.w	800d9bc <_dtoa_r+0x884>
 800d84e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d852:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d854:	4646      	mov	r6, r8
 800d856:	9a08      	ldr	r2, [sp, #32]
 800d858:	2101      	movs	r1, #1
 800d85a:	441a      	add	r2, r3
 800d85c:	4658      	mov	r0, fp
 800d85e:	4498      	add	r8, r3
 800d860:	9208      	str	r2, [sp, #32]
 800d862:	f000 fc21 	bl	800e0a8 <__i2b>
 800d866:	4605      	mov	r5, r0
 800d868:	b15e      	cbz	r6, 800d882 <_dtoa_r+0x74a>
 800d86a:	9b08      	ldr	r3, [sp, #32]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	dd08      	ble.n	800d882 <_dtoa_r+0x74a>
 800d870:	42b3      	cmp	r3, r6
 800d872:	9a08      	ldr	r2, [sp, #32]
 800d874:	bfa8      	it	ge
 800d876:	4633      	movge	r3, r6
 800d878:	eba8 0803 	sub.w	r8, r8, r3
 800d87c:	1af6      	subs	r6, r6, r3
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	9308      	str	r3, [sp, #32]
 800d882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d884:	b1f3      	cbz	r3, 800d8c4 <_dtoa_r+0x78c>
 800d886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80b7 	beq.w	800d9fc <_dtoa_r+0x8c4>
 800d88e:	b18c      	cbz	r4, 800d8b4 <_dtoa_r+0x77c>
 800d890:	4629      	mov	r1, r5
 800d892:	4622      	mov	r2, r4
 800d894:	4658      	mov	r0, fp
 800d896:	f000 fcc7 	bl	800e228 <__pow5mult>
 800d89a:	464a      	mov	r2, r9
 800d89c:	4601      	mov	r1, r0
 800d89e:	4605      	mov	r5, r0
 800d8a0:	4658      	mov	r0, fp
 800d8a2:	f000 fc17 	bl	800e0d4 <__multiply>
 800d8a6:	4649      	mov	r1, r9
 800d8a8:	9004      	str	r0, [sp, #16]
 800d8aa:	4658      	mov	r0, fp
 800d8ac:	f000 fb48 	bl	800df40 <_Bfree>
 800d8b0:	9b04      	ldr	r3, [sp, #16]
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8b6:	1b1a      	subs	r2, r3, r4
 800d8b8:	d004      	beq.n	800d8c4 <_dtoa_r+0x78c>
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	4658      	mov	r0, fp
 800d8be:	f000 fcb3 	bl	800e228 <__pow5mult>
 800d8c2:	4681      	mov	r9, r0
 800d8c4:	2101      	movs	r1, #1
 800d8c6:	4658      	mov	r0, fp
 800d8c8:	f000 fbee 	bl	800e0a8 <__i2b>
 800d8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 81cf 	beq.w	800dc74 <_dtoa_r+0xb3c>
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	4601      	mov	r1, r0
 800d8da:	4658      	mov	r0, fp
 800d8dc:	f000 fca4 	bl	800e228 <__pow5mult>
 800d8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	f300 8095 	bgt.w	800da14 <_dtoa_r+0x8dc>
 800d8ea:	9b02      	ldr	r3, [sp, #8]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f040 8087 	bne.w	800da00 <_dtoa_r+0x8c8>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f040 8089 	bne.w	800da10 <_dtoa_r+0x8d8>
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d904:	0d1b      	lsrs	r3, r3, #20
 800d906:	051b      	lsls	r3, r3, #20
 800d908:	b12b      	cbz	r3, 800d916 <_dtoa_r+0x7de>
 800d90a:	9b08      	ldr	r3, [sp, #32]
 800d90c:	3301      	adds	r3, #1
 800d90e:	9308      	str	r3, [sp, #32]
 800d910:	f108 0801 	add.w	r8, r8, #1
 800d914:	2301      	movs	r3, #1
 800d916:	930a      	str	r3, [sp, #40]	@ 0x28
 800d918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 81b0 	beq.w	800dc80 <_dtoa_r+0xb48>
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d926:	6918      	ldr	r0, [r3, #16]
 800d928:	f000 fb72 	bl	800e010 <__hi0bits>
 800d92c:	f1c0 0020 	rsb	r0, r0, #32
 800d930:	9b08      	ldr	r3, [sp, #32]
 800d932:	4418      	add	r0, r3
 800d934:	f010 001f 	ands.w	r0, r0, #31
 800d938:	d077      	beq.n	800da2a <_dtoa_r+0x8f2>
 800d93a:	f1c0 0320 	rsb	r3, r0, #32
 800d93e:	2b04      	cmp	r3, #4
 800d940:	dd6b      	ble.n	800da1a <_dtoa_r+0x8e2>
 800d942:	9b08      	ldr	r3, [sp, #32]
 800d944:	f1c0 001c 	rsb	r0, r0, #28
 800d948:	4403      	add	r3, r0
 800d94a:	4480      	add	r8, r0
 800d94c:	4406      	add	r6, r0
 800d94e:	9308      	str	r3, [sp, #32]
 800d950:	f1b8 0f00 	cmp.w	r8, #0
 800d954:	dd05      	ble.n	800d962 <_dtoa_r+0x82a>
 800d956:	4649      	mov	r1, r9
 800d958:	4642      	mov	r2, r8
 800d95a:	4658      	mov	r0, fp
 800d95c:	f000 fcbe 	bl	800e2dc <__lshift>
 800d960:	4681      	mov	r9, r0
 800d962:	9b08      	ldr	r3, [sp, #32]
 800d964:	2b00      	cmp	r3, #0
 800d966:	dd05      	ble.n	800d974 <_dtoa_r+0x83c>
 800d968:	4621      	mov	r1, r4
 800d96a:	461a      	mov	r2, r3
 800d96c:	4658      	mov	r0, fp
 800d96e:	f000 fcb5 	bl	800e2dc <__lshift>
 800d972:	4604      	mov	r4, r0
 800d974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d976:	2b00      	cmp	r3, #0
 800d978:	d059      	beq.n	800da2e <_dtoa_r+0x8f6>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4648      	mov	r0, r9
 800d97e:	f000 fd19 	bl	800e3b4 <__mcmp>
 800d982:	2800      	cmp	r0, #0
 800d984:	da53      	bge.n	800da2e <_dtoa_r+0x8f6>
 800d986:	1e7b      	subs	r3, r7, #1
 800d988:	9304      	str	r3, [sp, #16]
 800d98a:	4649      	mov	r1, r9
 800d98c:	2300      	movs	r3, #0
 800d98e:	220a      	movs	r2, #10
 800d990:	4658      	mov	r0, fp
 800d992:	f000 faf7 	bl	800df84 <__multadd>
 800d996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d998:	4681      	mov	r9, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 8172 	beq.w	800dc84 <_dtoa_r+0xb4c>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	220a      	movs	r2, #10
 800d9a6:	4658      	mov	r0, fp
 800d9a8:	f000 faec 	bl	800df84 <__multadd>
 800d9ac:	9b00      	ldr	r3, [sp, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	dc67      	bgt.n	800da84 <_dtoa_r+0x94c>
 800d9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	dc41      	bgt.n	800da3e <_dtoa_r+0x906>
 800d9ba:	e063      	b.n	800da84 <_dtoa_r+0x94c>
 800d9bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d9be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d9c2:	e746      	b.n	800d852 <_dtoa_r+0x71a>
 800d9c4:	9b07      	ldr	r3, [sp, #28]
 800d9c6:	1e5c      	subs	r4, r3, #1
 800d9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ca:	42a3      	cmp	r3, r4
 800d9cc:	bfbf      	itttt	lt
 800d9ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d9d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d9d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d9d4:	1ae3      	sublt	r3, r4, r3
 800d9d6:	bfb4      	ite	lt
 800d9d8:	18d2      	addlt	r2, r2, r3
 800d9da:	1b1c      	subge	r4, r3, r4
 800d9dc:	9b07      	ldr	r3, [sp, #28]
 800d9de:	bfbc      	itt	lt
 800d9e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d9e2:	2400      	movlt	r4, #0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	bfb5      	itete	lt
 800d9e8:	eba8 0603 	sublt.w	r6, r8, r3
 800d9ec:	9b07      	ldrge	r3, [sp, #28]
 800d9ee:	2300      	movlt	r3, #0
 800d9f0:	4646      	movge	r6, r8
 800d9f2:	e730      	b.n	800d856 <_dtoa_r+0x71e>
 800d9f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d9f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d9f8:	4646      	mov	r6, r8
 800d9fa:	e735      	b.n	800d868 <_dtoa_r+0x730>
 800d9fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9fe:	e75c      	b.n	800d8ba <_dtoa_r+0x782>
 800da00:	2300      	movs	r3, #0
 800da02:	e788      	b.n	800d916 <_dtoa_r+0x7de>
 800da04:	3fe00000 	.word	0x3fe00000
 800da08:	40240000 	.word	0x40240000
 800da0c:	40140000 	.word	0x40140000
 800da10:	9b02      	ldr	r3, [sp, #8]
 800da12:	e780      	b.n	800d916 <_dtoa_r+0x7de>
 800da14:	2300      	movs	r3, #0
 800da16:	930a      	str	r3, [sp, #40]	@ 0x28
 800da18:	e782      	b.n	800d920 <_dtoa_r+0x7e8>
 800da1a:	d099      	beq.n	800d950 <_dtoa_r+0x818>
 800da1c:	9a08      	ldr	r2, [sp, #32]
 800da1e:	331c      	adds	r3, #28
 800da20:	441a      	add	r2, r3
 800da22:	4498      	add	r8, r3
 800da24:	441e      	add	r6, r3
 800da26:	9208      	str	r2, [sp, #32]
 800da28:	e792      	b.n	800d950 <_dtoa_r+0x818>
 800da2a:	4603      	mov	r3, r0
 800da2c:	e7f6      	b.n	800da1c <_dtoa_r+0x8e4>
 800da2e:	9b07      	ldr	r3, [sp, #28]
 800da30:	9704      	str	r7, [sp, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	dc20      	bgt.n	800da78 <_dtoa_r+0x940>
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	dd1e      	ble.n	800da7c <_dtoa_r+0x944>
 800da3e:	9b00      	ldr	r3, [sp, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f47f aec0 	bne.w	800d7c6 <_dtoa_r+0x68e>
 800da46:	4621      	mov	r1, r4
 800da48:	2205      	movs	r2, #5
 800da4a:	4658      	mov	r0, fp
 800da4c:	f000 fa9a 	bl	800df84 <__multadd>
 800da50:	4601      	mov	r1, r0
 800da52:	4604      	mov	r4, r0
 800da54:	4648      	mov	r0, r9
 800da56:	f000 fcad 	bl	800e3b4 <__mcmp>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	f77f aeb3 	ble.w	800d7c6 <_dtoa_r+0x68e>
 800da60:	4656      	mov	r6, sl
 800da62:	2331      	movs	r3, #49	@ 0x31
 800da64:	f806 3b01 	strb.w	r3, [r6], #1
 800da68:	9b04      	ldr	r3, [sp, #16]
 800da6a:	3301      	adds	r3, #1
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	e6ae      	b.n	800d7ce <_dtoa_r+0x696>
 800da70:	9c07      	ldr	r4, [sp, #28]
 800da72:	9704      	str	r7, [sp, #16]
 800da74:	4625      	mov	r5, r4
 800da76:	e7f3      	b.n	800da60 <_dtoa_r+0x928>
 800da78:	9b07      	ldr	r3, [sp, #28]
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 8104 	beq.w	800dc8c <_dtoa_r+0xb54>
 800da84:	2e00      	cmp	r6, #0
 800da86:	dd05      	ble.n	800da94 <_dtoa_r+0x95c>
 800da88:	4629      	mov	r1, r5
 800da8a:	4632      	mov	r2, r6
 800da8c:	4658      	mov	r0, fp
 800da8e:	f000 fc25 	bl	800e2dc <__lshift>
 800da92:	4605      	mov	r5, r0
 800da94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da96:	2b00      	cmp	r3, #0
 800da98:	d05a      	beq.n	800db50 <_dtoa_r+0xa18>
 800da9a:	6869      	ldr	r1, [r5, #4]
 800da9c:	4658      	mov	r0, fp
 800da9e:	f000 fa0f 	bl	800dec0 <_Balloc>
 800daa2:	4606      	mov	r6, r0
 800daa4:	b928      	cbnz	r0, 800dab2 <_dtoa_r+0x97a>
 800daa6:	4b84      	ldr	r3, [pc, #528]	@ (800dcb8 <_dtoa_r+0xb80>)
 800daa8:	4602      	mov	r2, r0
 800daaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800daae:	f7ff bb5a 	b.w	800d166 <_dtoa_r+0x2e>
 800dab2:	692a      	ldr	r2, [r5, #16]
 800dab4:	3202      	adds	r2, #2
 800dab6:	0092      	lsls	r2, r2, #2
 800dab8:	f105 010c 	add.w	r1, r5, #12
 800dabc:	300c      	adds	r0, #12
 800dabe:	f001 f803 	bl	800eac8 <memcpy>
 800dac2:	2201      	movs	r2, #1
 800dac4:	4631      	mov	r1, r6
 800dac6:	4658      	mov	r0, fp
 800dac8:	f000 fc08 	bl	800e2dc <__lshift>
 800dacc:	f10a 0301 	add.w	r3, sl, #1
 800dad0:	9307      	str	r3, [sp, #28]
 800dad2:	9b00      	ldr	r3, [sp, #0]
 800dad4:	4453      	add	r3, sl
 800dad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dad8:	9b02      	ldr	r3, [sp, #8]
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	462f      	mov	r7, r5
 800dae0:	930a      	str	r3, [sp, #40]	@ 0x28
 800dae2:	4605      	mov	r5, r0
 800dae4:	9b07      	ldr	r3, [sp, #28]
 800dae6:	4621      	mov	r1, r4
 800dae8:	3b01      	subs	r3, #1
 800daea:	4648      	mov	r0, r9
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	f7ff fa9a 	bl	800d026 <quorem>
 800daf2:	4639      	mov	r1, r7
 800daf4:	9002      	str	r0, [sp, #8]
 800daf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dafa:	4648      	mov	r0, r9
 800dafc:	f000 fc5a 	bl	800e3b4 <__mcmp>
 800db00:	462a      	mov	r2, r5
 800db02:	9008      	str	r0, [sp, #32]
 800db04:	4621      	mov	r1, r4
 800db06:	4658      	mov	r0, fp
 800db08:	f000 fc70 	bl	800e3ec <__mdiff>
 800db0c:	68c2      	ldr	r2, [r0, #12]
 800db0e:	4606      	mov	r6, r0
 800db10:	bb02      	cbnz	r2, 800db54 <_dtoa_r+0xa1c>
 800db12:	4601      	mov	r1, r0
 800db14:	4648      	mov	r0, r9
 800db16:	f000 fc4d 	bl	800e3b4 <__mcmp>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4631      	mov	r1, r6
 800db1e:	4658      	mov	r0, fp
 800db20:	920e      	str	r2, [sp, #56]	@ 0x38
 800db22:	f000 fa0d 	bl	800df40 <_Bfree>
 800db26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db2a:	9e07      	ldr	r6, [sp, #28]
 800db2c:	ea43 0102 	orr.w	r1, r3, r2
 800db30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db32:	4319      	orrs	r1, r3
 800db34:	d110      	bne.n	800db58 <_dtoa_r+0xa20>
 800db36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db3a:	d029      	beq.n	800db90 <_dtoa_r+0xa58>
 800db3c:	9b08      	ldr	r3, [sp, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dd02      	ble.n	800db48 <_dtoa_r+0xa10>
 800db42:	9b02      	ldr	r3, [sp, #8]
 800db44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800db48:	9b00      	ldr	r3, [sp, #0]
 800db4a:	f883 8000 	strb.w	r8, [r3]
 800db4e:	e63f      	b.n	800d7d0 <_dtoa_r+0x698>
 800db50:	4628      	mov	r0, r5
 800db52:	e7bb      	b.n	800dacc <_dtoa_r+0x994>
 800db54:	2201      	movs	r2, #1
 800db56:	e7e1      	b.n	800db1c <_dtoa_r+0x9e4>
 800db58:	9b08      	ldr	r3, [sp, #32]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db04      	blt.n	800db68 <_dtoa_r+0xa30>
 800db5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db60:	430b      	orrs	r3, r1
 800db62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db64:	430b      	orrs	r3, r1
 800db66:	d120      	bne.n	800dbaa <_dtoa_r+0xa72>
 800db68:	2a00      	cmp	r2, #0
 800db6a:	dded      	ble.n	800db48 <_dtoa_r+0xa10>
 800db6c:	4649      	mov	r1, r9
 800db6e:	2201      	movs	r2, #1
 800db70:	4658      	mov	r0, fp
 800db72:	f000 fbb3 	bl	800e2dc <__lshift>
 800db76:	4621      	mov	r1, r4
 800db78:	4681      	mov	r9, r0
 800db7a:	f000 fc1b 	bl	800e3b4 <__mcmp>
 800db7e:	2800      	cmp	r0, #0
 800db80:	dc03      	bgt.n	800db8a <_dtoa_r+0xa52>
 800db82:	d1e1      	bne.n	800db48 <_dtoa_r+0xa10>
 800db84:	f018 0f01 	tst.w	r8, #1
 800db88:	d0de      	beq.n	800db48 <_dtoa_r+0xa10>
 800db8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db8e:	d1d8      	bne.n	800db42 <_dtoa_r+0xa0a>
 800db90:	9a00      	ldr	r2, [sp, #0]
 800db92:	2339      	movs	r3, #57	@ 0x39
 800db94:	7013      	strb	r3, [r2, #0]
 800db96:	4633      	mov	r3, r6
 800db98:	461e      	mov	r6, r3
 800db9a:	3b01      	subs	r3, #1
 800db9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dba0:	2a39      	cmp	r2, #57	@ 0x39
 800dba2:	d052      	beq.n	800dc4a <_dtoa_r+0xb12>
 800dba4:	3201      	adds	r2, #1
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e612      	b.n	800d7d0 <_dtoa_r+0x698>
 800dbaa:	2a00      	cmp	r2, #0
 800dbac:	dd07      	ble.n	800dbbe <_dtoa_r+0xa86>
 800dbae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbb2:	d0ed      	beq.n	800db90 <_dtoa_r+0xa58>
 800dbb4:	9a00      	ldr	r2, [sp, #0]
 800dbb6:	f108 0301 	add.w	r3, r8, #1
 800dbba:	7013      	strb	r3, [r2, #0]
 800dbbc:	e608      	b.n	800d7d0 <_dtoa_r+0x698>
 800dbbe:	9b07      	ldr	r3, [sp, #28]
 800dbc0:	9a07      	ldr	r2, [sp, #28]
 800dbc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d028      	beq.n	800dc1e <_dtoa_r+0xae6>
 800dbcc:	4649      	mov	r1, r9
 800dbce:	2300      	movs	r3, #0
 800dbd0:	220a      	movs	r2, #10
 800dbd2:	4658      	mov	r0, fp
 800dbd4:	f000 f9d6 	bl	800df84 <__multadd>
 800dbd8:	42af      	cmp	r7, r5
 800dbda:	4681      	mov	r9, r0
 800dbdc:	f04f 0300 	mov.w	r3, #0
 800dbe0:	f04f 020a 	mov.w	r2, #10
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4658      	mov	r0, fp
 800dbe8:	d107      	bne.n	800dbfa <_dtoa_r+0xac2>
 800dbea:	f000 f9cb 	bl	800df84 <__multadd>
 800dbee:	4607      	mov	r7, r0
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	9b07      	ldr	r3, [sp, #28]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	9307      	str	r3, [sp, #28]
 800dbf8:	e774      	b.n	800dae4 <_dtoa_r+0x9ac>
 800dbfa:	f000 f9c3 	bl	800df84 <__multadd>
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4607      	mov	r7, r0
 800dc02:	2300      	movs	r3, #0
 800dc04:	220a      	movs	r2, #10
 800dc06:	4658      	mov	r0, fp
 800dc08:	f000 f9bc 	bl	800df84 <__multadd>
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	e7f0      	b.n	800dbf2 <_dtoa_r+0xaba>
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	bfcc      	ite	gt
 800dc16:	461e      	movgt	r6, r3
 800dc18:	2601      	movle	r6, #1
 800dc1a:	4456      	add	r6, sl
 800dc1c:	2700      	movs	r7, #0
 800dc1e:	4649      	mov	r1, r9
 800dc20:	2201      	movs	r2, #1
 800dc22:	4658      	mov	r0, fp
 800dc24:	f000 fb5a 	bl	800e2dc <__lshift>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4681      	mov	r9, r0
 800dc2c:	f000 fbc2 	bl	800e3b4 <__mcmp>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	dcb0      	bgt.n	800db96 <_dtoa_r+0xa5e>
 800dc34:	d102      	bne.n	800dc3c <_dtoa_r+0xb04>
 800dc36:	f018 0f01 	tst.w	r8, #1
 800dc3a:	d1ac      	bne.n	800db96 <_dtoa_r+0xa5e>
 800dc3c:	4633      	mov	r3, r6
 800dc3e:	461e      	mov	r6, r3
 800dc40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc44:	2a30      	cmp	r2, #48	@ 0x30
 800dc46:	d0fa      	beq.n	800dc3e <_dtoa_r+0xb06>
 800dc48:	e5c2      	b.n	800d7d0 <_dtoa_r+0x698>
 800dc4a:	459a      	cmp	sl, r3
 800dc4c:	d1a4      	bne.n	800db98 <_dtoa_r+0xa60>
 800dc4e:	9b04      	ldr	r3, [sp, #16]
 800dc50:	3301      	adds	r3, #1
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	2331      	movs	r3, #49	@ 0x31
 800dc56:	f88a 3000 	strb.w	r3, [sl]
 800dc5a:	e5b9      	b.n	800d7d0 <_dtoa_r+0x698>
 800dc5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dcbc <_dtoa_r+0xb84>
 800dc62:	b11b      	cbz	r3, 800dc6c <_dtoa_r+0xb34>
 800dc64:	f10a 0308 	add.w	r3, sl, #8
 800dc68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	4650      	mov	r0, sl
 800dc6e:	b019      	add	sp, #100	@ 0x64
 800dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	f77f ae37 	ble.w	800d8ea <_dtoa_r+0x7b2>
 800dc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc80:	2001      	movs	r0, #1
 800dc82:	e655      	b.n	800d930 <_dtoa_r+0x7f8>
 800dc84:	9b00      	ldr	r3, [sp, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f77f aed6 	ble.w	800da38 <_dtoa_r+0x900>
 800dc8c:	4656      	mov	r6, sl
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4648      	mov	r0, r9
 800dc92:	f7ff f9c8 	bl	800d026 <quorem>
 800dc96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc9a:	f806 8b01 	strb.w	r8, [r6], #1
 800dc9e:	9b00      	ldr	r3, [sp, #0]
 800dca0:	eba6 020a 	sub.w	r2, r6, sl
 800dca4:	4293      	cmp	r3, r2
 800dca6:	ddb3      	ble.n	800dc10 <_dtoa_r+0xad8>
 800dca8:	4649      	mov	r1, r9
 800dcaa:	2300      	movs	r3, #0
 800dcac:	220a      	movs	r2, #10
 800dcae:	4658      	mov	r0, fp
 800dcb0:	f000 f968 	bl	800df84 <__multadd>
 800dcb4:	4681      	mov	r9, r0
 800dcb6:	e7ea      	b.n	800dc8e <_dtoa_r+0xb56>
 800dcb8:	0800fd90 	.word	0x0800fd90
 800dcbc:	0800fd14 	.word	0x0800fd14

0800dcc0 <_free_r>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	d041      	beq.n	800dd4c <_free_r+0x8c>
 800dcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dccc:	1f0c      	subs	r4, r1, #4
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bfb8      	it	lt
 800dcd2:	18e4      	addlt	r4, r4, r3
 800dcd4:	f000 f8e8 	bl	800dea8 <__malloc_lock>
 800dcd8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd50 <_free_r+0x90>)
 800dcda:	6813      	ldr	r3, [r2, #0]
 800dcdc:	b933      	cbnz	r3, 800dcec <_free_r+0x2c>
 800dcde:	6063      	str	r3, [r4, #4]
 800dce0:	6014      	str	r4, [r2, #0]
 800dce2:	4628      	mov	r0, r5
 800dce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce8:	f000 b8e4 	b.w	800deb4 <__malloc_unlock>
 800dcec:	42a3      	cmp	r3, r4
 800dcee:	d908      	bls.n	800dd02 <_free_r+0x42>
 800dcf0:	6820      	ldr	r0, [r4, #0]
 800dcf2:	1821      	adds	r1, r4, r0
 800dcf4:	428b      	cmp	r3, r1
 800dcf6:	bf01      	itttt	eq
 800dcf8:	6819      	ldreq	r1, [r3, #0]
 800dcfa:	685b      	ldreq	r3, [r3, #4]
 800dcfc:	1809      	addeq	r1, r1, r0
 800dcfe:	6021      	streq	r1, [r4, #0]
 800dd00:	e7ed      	b.n	800dcde <_free_r+0x1e>
 800dd02:	461a      	mov	r2, r3
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	b10b      	cbz	r3, 800dd0c <_free_r+0x4c>
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	d9fa      	bls.n	800dd02 <_free_r+0x42>
 800dd0c:	6811      	ldr	r1, [r2, #0]
 800dd0e:	1850      	adds	r0, r2, r1
 800dd10:	42a0      	cmp	r0, r4
 800dd12:	d10b      	bne.n	800dd2c <_free_r+0x6c>
 800dd14:	6820      	ldr	r0, [r4, #0]
 800dd16:	4401      	add	r1, r0
 800dd18:	1850      	adds	r0, r2, r1
 800dd1a:	4283      	cmp	r3, r0
 800dd1c:	6011      	str	r1, [r2, #0]
 800dd1e:	d1e0      	bne.n	800dce2 <_free_r+0x22>
 800dd20:	6818      	ldr	r0, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	6053      	str	r3, [r2, #4]
 800dd26:	4408      	add	r0, r1
 800dd28:	6010      	str	r0, [r2, #0]
 800dd2a:	e7da      	b.n	800dce2 <_free_r+0x22>
 800dd2c:	d902      	bls.n	800dd34 <_free_r+0x74>
 800dd2e:	230c      	movs	r3, #12
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	e7d6      	b.n	800dce2 <_free_r+0x22>
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	1821      	adds	r1, r4, r0
 800dd38:	428b      	cmp	r3, r1
 800dd3a:	bf04      	itt	eq
 800dd3c:	6819      	ldreq	r1, [r3, #0]
 800dd3e:	685b      	ldreq	r3, [r3, #4]
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	bf04      	itt	eq
 800dd44:	1809      	addeq	r1, r1, r0
 800dd46:	6021      	streq	r1, [r4, #0]
 800dd48:	6054      	str	r4, [r2, #4]
 800dd4a:	e7ca      	b.n	800dce2 <_free_r+0x22>
 800dd4c:	bd38      	pop	{r3, r4, r5, pc}
 800dd4e:	bf00      	nop
 800dd50:	2000077c 	.word	0x2000077c

0800dd54 <malloc>:
 800dd54:	4b02      	ldr	r3, [pc, #8]	@ (800dd60 <malloc+0xc>)
 800dd56:	4601      	mov	r1, r0
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	f000 b825 	b.w	800dda8 <_malloc_r>
 800dd5e:	bf00      	nop
 800dd60:	2000001c 	.word	0x2000001c

0800dd64 <sbrk_aligned>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	4e0f      	ldr	r6, [pc, #60]	@ (800dda4 <sbrk_aligned+0x40>)
 800dd68:	460c      	mov	r4, r1
 800dd6a:	6831      	ldr	r1, [r6, #0]
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	b911      	cbnz	r1, 800dd76 <sbrk_aligned+0x12>
 800dd70:	f000 fe9a 	bl	800eaa8 <_sbrk_r>
 800dd74:	6030      	str	r0, [r6, #0]
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 fe95 	bl	800eaa8 <_sbrk_r>
 800dd7e:	1c43      	adds	r3, r0, #1
 800dd80:	d103      	bne.n	800dd8a <sbrk_aligned+0x26>
 800dd82:	f04f 34ff 	mov.w	r4, #4294967295
 800dd86:	4620      	mov	r0, r4
 800dd88:	bd70      	pop	{r4, r5, r6, pc}
 800dd8a:	1cc4      	adds	r4, r0, #3
 800dd8c:	f024 0403 	bic.w	r4, r4, #3
 800dd90:	42a0      	cmp	r0, r4
 800dd92:	d0f8      	beq.n	800dd86 <sbrk_aligned+0x22>
 800dd94:	1a21      	subs	r1, r4, r0
 800dd96:	4628      	mov	r0, r5
 800dd98:	f000 fe86 	bl	800eaa8 <_sbrk_r>
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	d1f2      	bne.n	800dd86 <sbrk_aligned+0x22>
 800dda0:	e7ef      	b.n	800dd82 <sbrk_aligned+0x1e>
 800dda2:	bf00      	nop
 800dda4:	20000778 	.word	0x20000778

0800dda8 <_malloc_r>:
 800dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddac:	1ccd      	adds	r5, r1, #3
 800ddae:	f025 0503 	bic.w	r5, r5, #3
 800ddb2:	3508      	adds	r5, #8
 800ddb4:	2d0c      	cmp	r5, #12
 800ddb6:	bf38      	it	cc
 800ddb8:	250c      	movcc	r5, #12
 800ddba:	2d00      	cmp	r5, #0
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	db01      	blt.n	800ddc4 <_malloc_r+0x1c>
 800ddc0:	42a9      	cmp	r1, r5
 800ddc2:	d904      	bls.n	800ddce <_malloc_r+0x26>
 800ddc4:	230c      	movs	r3, #12
 800ddc6:	6033      	str	r3, [r6, #0]
 800ddc8:	2000      	movs	r0, #0
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dea4 <_malloc_r+0xfc>
 800ddd2:	f000 f869 	bl	800dea8 <__malloc_lock>
 800ddd6:	f8d8 3000 	ldr.w	r3, [r8]
 800ddda:	461c      	mov	r4, r3
 800dddc:	bb44      	cbnz	r4, 800de30 <_malloc_r+0x88>
 800ddde:	4629      	mov	r1, r5
 800dde0:	4630      	mov	r0, r6
 800dde2:	f7ff ffbf 	bl	800dd64 <sbrk_aligned>
 800dde6:	1c43      	adds	r3, r0, #1
 800dde8:	4604      	mov	r4, r0
 800ddea:	d158      	bne.n	800de9e <_malloc_r+0xf6>
 800ddec:	f8d8 4000 	ldr.w	r4, [r8]
 800ddf0:	4627      	mov	r7, r4
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	d143      	bne.n	800de7e <_malloc_r+0xd6>
 800ddf6:	2c00      	cmp	r4, #0
 800ddf8:	d04b      	beq.n	800de92 <_malloc_r+0xea>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	4630      	mov	r0, r6
 800de00:	eb04 0903 	add.w	r9, r4, r3
 800de04:	f000 fe50 	bl	800eaa8 <_sbrk_r>
 800de08:	4581      	cmp	r9, r0
 800de0a:	d142      	bne.n	800de92 <_malloc_r+0xea>
 800de0c:	6821      	ldr	r1, [r4, #0]
 800de0e:	1a6d      	subs	r5, r5, r1
 800de10:	4629      	mov	r1, r5
 800de12:	4630      	mov	r0, r6
 800de14:	f7ff ffa6 	bl	800dd64 <sbrk_aligned>
 800de18:	3001      	adds	r0, #1
 800de1a:	d03a      	beq.n	800de92 <_malloc_r+0xea>
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	442b      	add	r3, r5
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	f8d8 3000 	ldr.w	r3, [r8]
 800de26:	685a      	ldr	r2, [r3, #4]
 800de28:	bb62      	cbnz	r2, 800de84 <_malloc_r+0xdc>
 800de2a:	f8c8 7000 	str.w	r7, [r8]
 800de2e:	e00f      	b.n	800de50 <_malloc_r+0xa8>
 800de30:	6822      	ldr	r2, [r4, #0]
 800de32:	1b52      	subs	r2, r2, r5
 800de34:	d420      	bmi.n	800de78 <_malloc_r+0xd0>
 800de36:	2a0b      	cmp	r2, #11
 800de38:	d917      	bls.n	800de6a <_malloc_r+0xc2>
 800de3a:	1961      	adds	r1, r4, r5
 800de3c:	42a3      	cmp	r3, r4
 800de3e:	6025      	str	r5, [r4, #0]
 800de40:	bf18      	it	ne
 800de42:	6059      	strne	r1, [r3, #4]
 800de44:	6863      	ldr	r3, [r4, #4]
 800de46:	bf08      	it	eq
 800de48:	f8c8 1000 	streq.w	r1, [r8]
 800de4c:	5162      	str	r2, [r4, r5]
 800de4e:	604b      	str	r3, [r1, #4]
 800de50:	4630      	mov	r0, r6
 800de52:	f000 f82f 	bl	800deb4 <__malloc_unlock>
 800de56:	f104 000b 	add.w	r0, r4, #11
 800de5a:	1d23      	adds	r3, r4, #4
 800de5c:	f020 0007 	bic.w	r0, r0, #7
 800de60:	1ac2      	subs	r2, r0, r3
 800de62:	bf1c      	itt	ne
 800de64:	1a1b      	subne	r3, r3, r0
 800de66:	50a3      	strne	r3, [r4, r2]
 800de68:	e7af      	b.n	800ddca <_malloc_r+0x22>
 800de6a:	6862      	ldr	r2, [r4, #4]
 800de6c:	42a3      	cmp	r3, r4
 800de6e:	bf0c      	ite	eq
 800de70:	f8c8 2000 	streq.w	r2, [r8]
 800de74:	605a      	strne	r2, [r3, #4]
 800de76:	e7eb      	b.n	800de50 <_malloc_r+0xa8>
 800de78:	4623      	mov	r3, r4
 800de7a:	6864      	ldr	r4, [r4, #4]
 800de7c:	e7ae      	b.n	800dddc <_malloc_r+0x34>
 800de7e:	463c      	mov	r4, r7
 800de80:	687f      	ldr	r7, [r7, #4]
 800de82:	e7b6      	b.n	800ddf2 <_malloc_r+0x4a>
 800de84:	461a      	mov	r2, r3
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	42a3      	cmp	r3, r4
 800de8a:	d1fb      	bne.n	800de84 <_malloc_r+0xdc>
 800de8c:	2300      	movs	r3, #0
 800de8e:	6053      	str	r3, [r2, #4]
 800de90:	e7de      	b.n	800de50 <_malloc_r+0xa8>
 800de92:	230c      	movs	r3, #12
 800de94:	6033      	str	r3, [r6, #0]
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f80c 	bl	800deb4 <__malloc_unlock>
 800de9c:	e794      	b.n	800ddc8 <_malloc_r+0x20>
 800de9e:	6005      	str	r5, [r0, #0]
 800dea0:	e7d6      	b.n	800de50 <_malloc_r+0xa8>
 800dea2:	bf00      	nop
 800dea4:	2000077c 	.word	0x2000077c

0800dea8 <__malloc_lock>:
 800dea8:	4801      	ldr	r0, [pc, #4]	@ (800deb0 <__malloc_lock+0x8>)
 800deaa:	f7ff b8ba 	b.w	800d022 <__retarget_lock_acquire_recursive>
 800deae:	bf00      	nop
 800deb0:	20000774 	.word	0x20000774

0800deb4 <__malloc_unlock>:
 800deb4:	4801      	ldr	r0, [pc, #4]	@ (800debc <__malloc_unlock+0x8>)
 800deb6:	f7ff b8b5 	b.w	800d024 <__retarget_lock_release_recursive>
 800deba:	bf00      	nop
 800debc:	20000774 	.word	0x20000774

0800dec0 <_Balloc>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	69c6      	ldr	r6, [r0, #28]
 800dec4:	4604      	mov	r4, r0
 800dec6:	460d      	mov	r5, r1
 800dec8:	b976      	cbnz	r6, 800dee8 <_Balloc+0x28>
 800deca:	2010      	movs	r0, #16
 800decc:	f7ff ff42 	bl	800dd54 <malloc>
 800ded0:	4602      	mov	r2, r0
 800ded2:	61e0      	str	r0, [r4, #28]
 800ded4:	b920      	cbnz	r0, 800dee0 <_Balloc+0x20>
 800ded6:	4b18      	ldr	r3, [pc, #96]	@ (800df38 <_Balloc+0x78>)
 800ded8:	4818      	ldr	r0, [pc, #96]	@ (800df3c <_Balloc+0x7c>)
 800deda:	216b      	movs	r1, #107	@ 0x6b
 800dedc:	f000 fe02 	bl	800eae4 <__assert_func>
 800dee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dee4:	6006      	str	r6, [r0, #0]
 800dee6:	60c6      	str	r6, [r0, #12]
 800dee8:	69e6      	ldr	r6, [r4, #28]
 800deea:	68f3      	ldr	r3, [r6, #12]
 800deec:	b183      	cbz	r3, 800df10 <_Balloc+0x50>
 800deee:	69e3      	ldr	r3, [r4, #28]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800def6:	b9b8      	cbnz	r0, 800df28 <_Balloc+0x68>
 800def8:	2101      	movs	r1, #1
 800defa:	fa01 f605 	lsl.w	r6, r1, r5
 800defe:	1d72      	adds	r2, r6, #5
 800df00:	0092      	lsls	r2, r2, #2
 800df02:	4620      	mov	r0, r4
 800df04:	f000 fe0c 	bl	800eb20 <_calloc_r>
 800df08:	b160      	cbz	r0, 800df24 <_Balloc+0x64>
 800df0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df0e:	e00e      	b.n	800df2e <_Balloc+0x6e>
 800df10:	2221      	movs	r2, #33	@ 0x21
 800df12:	2104      	movs	r1, #4
 800df14:	4620      	mov	r0, r4
 800df16:	f000 fe03 	bl	800eb20 <_calloc_r>
 800df1a:	69e3      	ldr	r3, [r4, #28]
 800df1c:	60f0      	str	r0, [r6, #12]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1e4      	bne.n	800deee <_Balloc+0x2e>
 800df24:	2000      	movs	r0, #0
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	6802      	ldr	r2, [r0, #0]
 800df2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df2e:	2300      	movs	r3, #0
 800df30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df34:	e7f7      	b.n	800df26 <_Balloc+0x66>
 800df36:	bf00      	nop
 800df38:	0800fd21 	.word	0x0800fd21
 800df3c:	0800fda1 	.word	0x0800fda1

0800df40 <_Bfree>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	69c6      	ldr	r6, [r0, #28]
 800df44:	4605      	mov	r5, r0
 800df46:	460c      	mov	r4, r1
 800df48:	b976      	cbnz	r6, 800df68 <_Bfree+0x28>
 800df4a:	2010      	movs	r0, #16
 800df4c:	f7ff ff02 	bl	800dd54 <malloc>
 800df50:	4602      	mov	r2, r0
 800df52:	61e8      	str	r0, [r5, #28]
 800df54:	b920      	cbnz	r0, 800df60 <_Bfree+0x20>
 800df56:	4b09      	ldr	r3, [pc, #36]	@ (800df7c <_Bfree+0x3c>)
 800df58:	4809      	ldr	r0, [pc, #36]	@ (800df80 <_Bfree+0x40>)
 800df5a:	218f      	movs	r1, #143	@ 0x8f
 800df5c:	f000 fdc2 	bl	800eae4 <__assert_func>
 800df60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df64:	6006      	str	r6, [r0, #0]
 800df66:	60c6      	str	r6, [r0, #12]
 800df68:	b13c      	cbz	r4, 800df7a <_Bfree+0x3a>
 800df6a:	69eb      	ldr	r3, [r5, #28]
 800df6c:	6862      	ldr	r2, [r4, #4]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df74:	6021      	str	r1, [r4, #0]
 800df76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	0800fd21 	.word	0x0800fd21
 800df80:	0800fda1 	.word	0x0800fda1

0800df84 <__multadd>:
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	690d      	ldr	r5, [r1, #16]
 800df8a:	4607      	mov	r7, r0
 800df8c:	460c      	mov	r4, r1
 800df8e:	461e      	mov	r6, r3
 800df90:	f101 0c14 	add.w	ip, r1, #20
 800df94:	2000      	movs	r0, #0
 800df96:	f8dc 3000 	ldr.w	r3, [ip]
 800df9a:	b299      	uxth	r1, r3
 800df9c:	fb02 6101 	mla	r1, r2, r1, r6
 800dfa0:	0c1e      	lsrs	r6, r3, #16
 800dfa2:	0c0b      	lsrs	r3, r1, #16
 800dfa4:	fb02 3306 	mla	r3, r2, r6, r3
 800dfa8:	b289      	uxth	r1, r1
 800dfaa:	3001      	adds	r0, #1
 800dfac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfb0:	4285      	cmp	r5, r0
 800dfb2:	f84c 1b04 	str.w	r1, [ip], #4
 800dfb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfba:	dcec      	bgt.n	800df96 <__multadd+0x12>
 800dfbc:	b30e      	cbz	r6, 800e002 <__multadd+0x7e>
 800dfbe:	68a3      	ldr	r3, [r4, #8]
 800dfc0:	42ab      	cmp	r3, r5
 800dfc2:	dc19      	bgt.n	800dff8 <__multadd+0x74>
 800dfc4:	6861      	ldr	r1, [r4, #4]
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	3101      	adds	r1, #1
 800dfca:	f7ff ff79 	bl	800dec0 <_Balloc>
 800dfce:	4680      	mov	r8, r0
 800dfd0:	b928      	cbnz	r0, 800dfde <__multadd+0x5a>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800e008 <__multadd+0x84>)
 800dfd6:	480d      	ldr	r0, [pc, #52]	@ (800e00c <__multadd+0x88>)
 800dfd8:	21ba      	movs	r1, #186	@ 0xba
 800dfda:	f000 fd83 	bl	800eae4 <__assert_func>
 800dfde:	6922      	ldr	r2, [r4, #16]
 800dfe0:	3202      	adds	r2, #2
 800dfe2:	f104 010c 	add.w	r1, r4, #12
 800dfe6:	0092      	lsls	r2, r2, #2
 800dfe8:	300c      	adds	r0, #12
 800dfea:	f000 fd6d 	bl	800eac8 <memcpy>
 800dfee:	4621      	mov	r1, r4
 800dff0:	4638      	mov	r0, r7
 800dff2:	f7ff ffa5 	bl	800df40 <_Bfree>
 800dff6:	4644      	mov	r4, r8
 800dff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dffc:	3501      	adds	r5, #1
 800dffe:	615e      	str	r6, [r3, #20]
 800e000:	6125      	str	r5, [r4, #16]
 800e002:	4620      	mov	r0, r4
 800e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e008:	0800fd90 	.word	0x0800fd90
 800e00c:	0800fda1 	.word	0x0800fda1

0800e010 <__hi0bits>:
 800e010:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e014:	4603      	mov	r3, r0
 800e016:	bf36      	itet	cc
 800e018:	0403      	lslcc	r3, r0, #16
 800e01a:	2000      	movcs	r0, #0
 800e01c:	2010      	movcc	r0, #16
 800e01e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e022:	bf3c      	itt	cc
 800e024:	021b      	lslcc	r3, r3, #8
 800e026:	3008      	addcc	r0, #8
 800e028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e02c:	bf3c      	itt	cc
 800e02e:	011b      	lslcc	r3, r3, #4
 800e030:	3004      	addcc	r0, #4
 800e032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e036:	bf3c      	itt	cc
 800e038:	009b      	lslcc	r3, r3, #2
 800e03a:	3002      	addcc	r0, #2
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	db05      	blt.n	800e04c <__hi0bits+0x3c>
 800e040:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e044:	f100 0001 	add.w	r0, r0, #1
 800e048:	bf08      	it	eq
 800e04a:	2020      	moveq	r0, #32
 800e04c:	4770      	bx	lr

0800e04e <__lo0bits>:
 800e04e:	6803      	ldr	r3, [r0, #0]
 800e050:	4602      	mov	r2, r0
 800e052:	f013 0007 	ands.w	r0, r3, #7
 800e056:	d00b      	beq.n	800e070 <__lo0bits+0x22>
 800e058:	07d9      	lsls	r1, r3, #31
 800e05a:	d421      	bmi.n	800e0a0 <__lo0bits+0x52>
 800e05c:	0798      	lsls	r0, r3, #30
 800e05e:	bf49      	itett	mi
 800e060:	085b      	lsrmi	r3, r3, #1
 800e062:	089b      	lsrpl	r3, r3, #2
 800e064:	2001      	movmi	r0, #1
 800e066:	6013      	strmi	r3, [r2, #0]
 800e068:	bf5c      	itt	pl
 800e06a:	6013      	strpl	r3, [r2, #0]
 800e06c:	2002      	movpl	r0, #2
 800e06e:	4770      	bx	lr
 800e070:	b299      	uxth	r1, r3
 800e072:	b909      	cbnz	r1, 800e078 <__lo0bits+0x2a>
 800e074:	0c1b      	lsrs	r3, r3, #16
 800e076:	2010      	movs	r0, #16
 800e078:	b2d9      	uxtb	r1, r3
 800e07a:	b909      	cbnz	r1, 800e080 <__lo0bits+0x32>
 800e07c:	3008      	adds	r0, #8
 800e07e:	0a1b      	lsrs	r3, r3, #8
 800e080:	0719      	lsls	r1, r3, #28
 800e082:	bf04      	itt	eq
 800e084:	091b      	lsreq	r3, r3, #4
 800e086:	3004      	addeq	r0, #4
 800e088:	0799      	lsls	r1, r3, #30
 800e08a:	bf04      	itt	eq
 800e08c:	089b      	lsreq	r3, r3, #2
 800e08e:	3002      	addeq	r0, #2
 800e090:	07d9      	lsls	r1, r3, #31
 800e092:	d403      	bmi.n	800e09c <__lo0bits+0x4e>
 800e094:	085b      	lsrs	r3, r3, #1
 800e096:	f100 0001 	add.w	r0, r0, #1
 800e09a:	d003      	beq.n	800e0a4 <__lo0bits+0x56>
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	4770      	bx	lr
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	4770      	bx	lr
 800e0a4:	2020      	movs	r0, #32
 800e0a6:	4770      	bx	lr

0800e0a8 <__i2b>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	f7ff ff07 	bl	800dec0 <_Balloc>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	b928      	cbnz	r0, 800e0c2 <__i2b+0x1a>
 800e0b6:	4b05      	ldr	r3, [pc, #20]	@ (800e0cc <__i2b+0x24>)
 800e0b8:	4805      	ldr	r0, [pc, #20]	@ (800e0d0 <__i2b+0x28>)
 800e0ba:	f240 1145 	movw	r1, #325	@ 0x145
 800e0be:	f000 fd11 	bl	800eae4 <__assert_func>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	6144      	str	r4, [r0, #20]
 800e0c6:	6103      	str	r3, [r0, #16]
 800e0c8:	bd10      	pop	{r4, pc}
 800e0ca:	bf00      	nop
 800e0cc:	0800fd90 	.word	0x0800fd90
 800e0d0:	0800fda1 	.word	0x0800fda1

0800e0d4 <__multiply>:
 800e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	4614      	mov	r4, r2
 800e0da:	690a      	ldr	r2, [r1, #16]
 800e0dc:	6923      	ldr	r3, [r4, #16]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	bfa8      	it	ge
 800e0e2:	4623      	movge	r3, r4
 800e0e4:	460f      	mov	r7, r1
 800e0e6:	bfa4      	itt	ge
 800e0e8:	460c      	movge	r4, r1
 800e0ea:	461f      	movge	r7, r3
 800e0ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e0f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e0f4:	68a3      	ldr	r3, [r4, #8]
 800e0f6:	6861      	ldr	r1, [r4, #4]
 800e0f8:	eb0a 0609 	add.w	r6, sl, r9
 800e0fc:	42b3      	cmp	r3, r6
 800e0fe:	b085      	sub	sp, #20
 800e100:	bfb8      	it	lt
 800e102:	3101      	addlt	r1, #1
 800e104:	f7ff fedc 	bl	800dec0 <_Balloc>
 800e108:	b930      	cbnz	r0, 800e118 <__multiply+0x44>
 800e10a:	4602      	mov	r2, r0
 800e10c:	4b44      	ldr	r3, [pc, #272]	@ (800e220 <__multiply+0x14c>)
 800e10e:	4845      	ldr	r0, [pc, #276]	@ (800e224 <__multiply+0x150>)
 800e110:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e114:	f000 fce6 	bl	800eae4 <__assert_func>
 800e118:	f100 0514 	add.w	r5, r0, #20
 800e11c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e120:	462b      	mov	r3, r5
 800e122:	2200      	movs	r2, #0
 800e124:	4543      	cmp	r3, r8
 800e126:	d321      	bcc.n	800e16c <__multiply+0x98>
 800e128:	f107 0114 	add.w	r1, r7, #20
 800e12c:	f104 0214 	add.w	r2, r4, #20
 800e130:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e134:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e138:	9302      	str	r3, [sp, #8]
 800e13a:	1b13      	subs	r3, r2, r4
 800e13c:	3b15      	subs	r3, #21
 800e13e:	f023 0303 	bic.w	r3, r3, #3
 800e142:	3304      	adds	r3, #4
 800e144:	f104 0715 	add.w	r7, r4, #21
 800e148:	42ba      	cmp	r2, r7
 800e14a:	bf38      	it	cc
 800e14c:	2304      	movcc	r3, #4
 800e14e:	9301      	str	r3, [sp, #4]
 800e150:	9b02      	ldr	r3, [sp, #8]
 800e152:	9103      	str	r1, [sp, #12]
 800e154:	428b      	cmp	r3, r1
 800e156:	d80c      	bhi.n	800e172 <__multiply+0x9e>
 800e158:	2e00      	cmp	r6, #0
 800e15a:	dd03      	ble.n	800e164 <__multiply+0x90>
 800e15c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e160:	2b00      	cmp	r3, #0
 800e162:	d05b      	beq.n	800e21c <__multiply+0x148>
 800e164:	6106      	str	r6, [r0, #16]
 800e166:	b005      	add	sp, #20
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16c:	f843 2b04 	str.w	r2, [r3], #4
 800e170:	e7d8      	b.n	800e124 <__multiply+0x50>
 800e172:	f8b1 a000 	ldrh.w	sl, [r1]
 800e176:	f1ba 0f00 	cmp.w	sl, #0
 800e17a:	d024      	beq.n	800e1c6 <__multiply+0xf2>
 800e17c:	f104 0e14 	add.w	lr, r4, #20
 800e180:	46a9      	mov	r9, r5
 800e182:	f04f 0c00 	mov.w	ip, #0
 800e186:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e18a:	f8d9 3000 	ldr.w	r3, [r9]
 800e18e:	fa1f fb87 	uxth.w	fp, r7
 800e192:	b29b      	uxth	r3, r3
 800e194:	fb0a 330b 	mla	r3, sl, fp, r3
 800e198:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e19c:	f8d9 7000 	ldr.w	r7, [r9]
 800e1a0:	4463      	add	r3, ip
 800e1a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e1a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e1aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e1b4:	4572      	cmp	r2, lr
 800e1b6:	f849 3b04 	str.w	r3, [r9], #4
 800e1ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e1be:	d8e2      	bhi.n	800e186 <__multiply+0xb2>
 800e1c0:	9b01      	ldr	r3, [sp, #4]
 800e1c2:	f845 c003 	str.w	ip, [r5, r3]
 800e1c6:	9b03      	ldr	r3, [sp, #12]
 800e1c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e1cc:	3104      	adds	r1, #4
 800e1ce:	f1b9 0f00 	cmp.w	r9, #0
 800e1d2:	d021      	beq.n	800e218 <__multiply+0x144>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	f104 0c14 	add.w	ip, r4, #20
 800e1da:	46ae      	mov	lr, r5
 800e1dc:	f04f 0a00 	mov.w	sl, #0
 800e1e0:	f8bc b000 	ldrh.w	fp, [ip]
 800e1e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e1e8:	fb09 770b 	mla	r7, r9, fp, r7
 800e1ec:	4457      	add	r7, sl
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e1f4:	f84e 3b04 	str.w	r3, [lr], #4
 800e1f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e1fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e200:	f8be 3000 	ldrh.w	r3, [lr]
 800e204:	fb09 330a 	mla	r3, r9, sl, r3
 800e208:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e20c:	4562      	cmp	r2, ip
 800e20e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e212:	d8e5      	bhi.n	800e1e0 <__multiply+0x10c>
 800e214:	9f01      	ldr	r7, [sp, #4]
 800e216:	51eb      	str	r3, [r5, r7]
 800e218:	3504      	adds	r5, #4
 800e21a:	e799      	b.n	800e150 <__multiply+0x7c>
 800e21c:	3e01      	subs	r6, #1
 800e21e:	e79b      	b.n	800e158 <__multiply+0x84>
 800e220:	0800fd90 	.word	0x0800fd90
 800e224:	0800fda1 	.word	0x0800fda1

0800e228 <__pow5mult>:
 800e228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e22c:	4615      	mov	r5, r2
 800e22e:	f012 0203 	ands.w	r2, r2, #3
 800e232:	4607      	mov	r7, r0
 800e234:	460e      	mov	r6, r1
 800e236:	d007      	beq.n	800e248 <__pow5mult+0x20>
 800e238:	4c25      	ldr	r4, [pc, #148]	@ (800e2d0 <__pow5mult+0xa8>)
 800e23a:	3a01      	subs	r2, #1
 800e23c:	2300      	movs	r3, #0
 800e23e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e242:	f7ff fe9f 	bl	800df84 <__multadd>
 800e246:	4606      	mov	r6, r0
 800e248:	10ad      	asrs	r5, r5, #2
 800e24a:	d03d      	beq.n	800e2c8 <__pow5mult+0xa0>
 800e24c:	69fc      	ldr	r4, [r7, #28]
 800e24e:	b97c      	cbnz	r4, 800e270 <__pow5mult+0x48>
 800e250:	2010      	movs	r0, #16
 800e252:	f7ff fd7f 	bl	800dd54 <malloc>
 800e256:	4602      	mov	r2, r0
 800e258:	61f8      	str	r0, [r7, #28]
 800e25a:	b928      	cbnz	r0, 800e268 <__pow5mult+0x40>
 800e25c:	4b1d      	ldr	r3, [pc, #116]	@ (800e2d4 <__pow5mult+0xac>)
 800e25e:	481e      	ldr	r0, [pc, #120]	@ (800e2d8 <__pow5mult+0xb0>)
 800e260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e264:	f000 fc3e 	bl	800eae4 <__assert_func>
 800e268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e26c:	6004      	str	r4, [r0, #0]
 800e26e:	60c4      	str	r4, [r0, #12]
 800e270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e278:	b94c      	cbnz	r4, 800e28e <__pow5mult+0x66>
 800e27a:	f240 2171 	movw	r1, #625	@ 0x271
 800e27e:	4638      	mov	r0, r7
 800e280:	f7ff ff12 	bl	800e0a8 <__i2b>
 800e284:	2300      	movs	r3, #0
 800e286:	f8c8 0008 	str.w	r0, [r8, #8]
 800e28a:	4604      	mov	r4, r0
 800e28c:	6003      	str	r3, [r0, #0]
 800e28e:	f04f 0900 	mov.w	r9, #0
 800e292:	07eb      	lsls	r3, r5, #31
 800e294:	d50a      	bpl.n	800e2ac <__pow5mult+0x84>
 800e296:	4631      	mov	r1, r6
 800e298:	4622      	mov	r2, r4
 800e29a:	4638      	mov	r0, r7
 800e29c:	f7ff ff1a 	bl	800e0d4 <__multiply>
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4680      	mov	r8, r0
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	f7ff fe4b 	bl	800df40 <_Bfree>
 800e2aa:	4646      	mov	r6, r8
 800e2ac:	106d      	asrs	r5, r5, #1
 800e2ae:	d00b      	beq.n	800e2c8 <__pow5mult+0xa0>
 800e2b0:	6820      	ldr	r0, [r4, #0]
 800e2b2:	b938      	cbnz	r0, 800e2c4 <__pow5mult+0x9c>
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	4621      	mov	r1, r4
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	f7ff ff0b 	bl	800e0d4 <__multiply>
 800e2be:	6020      	str	r0, [r4, #0]
 800e2c0:	f8c0 9000 	str.w	r9, [r0]
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	e7e4      	b.n	800e292 <__pow5mult+0x6a>
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ce:	bf00      	nop
 800e2d0:	0800fdfc 	.word	0x0800fdfc
 800e2d4:	0800fd21 	.word	0x0800fd21
 800e2d8:	0800fda1 	.word	0x0800fda1

0800e2dc <__lshift>:
 800e2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	6849      	ldr	r1, [r1, #4]
 800e2e4:	6923      	ldr	r3, [r4, #16]
 800e2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2ea:	68a3      	ldr	r3, [r4, #8]
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	4691      	mov	r9, r2
 800e2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2f4:	f108 0601 	add.w	r6, r8, #1
 800e2f8:	42b3      	cmp	r3, r6
 800e2fa:	db0b      	blt.n	800e314 <__lshift+0x38>
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	f7ff fddf 	bl	800dec0 <_Balloc>
 800e302:	4605      	mov	r5, r0
 800e304:	b948      	cbnz	r0, 800e31a <__lshift+0x3e>
 800e306:	4602      	mov	r2, r0
 800e308:	4b28      	ldr	r3, [pc, #160]	@ (800e3ac <__lshift+0xd0>)
 800e30a:	4829      	ldr	r0, [pc, #164]	@ (800e3b0 <__lshift+0xd4>)
 800e30c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e310:	f000 fbe8 	bl	800eae4 <__assert_func>
 800e314:	3101      	adds	r1, #1
 800e316:	005b      	lsls	r3, r3, #1
 800e318:	e7ee      	b.n	800e2f8 <__lshift+0x1c>
 800e31a:	2300      	movs	r3, #0
 800e31c:	f100 0114 	add.w	r1, r0, #20
 800e320:	f100 0210 	add.w	r2, r0, #16
 800e324:	4618      	mov	r0, r3
 800e326:	4553      	cmp	r3, sl
 800e328:	db33      	blt.n	800e392 <__lshift+0xb6>
 800e32a:	6920      	ldr	r0, [r4, #16]
 800e32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e330:	f104 0314 	add.w	r3, r4, #20
 800e334:	f019 091f 	ands.w	r9, r9, #31
 800e338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e33c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e340:	d02b      	beq.n	800e39a <__lshift+0xbe>
 800e342:	f1c9 0e20 	rsb	lr, r9, #32
 800e346:	468a      	mov	sl, r1
 800e348:	2200      	movs	r2, #0
 800e34a:	6818      	ldr	r0, [r3, #0]
 800e34c:	fa00 f009 	lsl.w	r0, r0, r9
 800e350:	4310      	orrs	r0, r2
 800e352:	f84a 0b04 	str.w	r0, [sl], #4
 800e356:	f853 2b04 	ldr.w	r2, [r3], #4
 800e35a:	459c      	cmp	ip, r3
 800e35c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e360:	d8f3      	bhi.n	800e34a <__lshift+0x6e>
 800e362:	ebac 0304 	sub.w	r3, ip, r4
 800e366:	3b15      	subs	r3, #21
 800e368:	f023 0303 	bic.w	r3, r3, #3
 800e36c:	3304      	adds	r3, #4
 800e36e:	f104 0015 	add.w	r0, r4, #21
 800e372:	4584      	cmp	ip, r0
 800e374:	bf38      	it	cc
 800e376:	2304      	movcc	r3, #4
 800e378:	50ca      	str	r2, [r1, r3]
 800e37a:	b10a      	cbz	r2, 800e380 <__lshift+0xa4>
 800e37c:	f108 0602 	add.w	r6, r8, #2
 800e380:	3e01      	subs	r6, #1
 800e382:	4638      	mov	r0, r7
 800e384:	612e      	str	r6, [r5, #16]
 800e386:	4621      	mov	r1, r4
 800e388:	f7ff fdda 	bl	800df40 <_Bfree>
 800e38c:	4628      	mov	r0, r5
 800e38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e392:	f842 0f04 	str.w	r0, [r2, #4]!
 800e396:	3301      	adds	r3, #1
 800e398:	e7c5      	b.n	800e326 <__lshift+0x4a>
 800e39a:	3904      	subs	r1, #4
 800e39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3a4:	459c      	cmp	ip, r3
 800e3a6:	d8f9      	bhi.n	800e39c <__lshift+0xc0>
 800e3a8:	e7ea      	b.n	800e380 <__lshift+0xa4>
 800e3aa:	bf00      	nop
 800e3ac:	0800fd90 	.word	0x0800fd90
 800e3b0:	0800fda1 	.word	0x0800fda1

0800e3b4 <__mcmp>:
 800e3b4:	690a      	ldr	r2, [r1, #16]
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	6900      	ldr	r0, [r0, #16]
 800e3ba:	1a80      	subs	r0, r0, r2
 800e3bc:	b530      	push	{r4, r5, lr}
 800e3be:	d10e      	bne.n	800e3de <__mcmp+0x2a>
 800e3c0:	3314      	adds	r3, #20
 800e3c2:	3114      	adds	r1, #20
 800e3c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e3c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e3cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e3d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e3d4:	4295      	cmp	r5, r2
 800e3d6:	d003      	beq.n	800e3e0 <__mcmp+0x2c>
 800e3d8:	d205      	bcs.n	800e3e6 <__mcmp+0x32>
 800e3da:	f04f 30ff 	mov.w	r0, #4294967295
 800e3de:	bd30      	pop	{r4, r5, pc}
 800e3e0:	42a3      	cmp	r3, r4
 800e3e2:	d3f3      	bcc.n	800e3cc <__mcmp+0x18>
 800e3e4:	e7fb      	b.n	800e3de <__mcmp+0x2a>
 800e3e6:	2001      	movs	r0, #1
 800e3e8:	e7f9      	b.n	800e3de <__mcmp+0x2a>
	...

0800e3ec <__mdiff>:
 800e3ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f0:	4689      	mov	r9, r1
 800e3f2:	4606      	mov	r6, r0
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	4648      	mov	r0, r9
 800e3f8:	4614      	mov	r4, r2
 800e3fa:	f7ff ffdb 	bl	800e3b4 <__mcmp>
 800e3fe:	1e05      	subs	r5, r0, #0
 800e400:	d112      	bne.n	800e428 <__mdiff+0x3c>
 800e402:	4629      	mov	r1, r5
 800e404:	4630      	mov	r0, r6
 800e406:	f7ff fd5b 	bl	800dec0 <_Balloc>
 800e40a:	4602      	mov	r2, r0
 800e40c:	b928      	cbnz	r0, 800e41a <__mdiff+0x2e>
 800e40e:	4b3f      	ldr	r3, [pc, #252]	@ (800e50c <__mdiff+0x120>)
 800e410:	f240 2137 	movw	r1, #567	@ 0x237
 800e414:	483e      	ldr	r0, [pc, #248]	@ (800e510 <__mdiff+0x124>)
 800e416:	f000 fb65 	bl	800eae4 <__assert_func>
 800e41a:	2301      	movs	r3, #1
 800e41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e420:	4610      	mov	r0, r2
 800e422:	b003      	add	sp, #12
 800e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e428:	bfbc      	itt	lt
 800e42a:	464b      	movlt	r3, r9
 800e42c:	46a1      	movlt	r9, r4
 800e42e:	4630      	mov	r0, r6
 800e430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e434:	bfba      	itte	lt
 800e436:	461c      	movlt	r4, r3
 800e438:	2501      	movlt	r5, #1
 800e43a:	2500      	movge	r5, #0
 800e43c:	f7ff fd40 	bl	800dec0 <_Balloc>
 800e440:	4602      	mov	r2, r0
 800e442:	b918      	cbnz	r0, 800e44c <__mdiff+0x60>
 800e444:	4b31      	ldr	r3, [pc, #196]	@ (800e50c <__mdiff+0x120>)
 800e446:	f240 2145 	movw	r1, #581	@ 0x245
 800e44a:	e7e3      	b.n	800e414 <__mdiff+0x28>
 800e44c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e450:	6926      	ldr	r6, [r4, #16]
 800e452:	60c5      	str	r5, [r0, #12]
 800e454:	f109 0310 	add.w	r3, r9, #16
 800e458:	f109 0514 	add.w	r5, r9, #20
 800e45c:	f104 0e14 	add.w	lr, r4, #20
 800e460:	f100 0b14 	add.w	fp, r0, #20
 800e464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e46c:	9301      	str	r3, [sp, #4]
 800e46e:	46d9      	mov	r9, fp
 800e470:	f04f 0c00 	mov.w	ip, #0
 800e474:	9b01      	ldr	r3, [sp, #4]
 800e476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e47a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e47e:	9301      	str	r3, [sp, #4]
 800e480:	fa1f f38a 	uxth.w	r3, sl
 800e484:	4619      	mov	r1, r3
 800e486:	b283      	uxth	r3, r0
 800e488:	1acb      	subs	r3, r1, r3
 800e48a:	0c00      	lsrs	r0, r0, #16
 800e48c:	4463      	add	r3, ip
 800e48e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e496:	b29b      	uxth	r3, r3
 800e498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e49c:	4576      	cmp	r6, lr
 800e49e:	f849 3b04 	str.w	r3, [r9], #4
 800e4a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e4a6:	d8e5      	bhi.n	800e474 <__mdiff+0x88>
 800e4a8:	1b33      	subs	r3, r6, r4
 800e4aa:	3b15      	subs	r3, #21
 800e4ac:	f023 0303 	bic.w	r3, r3, #3
 800e4b0:	3415      	adds	r4, #21
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	42a6      	cmp	r6, r4
 800e4b6:	bf38      	it	cc
 800e4b8:	2304      	movcc	r3, #4
 800e4ba:	441d      	add	r5, r3
 800e4bc:	445b      	add	r3, fp
 800e4be:	461e      	mov	r6, r3
 800e4c0:	462c      	mov	r4, r5
 800e4c2:	4544      	cmp	r4, r8
 800e4c4:	d30e      	bcc.n	800e4e4 <__mdiff+0xf8>
 800e4c6:	f108 0103 	add.w	r1, r8, #3
 800e4ca:	1b49      	subs	r1, r1, r5
 800e4cc:	f021 0103 	bic.w	r1, r1, #3
 800e4d0:	3d03      	subs	r5, #3
 800e4d2:	45a8      	cmp	r8, r5
 800e4d4:	bf38      	it	cc
 800e4d6:	2100      	movcc	r1, #0
 800e4d8:	440b      	add	r3, r1
 800e4da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4de:	b191      	cbz	r1, 800e506 <__mdiff+0x11a>
 800e4e0:	6117      	str	r7, [r2, #16]
 800e4e2:	e79d      	b.n	800e420 <__mdiff+0x34>
 800e4e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e4e8:	46e6      	mov	lr, ip
 800e4ea:	0c08      	lsrs	r0, r1, #16
 800e4ec:	fa1c fc81 	uxtah	ip, ip, r1
 800e4f0:	4471      	add	r1, lr
 800e4f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e4f6:	b289      	uxth	r1, r1
 800e4f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e4fc:	f846 1b04 	str.w	r1, [r6], #4
 800e500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e504:	e7dd      	b.n	800e4c2 <__mdiff+0xd6>
 800e506:	3f01      	subs	r7, #1
 800e508:	e7e7      	b.n	800e4da <__mdiff+0xee>
 800e50a:	bf00      	nop
 800e50c:	0800fd90 	.word	0x0800fd90
 800e510:	0800fda1 	.word	0x0800fda1

0800e514 <__d2b>:
 800e514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e518:	460f      	mov	r7, r1
 800e51a:	2101      	movs	r1, #1
 800e51c:	ec59 8b10 	vmov	r8, r9, d0
 800e520:	4616      	mov	r6, r2
 800e522:	f7ff fccd 	bl	800dec0 <_Balloc>
 800e526:	4604      	mov	r4, r0
 800e528:	b930      	cbnz	r0, 800e538 <__d2b+0x24>
 800e52a:	4602      	mov	r2, r0
 800e52c:	4b23      	ldr	r3, [pc, #140]	@ (800e5bc <__d2b+0xa8>)
 800e52e:	4824      	ldr	r0, [pc, #144]	@ (800e5c0 <__d2b+0xac>)
 800e530:	f240 310f 	movw	r1, #783	@ 0x30f
 800e534:	f000 fad6 	bl	800eae4 <__assert_func>
 800e538:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e53c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e540:	b10d      	cbz	r5, 800e546 <__d2b+0x32>
 800e542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e546:	9301      	str	r3, [sp, #4]
 800e548:	f1b8 0300 	subs.w	r3, r8, #0
 800e54c:	d023      	beq.n	800e596 <__d2b+0x82>
 800e54e:	4668      	mov	r0, sp
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	f7ff fd7c 	bl	800e04e <__lo0bits>
 800e556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e55a:	b1d0      	cbz	r0, 800e592 <__d2b+0x7e>
 800e55c:	f1c0 0320 	rsb	r3, r0, #32
 800e560:	fa02 f303 	lsl.w	r3, r2, r3
 800e564:	430b      	orrs	r3, r1
 800e566:	40c2      	lsrs	r2, r0
 800e568:	6163      	str	r3, [r4, #20]
 800e56a:	9201      	str	r2, [sp, #4]
 800e56c:	9b01      	ldr	r3, [sp, #4]
 800e56e:	61a3      	str	r3, [r4, #24]
 800e570:	2b00      	cmp	r3, #0
 800e572:	bf0c      	ite	eq
 800e574:	2201      	moveq	r2, #1
 800e576:	2202      	movne	r2, #2
 800e578:	6122      	str	r2, [r4, #16]
 800e57a:	b1a5      	cbz	r5, 800e5a6 <__d2b+0x92>
 800e57c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e580:	4405      	add	r5, r0
 800e582:	603d      	str	r5, [r7, #0]
 800e584:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e588:	6030      	str	r0, [r6, #0]
 800e58a:	4620      	mov	r0, r4
 800e58c:	b003      	add	sp, #12
 800e58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e592:	6161      	str	r1, [r4, #20]
 800e594:	e7ea      	b.n	800e56c <__d2b+0x58>
 800e596:	a801      	add	r0, sp, #4
 800e598:	f7ff fd59 	bl	800e04e <__lo0bits>
 800e59c:	9b01      	ldr	r3, [sp, #4]
 800e59e:	6163      	str	r3, [r4, #20]
 800e5a0:	3020      	adds	r0, #32
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	e7e8      	b.n	800e578 <__d2b+0x64>
 800e5a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e5ae:	6038      	str	r0, [r7, #0]
 800e5b0:	6918      	ldr	r0, [r3, #16]
 800e5b2:	f7ff fd2d 	bl	800e010 <__hi0bits>
 800e5b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e5ba:	e7e5      	b.n	800e588 <__d2b+0x74>
 800e5bc:	0800fd90 	.word	0x0800fd90
 800e5c0:	0800fda1 	.word	0x0800fda1

0800e5c4 <__sfputc_r>:
 800e5c4:	6893      	ldr	r3, [r2, #8]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	b410      	push	{r4}
 800e5cc:	6093      	str	r3, [r2, #8]
 800e5ce:	da08      	bge.n	800e5e2 <__sfputc_r+0x1e>
 800e5d0:	6994      	ldr	r4, [r2, #24]
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	db01      	blt.n	800e5da <__sfputc_r+0x16>
 800e5d6:	290a      	cmp	r1, #10
 800e5d8:	d103      	bne.n	800e5e2 <__sfputc_r+0x1e>
 800e5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5de:	f7fe bc0e 	b.w	800cdfe <__swbuf_r>
 800e5e2:	6813      	ldr	r3, [r2, #0]
 800e5e4:	1c58      	adds	r0, r3, #1
 800e5e6:	6010      	str	r0, [r2, #0]
 800e5e8:	7019      	strb	r1, [r3, #0]
 800e5ea:	4608      	mov	r0, r1
 800e5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <__sfputs_r>:
 800e5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f4:	4606      	mov	r6, r0
 800e5f6:	460f      	mov	r7, r1
 800e5f8:	4614      	mov	r4, r2
 800e5fa:	18d5      	adds	r5, r2, r3
 800e5fc:	42ac      	cmp	r4, r5
 800e5fe:	d101      	bne.n	800e604 <__sfputs_r+0x12>
 800e600:	2000      	movs	r0, #0
 800e602:	e007      	b.n	800e614 <__sfputs_r+0x22>
 800e604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e608:	463a      	mov	r2, r7
 800e60a:	4630      	mov	r0, r6
 800e60c:	f7ff ffda 	bl	800e5c4 <__sfputc_r>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d1f3      	bne.n	800e5fc <__sfputs_r+0xa>
 800e614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e618 <_vfiprintf_r>:
 800e618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61c:	460d      	mov	r5, r1
 800e61e:	b09d      	sub	sp, #116	@ 0x74
 800e620:	4614      	mov	r4, r2
 800e622:	4698      	mov	r8, r3
 800e624:	4606      	mov	r6, r0
 800e626:	b118      	cbz	r0, 800e630 <_vfiprintf_r+0x18>
 800e628:	6a03      	ldr	r3, [r0, #32]
 800e62a:	b90b      	cbnz	r3, 800e630 <_vfiprintf_r+0x18>
 800e62c:	f7fe fafe 	bl	800cc2c <__sinit>
 800e630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e632:	07d9      	lsls	r1, r3, #31
 800e634:	d405      	bmi.n	800e642 <_vfiprintf_r+0x2a>
 800e636:	89ab      	ldrh	r3, [r5, #12]
 800e638:	059a      	lsls	r2, r3, #22
 800e63a:	d402      	bmi.n	800e642 <_vfiprintf_r+0x2a>
 800e63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e63e:	f7fe fcf0 	bl	800d022 <__retarget_lock_acquire_recursive>
 800e642:	89ab      	ldrh	r3, [r5, #12]
 800e644:	071b      	lsls	r3, r3, #28
 800e646:	d501      	bpl.n	800e64c <_vfiprintf_r+0x34>
 800e648:	692b      	ldr	r3, [r5, #16]
 800e64a:	b99b      	cbnz	r3, 800e674 <_vfiprintf_r+0x5c>
 800e64c:	4629      	mov	r1, r5
 800e64e:	4630      	mov	r0, r6
 800e650:	f7fe fc14 	bl	800ce7c <__swsetup_r>
 800e654:	b170      	cbz	r0, 800e674 <_vfiprintf_r+0x5c>
 800e656:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e658:	07dc      	lsls	r4, r3, #31
 800e65a:	d504      	bpl.n	800e666 <_vfiprintf_r+0x4e>
 800e65c:	f04f 30ff 	mov.w	r0, #4294967295
 800e660:	b01d      	add	sp, #116	@ 0x74
 800e662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e666:	89ab      	ldrh	r3, [r5, #12]
 800e668:	0598      	lsls	r0, r3, #22
 800e66a:	d4f7      	bmi.n	800e65c <_vfiprintf_r+0x44>
 800e66c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e66e:	f7fe fcd9 	bl	800d024 <__retarget_lock_release_recursive>
 800e672:	e7f3      	b.n	800e65c <_vfiprintf_r+0x44>
 800e674:	2300      	movs	r3, #0
 800e676:	9309      	str	r3, [sp, #36]	@ 0x24
 800e678:	2320      	movs	r3, #32
 800e67a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e67e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e682:	2330      	movs	r3, #48	@ 0x30
 800e684:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e834 <_vfiprintf_r+0x21c>
 800e688:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e68c:	f04f 0901 	mov.w	r9, #1
 800e690:	4623      	mov	r3, r4
 800e692:	469a      	mov	sl, r3
 800e694:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e698:	b10a      	cbz	r2, 800e69e <_vfiprintf_r+0x86>
 800e69a:	2a25      	cmp	r2, #37	@ 0x25
 800e69c:	d1f9      	bne.n	800e692 <_vfiprintf_r+0x7a>
 800e69e:	ebba 0b04 	subs.w	fp, sl, r4
 800e6a2:	d00b      	beq.n	800e6bc <_vfiprintf_r+0xa4>
 800e6a4:	465b      	mov	r3, fp
 800e6a6:	4622      	mov	r2, r4
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	f7ff ffa1 	bl	800e5f2 <__sfputs_r>
 800e6b0:	3001      	adds	r0, #1
 800e6b2:	f000 80a7 	beq.w	800e804 <_vfiprintf_r+0x1ec>
 800e6b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6b8:	445a      	add	r2, fp
 800e6ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 809f 	beq.w	800e804 <_vfiprintf_r+0x1ec>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e6cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6d0:	f10a 0a01 	add.w	sl, sl, #1
 800e6d4:	9304      	str	r3, [sp, #16]
 800e6d6:	9307      	str	r3, [sp, #28]
 800e6d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6de:	4654      	mov	r4, sl
 800e6e0:	2205      	movs	r2, #5
 800e6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6e6:	4853      	ldr	r0, [pc, #332]	@ (800e834 <_vfiprintf_r+0x21c>)
 800e6e8:	f7f1 fd72 	bl	80001d0 <memchr>
 800e6ec:	9a04      	ldr	r2, [sp, #16]
 800e6ee:	b9d8      	cbnz	r0, 800e728 <_vfiprintf_r+0x110>
 800e6f0:	06d1      	lsls	r1, r2, #27
 800e6f2:	bf44      	itt	mi
 800e6f4:	2320      	movmi	r3, #32
 800e6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6fa:	0713      	lsls	r3, r2, #28
 800e6fc:	bf44      	itt	mi
 800e6fe:	232b      	movmi	r3, #43	@ 0x2b
 800e700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e704:	f89a 3000 	ldrb.w	r3, [sl]
 800e708:	2b2a      	cmp	r3, #42	@ 0x2a
 800e70a:	d015      	beq.n	800e738 <_vfiprintf_r+0x120>
 800e70c:	9a07      	ldr	r2, [sp, #28]
 800e70e:	4654      	mov	r4, sl
 800e710:	2000      	movs	r0, #0
 800e712:	f04f 0c0a 	mov.w	ip, #10
 800e716:	4621      	mov	r1, r4
 800e718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e71c:	3b30      	subs	r3, #48	@ 0x30
 800e71e:	2b09      	cmp	r3, #9
 800e720:	d94b      	bls.n	800e7ba <_vfiprintf_r+0x1a2>
 800e722:	b1b0      	cbz	r0, 800e752 <_vfiprintf_r+0x13a>
 800e724:	9207      	str	r2, [sp, #28]
 800e726:	e014      	b.n	800e752 <_vfiprintf_r+0x13a>
 800e728:	eba0 0308 	sub.w	r3, r0, r8
 800e72c:	fa09 f303 	lsl.w	r3, r9, r3
 800e730:	4313      	orrs	r3, r2
 800e732:	9304      	str	r3, [sp, #16]
 800e734:	46a2      	mov	sl, r4
 800e736:	e7d2      	b.n	800e6de <_vfiprintf_r+0xc6>
 800e738:	9b03      	ldr	r3, [sp, #12]
 800e73a:	1d19      	adds	r1, r3, #4
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	9103      	str	r1, [sp, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	bfbb      	ittet	lt
 800e744:	425b      	neglt	r3, r3
 800e746:	f042 0202 	orrlt.w	r2, r2, #2
 800e74a:	9307      	strge	r3, [sp, #28]
 800e74c:	9307      	strlt	r3, [sp, #28]
 800e74e:	bfb8      	it	lt
 800e750:	9204      	strlt	r2, [sp, #16]
 800e752:	7823      	ldrb	r3, [r4, #0]
 800e754:	2b2e      	cmp	r3, #46	@ 0x2e
 800e756:	d10a      	bne.n	800e76e <_vfiprintf_r+0x156>
 800e758:	7863      	ldrb	r3, [r4, #1]
 800e75a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e75c:	d132      	bne.n	800e7c4 <_vfiprintf_r+0x1ac>
 800e75e:	9b03      	ldr	r3, [sp, #12]
 800e760:	1d1a      	adds	r2, r3, #4
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	9203      	str	r2, [sp, #12]
 800e766:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e76a:	3402      	adds	r4, #2
 800e76c:	9305      	str	r3, [sp, #20]
 800e76e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e844 <_vfiprintf_r+0x22c>
 800e772:	7821      	ldrb	r1, [r4, #0]
 800e774:	2203      	movs	r2, #3
 800e776:	4650      	mov	r0, sl
 800e778:	f7f1 fd2a 	bl	80001d0 <memchr>
 800e77c:	b138      	cbz	r0, 800e78e <_vfiprintf_r+0x176>
 800e77e:	9b04      	ldr	r3, [sp, #16]
 800e780:	eba0 000a 	sub.w	r0, r0, sl
 800e784:	2240      	movs	r2, #64	@ 0x40
 800e786:	4082      	lsls	r2, r0
 800e788:	4313      	orrs	r3, r2
 800e78a:	3401      	adds	r4, #1
 800e78c:	9304      	str	r3, [sp, #16]
 800e78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e792:	4829      	ldr	r0, [pc, #164]	@ (800e838 <_vfiprintf_r+0x220>)
 800e794:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e798:	2206      	movs	r2, #6
 800e79a:	f7f1 fd19 	bl	80001d0 <memchr>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d03f      	beq.n	800e822 <_vfiprintf_r+0x20a>
 800e7a2:	4b26      	ldr	r3, [pc, #152]	@ (800e83c <_vfiprintf_r+0x224>)
 800e7a4:	bb1b      	cbnz	r3, 800e7ee <_vfiprintf_r+0x1d6>
 800e7a6:	9b03      	ldr	r3, [sp, #12]
 800e7a8:	3307      	adds	r3, #7
 800e7aa:	f023 0307 	bic.w	r3, r3, #7
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	9303      	str	r3, [sp, #12]
 800e7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7b4:	443b      	add	r3, r7
 800e7b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7b8:	e76a      	b.n	800e690 <_vfiprintf_r+0x78>
 800e7ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7be:	460c      	mov	r4, r1
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	e7a8      	b.n	800e716 <_vfiprintf_r+0xfe>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	3401      	adds	r4, #1
 800e7c8:	9305      	str	r3, [sp, #20]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	f04f 0c0a 	mov.w	ip, #10
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7d6:	3a30      	subs	r2, #48	@ 0x30
 800e7d8:	2a09      	cmp	r2, #9
 800e7da:	d903      	bls.n	800e7e4 <_vfiprintf_r+0x1cc>
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d0c6      	beq.n	800e76e <_vfiprintf_r+0x156>
 800e7e0:	9105      	str	r1, [sp, #20]
 800e7e2:	e7c4      	b.n	800e76e <_vfiprintf_r+0x156>
 800e7e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e7f0      	b.n	800e7d0 <_vfiprintf_r+0x1b8>
 800e7ee:	ab03      	add	r3, sp, #12
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	462a      	mov	r2, r5
 800e7f4:	4b12      	ldr	r3, [pc, #72]	@ (800e840 <_vfiprintf_r+0x228>)
 800e7f6:	a904      	add	r1, sp, #16
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7fd fdd3 	bl	800c3a4 <_printf_float>
 800e7fe:	4607      	mov	r7, r0
 800e800:	1c78      	adds	r0, r7, #1
 800e802:	d1d6      	bne.n	800e7b2 <_vfiprintf_r+0x19a>
 800e804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e806:	07d9      	lsls	r1, r3, #31
 800e808:	d405      	bmi.n	800e816 <_vfiprintf_r+0x1fe>
 800e80a:	89ab      	ldrh	r3, [r5, #12]
 800e80c:	059a      	lsls	r2, r3, #22
 800e80e:	d402      	bmi.n	800e816 <_vfiprintf_r+0x1fe>
 800e810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e812:	f7fe fc07 	bl	800d024 <__retarget_lock_release_recursive>
 800e816:	89ab      	ldrh	r3, [r5, #12]
 800e818:	065b      	lsls	r3, r3, #25
 800e81a:	f53f af1f 	bmi.w	800e65c <_vfiprintf_r+0x44>
 800e81e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e820:	e71e      	b.n	800e660 <_vfiprintf_r+0x48>
 800e822:	ab03      	add	r3, sp, #12
 800e824:	9300      	str	r3, [sp, #0]
 800e826:	462a      	mov	r2, r5
 800e828:	4b05      	ldr	r3, [pc, #20]	@ (800e840 <_vfiprintf_r+0x228>)
 800e82a:	a904      	add	r1, sp, #16
 800e82c:	4630      	mov	r0, r6
 800e82e:	f7fe f851 	bl	800c8d4 <_printf_i>
 800e832:	e7e4      	b.n	800e7fe <_vfiprintf_r+0x1e6>
 800e834:	0800fef8 	.word	0x0800fef8
 800e838:	0800ff02 	.word	0x0800ff02
 800e83c:	0800c3a5 	.word	0x0800c3a5
 800e840:	0800e5f3 	.word	0x0800e5f3
 800e844:	0800fefe 	.word	0x0800fefe

0800e848 <__sflush_r>:
 800e848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e850:	0716      	lsls	r6, r2, #28
 800e852:	4605      	mov	r5, r0
 800e854:	460c      	mov	r4, r1
 800e856:	d454      	bmi.n	800e902 <__sflush_r+0xba>
 800e858:	684b      	ldr	r3, [r1, #4]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	dc02      	bgt.n	800e864 <__sflush_r+0x1c>
 800e85e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e860:	2b00      	cmp	r3, #0
 800e862:	dd48      	ble.n	800e8f6 <__sflush_r+0xae>
 800e864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e866:	2e00      	cmp	r6, #0
 800e868:	d045      	beq.n	800e8f6 <__sflush_r+0xae>
 800e86a:	2300      	movs	r3, #0
 800e86c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e870:	682f      	ldr	r7, [r5, #0]
 800e872:	6a21      	ldr	r1, [r4, #32]
 800e874:	602b      	str	r3, [r5, #0]
 800e876:	d030      	beq.n	800e8da <__sflush_r+0x92>
 800e878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e87a:	89a3      	ldrh	r3, [r4, #12]
 800e87c:	0759      	lsls	r1, r3, #29
 800e87e:	d505      	bpl.n	800e88c <__sflush_r+0x44>
 800e880:	6863      	ldr	r3, [r4, #4]
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e886:	b10b      	cbz	r3, 800e88c <__sflush_r+0x44>
 800e888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e88a:	1ad2      	subs	r2, r2, r3
 800e88c:	2300      	movs	r3, #0
 800e88e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e890:	6a21      	ldr	r1, [r4, #32]
 800e892:	4628      	mov	r0, r5
 800e894:	47b0      	blx	r6
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	d106      	bne.n	800e8aa <__sflush_r+0x62>
 800e89c:	6829      	ldr	r1, [r5, #0]
 800e89e:	291d      	cmp	r1, #29
 800e8a0:	d82b      	bhi.n	800e8fa <__sflush_r+0xb2>
 800e8a2:	4a2a      	ldr	r2, [pc, #168]	@ (800e94c <__sflush_r+0x104>)
 800e8a4:	410a      	asrs	r2, r1
 800e8a6:	07d6      	lsls	r6, r2, #31
 800e8a8:	d427      	bmi.n	800e8fa <__sflush_r+0xb2>
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	6062      	str	r2, [r4, #4]
 800e8ae:	04d9      	lsls	r1, r3, #19
 800e8b0:	6922      	ldr	r2, [r4, #16]
 800e8b2:	6022      	str	r2, [r4, #0]
 800e8b4:	d504      	bpl.n	800e8c0 <__sflush_r+0x78>
 800e8b6:	1c42      	adds	r2, r0, #1
 800e8b8:	d101      	bne.n	800e8be <__sflush_r+0x76>
 800e8ba:	682b      	ldr	r3, [r5, #0]
 800e8bc:	b903      	cbnz	r3, 800e8c0 <__sflush_r+0x78>
 800e8be:	6560      	str	r0, [r4, #84]	@ 0x54
 800e8c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8c2:	602f      	str	r7, [r5, #0]
 800e8c4:	b1b9      	cbz	r1, 800e8f6 <__sflush_r+0xae>
 800e8c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8ca:	4299      	cmp	r1, r3
 800e8cc:	d002      	beq.n	800e8d4 <__sflush_r+0x8c>
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f7ff f9f6 	bl	800dcc0 <_free_r>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8d8:	e00d      	b.n	800e8f6 <__sflush_r+0xae>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	4628      	mov	r0, r5
 800e8de:	47b0      	blx	r6
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	1c50      	adds	r0, r2, #1
 800e8e4:	d1c9      	bne.n	800e87a <__sflush_r+0x32>
 800e8e6:	682b      	ldr	r3, [r5, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d0c6      	beq.n	800e87a <__sflush_r+0x32>
 800e8ec:	2b1d      	cmp	r3, #29
 800e8ee:	d001      	beq.n	800e8f4 <__sflush_r+0xac>
 800e8f0:	2b16      	cmp	r3, #22
 800e8f2:	d11e      	bne.n	800e932 <__sflush_r+0xea>
 800e8f4:	602f      	str	r7, [r5, #0]
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	e022      	b.n	800e940 <__sflush_r+0xf8>
 800e8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8fe:	b21b      	sxth	r3, r3
 800e900:	e01b      	b.n	800e93a <__sflush_r+0xf2>
 800e902:	690f      	ldr	r7, [r1, #16]
 800e904:	2f00      	cmp	r7, #0
 800e906:	d0f6      	beq.n	800e8f6 <__sflush_r+0xae>
 800e908:	0793      	lsls	r3, r2, #30
 800e90a:	680e      	ldr	r6, [r1, #0]
 800e90c:	bf08      	it	eq
 800e90e:	694b      	ldreq	r3, [r1, #20]
 800e910:	600f      	str	r7, [r1, #0]
 800e912:	bf18      	it	ne
 800e914:	2300      	movne	r3, #0
 800e916:	eba6 0807 	sub.w	r8, r6, r7
 800e91a:	608b      	str	r3, [r1, #8]
 800e91c:	f1b8 0f00 	cmp.w	r8, #0
 800e920:	dde9      	ble.n	800e8f6 <__sflush_r+0xae>
 800e922:	6a21      	ldr	r1, [r4, #32]
 800e924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e926:	4643      	mov	r3, r8
 800e928:	463a      	mov	r2, r7
 800e92a:	4628      	mov	r0, r5
 800e92c:	47b0      	blx	r6
 800e92e:	2800      	cmp	r0, #0
 800e930:	dc08      	bgt.n	800e944 <__sflush_r+0xfc>
 800e932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	f04f 30ff 	mov.w	r0, #4294967295
 800e940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e944:	4407      	add	r7, r0
 800e946:	eba8 0800 	sub.w	r8, r8, r0
 800e94a:	e7e7      	b.n	800e91c <__sflush_r+0xd4>
 800e94c:	dfbffffe 	.word	0xdfbffffe

0800e950 <_fflush_r>:
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	690b      	ldr	r3, [r1, #16]
 800e954:	4605      	mov	r5, r0
 800e956:	460c      	mov	r4, r1
 800e958:	b913      	cbnz	r3, 800e960 <_fflush_r+0x10>
 800e95a:	2500      	movs	r5, #0
 800e95c:	4628      	mov	r0, r5
 800e95e:	bd38      	pop	{r3, r4, r5, pc}
 800e960:	b118      	cbz	r0, 800e96a <_fflush_r+0x1a>
 800e962:	6a03      	ldr	r3, [r0, #32]
 800e964:	b90b      	cbnz	r3, 800e96a <_fflush_r+0x1a>
 800e966:	f7fe f961 	bl	800cc2c <__sinit>
 800e96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d0f3      	beq.n	800e95a <_fflush_r+0xa>
 800e972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e974:	07d0      	lsls	r0, r2, #31
 800e976:	d404      	bmi.n	800e982 <_fflush_r+0x32>
 800e978:	0599      	lsls	r1, r3, #22
 800e97a:	d402      	bmi.n	800e982 <_fflush_r+0x32>
 800e97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e97e:	f7fe fb50 	bl	800d022 <__retarget_lock_acquire_recursive>
 800e982:	4628      	mov	r0, r5
 800e984:	4621      	mov	r1, r4
 800e986:	f7ff ff5f 	bl	800e848 <__sflush_r>
 800e98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e98c:	07da      	lsls	r2, r3, #31
 800e98e:	4605      	mov	r5, r0
 800e990:	d4e4      	bmi.n	800e95c <_fflush_r+0xc>
 800e992:	89a3      	ldrh	r3, [r4, #12]
 800e994:	059b      	lsls	r3, r3, #22
 800e996:	d4e1      	bmi.n	800e95c <_fflush_r+0xc>
 800e998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e99a:	f7fe fb43 	bl	800d024 <__retarget_lock_release_recursive>
 800e99e:	e7dd      	b.n	800e95c <_fflush_r+0xc>

0800e9a0 <__swhatbuf_r>:
 800e9a0:	b570      	push	{r4, r5, r6, lr}
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a8:	2900      	cmp	r1, #0
 800e9aa:	b096      	sub	sp, #88	@ 0x58
 800e9ac:	4615      	mov	r5, r2
 800e9ae:	461e      	mov	r6, r3
 800e9b0:	da0d      	bge.n	800e9ce <__swhatbuf_r+0x2e>
 800e9b2:	89a3      	ldrh	r3, [r4, #12]
 800e9b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e9b8:	f04f 0100 	mov.w	r1, #0
 800e9bc:	bf14      	ite	ne
 800e9be:	2340      	movne	r3, #64	@ 0x40
 800e9c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	6031      	str	r1, [r6, #0]
 800e9c8:	602b      	str	r3, [r5, #0]
 800e9ca:	b016      	add	sp, #88	@ 0x58
 800e9cc:	bd70      	pop	{r4, r5, r6, pc}
 800e9ce:	466a      	mov	r2, sp
 800e9d0:	f000 f848 	bl	800ea64 <_fstat_r>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	dbec      	blt.n	800e9b2 <__swhatbuf_r+0x12>
 800e9d8:	9901      	ldr	r1, [sp, #4]
 800e9da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e9de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e9e2:	4259      	negs	r1, r3
 800e9e4:	4159      	adcs	r1, r3
 800e9e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9ea:	e7eb      	b.n	800e9c4 <__swhatbuf_r+0x24>

0800e9ec <__smakebuf_r>:
 800e9ec:	898b      	ldrh	r3, [r1, #12]
 800e9ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9f0:	079d      	lsls	r5, r3, #30
 800e9f2:	4606      	mov	r6, r0
 800e9f4:	460c      	mov	r4, r1
 800e9f6:	d507      	bpl.n	800ea08 <__smakebuf_r+0x1c>
 800e9f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	6123      	str	r3, [r4, #16]
 800ea00:	2301      	movs	r3, #1
 800ea02:	6163      	str	r3, [r4, #20]
 800ea04:	b003      	add	sp, #12
 800ea06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea08:	ab01      	add	r3, sp, #4
 800ea0a:	466a      	mov	r2, sp
 800ea0c:	f7ff ffc8 	bl	800e9a0 <__swhatbuf_r>
 800ea10:	9f00      	ldr	r7, [sp, #0]
 800ea12:	4605      	mov	r5, r0
 800ea14:	4639      	mov	r1, r7
 800ea16:	4630      	mov	r0, r6
 800ea18:	f7ff f9c6 	bl	800dda8 <_malloc_r>
 800ea1c:	b948      	cbnz	r0, 800ea32 <__smakebuf_r+0x46>
 800ea1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea22:	059a      	lsls	r2, r3, #22
 800ea24:	d4ee      	bmi.n	800ea04 <__smakebuf_r+0x18>
 800ea26:	f023 0303 	bic.w	r3, r3, #3
 800ea2a:	f043 0302 	orr.w	r3, r3, #2
 800ea2e:	81a3      	strh	r3, [r4, #12]
 800ea30:	e7e2      	b.n	800e9f8 <__smakebuf_r+0xc>
 800ea32:	89a3      	ldrh	r3, [r4, #12]
 800ea34:	6020      	str	r0, [r4, #0]
 800ea36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea3a:	81a3      	strh	r3, [r4, #12]
 800ea3c:	9b01      	ldr	r3, [sp, #4]
 800ea3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea42:	b15b      	cbz	r3, 800ea5c <__smakebuf_r+0x70>
 800ea44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f000 f81d 	bl	800ea88 <_isatty_r>
 800ea4e:	b128      	cbz	r0, 800ea5c <__smakebuf_r+0x70>
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	f023 0303 	bic.w	r3, r3, #3
 800ea56:	f043 0301 	orr.w	r3, r3, #1
 800ea5a:	81a3      	strh	r3, [r4, #12]
 800ea5c:	89a3      	ldrh	r3, [r4, #12]
 800ea5e:	431d      	orrs	r5, r3
 800ea60:	81a5      	strh	r5, [r4, #12]
 800ea62:	e7cf      	b.n	800ea04 <__smakebuf_r+0x18>

0800ea64 <_fstat_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	@ (800ea84 <_fstat_r+0x20>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	4611      	mov	r1, r2
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	f7f7 fbdd 	bl	8006230 <_fstat>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	d102      	bne.n	800ea80 <_fstat_r+0x1c>
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	b103      	cbz	r3, 800ea80 <_fstat_r+0x1c>
 800ea7e:	6023      	str	r3, [r4, #0]
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
 800ea82:	bf00      	nop
 800ea84:	20000770 	.word	0x20000770

0800ea88 <_isatty_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d06      	ldr	r5, [pc, #24]	@ (800eaa4 <_isatty_r+0x1c>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	602b      	str	r3, [r5, #0]
 800ea94:	f7f7 fbdc 	bl	8006250 <_isatty>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_isatty_r+0x1a>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_isatty_r+0x1a>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	20000770 	.word	0x20000770

0800eaa8 <_sbrk_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4d06      	ldr	r5, [pc, #24]	@ (800eac4 <_sbrk_r+0x1c>)
 800eaac:	2300      	movs	r3, #0
 800eaae:	4604      	mov	r4, r0
 800eab0:	4608      	mov	r0, r1
 800eab2:	602b      	str	r3, [r5, #0]
 800eab4:	f7f7 fbe4 	bl	8006280 <_sbrk>
 800eab8:	1c43      	adds	r3, r0, #1
 800eaba:	d102      	bne.n	800eac2 <_sbrk_r+0x1a>
 800eabc:	682b      	ldr	r3, [r5, #0]
 800eabe:	b103      	cbz	r3, 800eac2 <_sbrk_r+0x1a>
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	20000770 	.word	0x20000770

0800eac8 <memcpy>:
 800eac8:	440a      	add	r2, r1
 800eaca:	4291      	cmp	r1, r2
 800eacc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ead0:	d100      	bne.n	800ead4 <memcpy+0xc>
 800ead2:	4770      	bx	lr
 800ead4:	b510      	push	{r4, lr}
 800ead6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eada:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eade:	4291      	cmp	r1, r2
 800eae0:	d1f9      	bne.n	800ead6 <memcpy+0xe>
 800eae2:	bd10      	pop	{r4, pc}

0800eae4 <__assert_func>:
 800eae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eae6:	4614      	mov	r4, r2
 800eae8:	461a      	mov	r2, r3
 800eaea:	4b09      	ldr	r3, [pc, #36]	@ (800eb10 <__assert_func+0x2c>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4605      	mov	r5, r0
 800eaf0:	68d8      	ldr	r0, [r3, #12]
 800eaf2:	b954      	cbnz	r4, 800eb0a <__assert_func+0x26>
 800eaf4:	4b07      	ldr	r3, [pc, #28]	@ (800eb14 <__assert_func+0x30>)
 800eaf6:	461c      	mov	r4, r3
 800eaf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eafc:	9100      	str	r1, [sp, #0]
 800eafe:	462b      	mov	r3, r5
 800eb00:	4905      	ldr	r1, [pc, #20]	@ (800eb18 <__assert_func+0x34>)
 800eb02:	f000 f841 	bl	800eb88 <fiprintf>
 800eb06:	f000 f851 	bl	800ebac <abort>
 800eb0a:	4b04      	ldr	r3, [pc, #16]	@ (800eb1c <__assert_func+0x38>)
 800eb0c:	e7f4      	b.n	800eaf8 <__assert_func+0x14>
 800eb0e:	bf00      	nop
 800eb10:	2000001c 	.word	0x2000001c
 800eb14:	0800ff4e 	.word	0x0800ff4e
 800eb18:	0800ff20 	.word	0x0800ff20
 800eb1c:	0800ff13 	.word	0x0800ff13

0800eb20 <_calloc_r>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	fba1 5402 	umull	r5, r4, r1, r2
 800eb26:	b93c      	cbnz	r4, 800eb38 <_calloc_r+0x18>
 800eb28:	4629      	mov	r1, r5
 800eb2a:	f7ff f93d 	bl	800dda8 <_malloc_r>
 800eb2e:	4606      	mov	r6, r0
 800eb30:	b928      	cbnz	r0, 800eb3e <_calloc_r+0x1e>
 800eb32:	2600      	movs	r6, #0
 800eb34:	4630      	mov	r0, r6
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
 800eb38:	220c      	movs	r2, #12
 800eb3a:	6002      	str	r2, [r0, #0]
 800eb3c:	e7f9      	b.n	800eb32 <_calloc_r+0x12>
 800eb3e:	462a      	mov	r2, r5
 800eb40:	4621      	mov	r1, r4
 800eb42:	f7fe f9f1 	bl	800cf28 <memset>
 800eb46:	e7f5      	b.n	800eb34 <_calloc_r+0x14>

0800eb48 <__ascii_mbtowc>:
 800eb48:	b082      	sub	sp, #8
 800eb4a:	b901      	cbnz	r1, 800eb4e <__ascii_mbtowc+0x6>
 800eb4c:	a901      	add	r1, sp, #4
 800eb4e:	b142      	cbz	r2, 800eb62 <__ascii_mbtowc+0x1a>
 800eb50:	b14b      	cbz	r3, 800eb66 <__ascii_mbtowc+0x1e>
 800eb52:	7813      	ldrb	r3, [r2, #0]
 800eb54:	600b      	str	r3, [r1, #0]
 800eb56:	7812      	ldrb	r2, [r2, #0]
 800eb58:	1e10      	subs	r0, r2, #0
 800eb5a:	bf18      	it	ne
 800eb5c:	2001      	movne	r0, #1
 800eb5e:	b002      	add	sp, #8
 800eb60:	4770      	bx	lr
 800eb62:	4610      	mov	r0, r2
 800eb64:	e7fb      	b.n	800eb5e <__ascii_mbtowc+0x16>
 800eb66:	f06f 0001 	mvn.w	r0, #1
 800eb6a:	e7f8      	b.n	800eb5e <__ascii_mbtowc+0x16>

0800eb6c <__ascii_wctomb>:
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	4608      	mov	r0, r1
 800eb70:	b141      	cbz	r1, 800eb84 <__ascii_wctomb+0x18>
 800eb72:	2aff      	cmp	r2, #255	@ 0xff
 800eb74:	d904      	bls.n	800eb80 <__ascii_wctomb+0x14>
 800eb76:	228a      	movs	r2, #138	@ 0x8a
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7e:	4770      	bx	lr
 800eb80:	700a      	strb	r2, [r1, #0]
 800eb82:	2001      	movs	r0, #1
 800eb84:	4770      	bx	lr
	...

0800eb88 <fiprintf>:
 800eb88:	b40e      	push	{r1, r2, r3}
 800eb8a:	b503      	push	{r0, r1, lr}
 800eb8c:	4601      	mov	r1, r0
 800eb8e:	ab03      	add	r3, sp, #12
 800eb90:	4805      	ldr	r0, [pc, #20]	@ (800eba8 <fiprintf+0x20>)
 800eb92:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb96:	6800      	ldr	r0, [r0, #0]
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	f7ff fd3d 	bl	800e618 <_vfiprintf_r>
 800eb9e:	b002      	add	sp, #8
 800eba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eba4:	b003      	add	sp, #12
 800eba6:	4770      	bx	lr
 800eba8:	2000001c 	.word	0x2000001c

0800ebac <abort>:
 800ebac:	b508      	push	{r3, lr}
 800ebae:	2006      	movs	r0, #6
 800ebb0:	f000 f82c 	bl	800ec0c <raise>
 800ebb4:	2001      	movs	r0, #1
 800ebb6:	f7f7 fb07 	bl	80061c8 <_exit>

0800ebba <_raise_r>:
 800ebba:	291f      	cmp	r1, #31
 800ebbc:	b538      	push	{r3, r4, r5, lr}
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	460c      	mov	r4, r1
 800ebc2:	d904      	bls.n	800ebce <_raise_r+0x14>
 800ebc4:	2316      	movs	r3, #22
 800ebc6:	6003      	str	r3, [r0, #0]
 800ebc8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebcc:	bd38      	pop	{r3, r4, r5, pc}
 800ebce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ebd0:	b112      	cbz	r2, 800ebd8 <_raise_r+0x1e>
 800ebd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebd6:	b94b      	cbnz	r3, 800ebec <_raise_r+0x32>
 800ebd8:	4628      	mov	r0, r5
 800ebda:	f000 f831 	bl	800ec40 <_getpid_r>
 800ebde:	4622      	mov	r2, r4
 800ebe0:	4601      	mov	r1, r0
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebe8:	f000 b818 	b.w	800ec1c <_kill_r>
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d00a      	beq.n	800ec06 <_raise_r+0x4c>
 800ebf0:	1c59      	adds	r1, r3, #1
 800ebf2:	d103      	bne.n	800ebfc <_raise_r+0x42>
 800ebf4:	2316      	movs	r3, #22
 800ebf6:	6003      	str	r3, [r0, #0]
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	e7e7      	b.n	800ebcc <_raise_r+0x12>
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec02:	4620      	mov	r0, r4
 800ec04:	4798      	blx	r3
 800ec06:	2000      	movs	r0, #0
 800ec08:	e7e0      	b.n	800ebcc <_raise_r+0x12>
	...

0800ec0c <raise>:
 800ec0c:	4b02      	ldr	r3, [pc, #8]	@ (800ec18 <raise+0xc>)
 800ec0e:	4601      	mov	r1, r0
 800ec10:	6818      	ldr	r0, [r3, #0]
 800ec12:	f7ff bfd2 	b.w	800ebba <_raise_r>
 800ec16:	bf00      	nop
 800ec18:	2000001c 	.word	0x2000001c

0800ec1c <_kill_r>:
 800ec1c:	b538      	push	{r3, r4, r5, lr}
 800ec1e:	4d07      	ldr	r5, [pc, #28]	@ (800ec3c <_kill_r+0x20>)
 800ec20:	2300      	movs	r3, #0
 800ec22:	4604      	mov	r4, r0
 800ec24:	4608      	mov	r0, r1
 800ec26:	4611      	mov	r1, r2
 800ec28:	602b      	str	r3, [r5, #0]
 800ec2a:	f7f7 fabd 	bl	80061a8 <_kill>
 800ec2e:	1c43      	adds	r3, r0, #1
 800ec30:	d102      	bne.n	800ec38 <_kill_r+0x1c>
 800ec32:	682b      	ldr	r3, [r5, #0]
 800ec34:	b103      	cbz	r3, 800ec38 <_kill_r+0x1c>
 800ec36:	6023      	str	r3, [r4, #0]
 800ec38:	bd38      	pop	{r3, r4, r5, pc}
 800ec3a:	bf00      	nop
 800ec3c:	20000770 	.word	0x20000770

0800ec40 <_getpid_r>:
 800ec40:	f7f7 baaa 	b.w	8006198 <_getpid>

0800ec44 <asinf>:
 800ec44:	b508      	push	{r3, lr}
 800ec46:	ed2d 8b02 	vpush	{d8}
 800ec4a:	eeb0 8a40 	vmov.f32	s16, s0
 800ec4e:	f000 f895 	bl	800ed7c <__ieee754_asinf>
 800ec52:	eeb4 8a48 	vcmp.f32	s16, s16
 800ec56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5a:	eef0 8a40 	vmov.f32	s17, s0
 800ec5e:	d615      	bvs.n	800ec8c <asinf+0x48>
 800ec60:	eeb0 0a48 	vmov.f32	s0, s16
 800ec64:	f000 f873 	bl	800ed4e <fabsf>
 800ec68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ec6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ec70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec74:	dd0a      	ble.n	800ec8c <asinf+0x48>
 800ec76:	f7fe f9a9 	bl	800cfcc <__errno>
 800ec7a:	ecbd 8b02 	vpop	{d8}
 800ec7e:	2321      	movs	r3, #33	@ 0x21
 800ec80:	6003      	str	r3, [r0, #0]
 800ec82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ec86:	4804      	ldr	r0, [pc, #16]	@ (800ec98 <asinf+0x54>)
 800ec88:	f000 b872 	b.w	800ed70 <nanf>
 800ec8c:	eeb0 0a68 	vmov.f32	s0, s17
 800ec90:	ecbd 8b02 	vpop	{d8}
 800ec94:	bd08      	pop	{r3, pc}
 800ec96:	bf00      	nop
 800ec98:	0800ff4e 	.word	0x0800ff4e

0800ec9c <atan2f>:
 800ec9c:	f000 b954 	b.w	800ef48 <__ieee754_atan2f>

0800eca0 <powf>:
 800eca0:	b508      	push	{r3, lr}
 800eca2:	ed2d 8b04 	vpush	{d8-d9}
 800eca6:	eeb0 8a60 	vmov.f32	s16, s1
 800ecaa:	eeb0 9a40 	vmov.f32	s18, s0
 800ecae:	f000 f9eb 	bl	800f088 <__ieee754_powf>
 800ecb2:	eeb4 8a48 	vcmp.f32	s16, s16
 800ecb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecba:	eef0 8a40 	vmov.f32	s17, s0
 800ecbe:	d63e      	bvs.n	800ed3e <powf+0x9e>
 800ecc0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ecc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc8:	d112      	bne.n	800ecf0 <powf+0x50>
 800ecca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ecce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd2:	d039      	beq.n	800ed48 <powf+0xa8>
 800ecd4:	eeb0 0a48 	vmov.f32	s0, s16
 800ecd8:	f000 f840 	bl	800ed5c <finitef>
 800ecdc:	b378      	cbz	r0, 800ed3e <powf+0x9e>
 800ecde:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ece2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece6:	d52a      	bpl.n	800ed3e <powf+0x9e>
 800ece8:	f7fe f970 	bl	800cfcc <__errno>
 800ecec:	2322      	movs	r3, #34	@ 0x22
 800ecee:	e014      	b.n	800ed1a <powf+0x7a>
 800ecf0:	f000 f834 	bl	800ed5c <finitef>
 800ecf4:	b998      	cbnz	r0, 800ed1e <powf+0x7e>
 800ecf6:	eeb0 0a49 	vmov.f32	s0, s18
 800ecfa:	f000 f82f 	bl	800ed5c <finitef>
 800ecfe:	b170      	cbz	r0, 800ed1e <powf+0x7e>
 800ed00:	eeb0 0a48 	vmov.f32	s0, s16
 800ed04:	f000 f82a 	bl	800ed5c <finitef>
 800ed08:	b148      	cbz	r0, 800ed1e <powf+0x7e>
 800ed0a:	eef4 8a68 	vcmp.f32	s17, s17
 800ed0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed12:	d7e9      	bvc.n	800ece8 <powf+0x48>
 800ed14:	f7fe f95a 	bl	800cfcc <__errno>
 800ed18:	2321      	movs	r3, #33	@ 0x21
 800ed1a:	6003      	str	r3, [r0, #0]
 800ed1c:	e00f      	b.n	800ed3e <powf+0x9e>
 800ed1e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ed22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed26:	d10a      	bne.n	800ed3e <powf+0x9e>
 800ed28:	eeb0 0a49 	vmov.f32	s0, s18
 800ed2c:	f000 f816 	bl	800ed5c <finitef>
 800ed30:	b128      	cbz	r0, 800ed3e <powf+0x9e>
 800ed32:	eeb0 0a48 	vmov.f32	s0, s16
 800ed36:	f000 f811 	bl	800ed5c <finitef>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d1d4      	bne.n	800ece8 <powf+0x48>
 800ed3e:	eeb0 0a68 	vmov.f32	s0, s17
 800ed42:	ecbd 8b04 	vpop	{d8-d9}
 800ed46:	bd08      	pop	{r3, pc}
 800ed48:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ed4c:	e7f7      	b.n	800ed3e <powf+0x9e>

0800ed4e <fabsf>:
 800ed4e:	ee10 3a10 	vmov	r3, s0
 800ed52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed56:	ee00 3a10 	vmov	s0, r3
 800ed5a:	4770      	bx	lr

0800ed5c <finitef>:
 800ed5c:	ee10 3a10 	vmov	r3, s0
 800ed60:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ed64:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ed68:	bfac      	ite	ge
 800ed6a:	2000      	movge	r0, #0
 800ed6c:	2001      	movlt	r0, #1
 800ed6e:	4770      	bx	lr

0800ed70 <nanf>:
 800ed70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ed78 <nanf+0x8>
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	7fc00000 	.word	0x7fc00000

0800ed7c <__ieee754_asinf>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	ee10 5a10 	vmov	r5, s0
 800ed82:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ed86:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800ed8a:	ed2d 8b04 	vpush	{d8-d9}
 800ed8e:	d10c      	bne.n	800edaa <__ieee754_asinf+0x2e>
 800ed90:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800ef08 <__ieee754_asinf+0x18c>
 800ed94:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800ef0c <__ieee754_asinf+0x190>
 800ed98:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ed9c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800eda0:	eeb0 0a67 	vmov.f32	s0, s15
 800eda4:	ecbd 8b04 	vpop	{d8-d9}
 800eda8:	bd38      	pop	{r3, r4, r5, pc}
 800edaa:	d904      	bls.n	800edb6 <__ieee754_asinf+0x3a>
 800edac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800edb0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800edb4:	e7f6      	b.n	800eda4 <__ieee754_asinf+0x28>
 800edb6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800edba:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800edbe:	d20b      	bcs.n	800edd8 <__ieee754_asinf+0x5c>
 800edc0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800edc4:	d252      	bcs.n	800ee6c <__ieee754_asinf+0xf0>
 800edc6:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800ef10 <__ieee754_asinf+0x194>
 800edca:	ee70 7a27 	vadd.f32	s15, s0, s15
 800edce:	eef4 7ae8 	vcmpe.f32	s15, s17
 800edd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd6:	dce5      	bgt.n	800eda4 <__ieee754_asinf+0x28>
 800edd8:	f7ff ffb9 	bl	800ed4e <fabsf>
 800eddc:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800ede0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ede4:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ede8:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800ef14 <__ieee754_asinf+0x198>
 800edec:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800ef18 <__ieee754_asinf+0x19c>
 800edf0:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800ef1c <__ieee754_asinf+0x1a0>
 800edf4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800edf8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ef20 <__ieee754_asinf+0x1a4>
 800edfc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ee00:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ef24 <__ieee754_asinf+0x1a8>
 800ee04:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ee08:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800ef28 <__ieee754_asinf+0x1ac>
 800ee0c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ee10:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800ef2c <__ieee754_asinf+0x1b0>
 800ee14:	eea7 9a88 	vfma.f32	s18, s15, s16
 800ee18:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800ef30 <__ieee754_asinf+0x1b4>
 800ee1c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800ee20:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800ef34 <__ieee754_asinf+0x1b8>
 800ee24:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ee28:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800ef38 <__ieee754_asinf+0x1bc>
 800ee2c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ee30:	eeb0 0a48 	vmov.f32	s0, s16
 800ee34:	eee7 8a88 	vfma.f32	s17, s15, s16
 800ee38:	f000 fd56 	bl	800f8e8 <__ieee754_sqrtf>
 800ee3c:	4b3f      	ldr	r3, [pc, #252]	@ (800ef3c <__ieee754_asinf+0x1c0>)
 800ee3e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ee42:	429c      	cmp	r4, r3
 800ee44:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ee48:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ee4c:	d93d      	bls.n	800eeca <__ieee754_asinf+0x14e>
 800ee4e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ee52:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800ef40 <__ieee754_asinf+0x1c4>
 800ee56:	eee0 7a26 	vfma.f32	s15, s0, s13
 800ee5a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800ef0c <__ieee754_asinf+0x190>
 800ee5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee62:	2d00      	cmp	r5, #0
 800ee64:	bfd8      	it	le
 800ee66:	eeb1 0a40 	vnegle.f32	s0, s0
 800ee6a:	e79b      	b.n	800eda4 <__ieee754_asinf+0x28>
 800ee6c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ee70:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800ef18 <__ieee754_asinf+0x19c>
 800ee74:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800ef14 <__ieee754_asinf+0x198>
 800ee78:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800ef2c <__ieee754_asinf+0x1b0>
 800ee7c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ee80:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ef20 <__ieee754_asinf+0x1a4>
 800ee84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ee88:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800ef24 <__ieee754_asinf+0x1a8>
 800ee8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ee90:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800ef28 <__ieee754_asinf+0x1ac>
 800ee94:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ee98:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800ef1c <__ieee754_asinf+0x1a0>
 800ee9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eea0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800ef30 <__ieee754_asinf+0x1b4>
 800eea4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800eea8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800ef34 <__ieee754_asinf+0x1b8>
 800eeac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800eeb0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800ef38 <__ieee754_asinf+0x1bc>
 800eeb4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800eeb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eebc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800eec0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800eec4:	eea0 0a27 	vfma.f32	s0, s0, s15
 800eec8:	e76c      	b.n	800eda4 <__ieee754_asinf+0x28>
 800eeca:	ee10 3a10 	vmov	r3, s0
 800eece:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800eed2:	f023 030f 	bic.w	r3, r3, #15
 800eed6:	ee07 3a10 	vmov	s14, r3
 800eeda:	eea7 8a47 	vfms.f32	s16, s14, s14
 800eede:	ee70 5a00 	vadd.f32	s11, s0, s0
 800eee2:	ee30 0a07 	vadd.f32	s0, s0, s14
 800eee6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ef08 <__ieee754_asinf+0x18c>
 800eeea:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800eeee:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800ef44 <__ieee754_asinf+0x1c8>
 800eef2:	eee5 7a66 	vfms.f32	s15, s10, s13
 800eef6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800eefa:	eeb0 6a40 	vmov.f32	s12, s0
 800eefe:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ef02:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ef06:	e7aa      	b.n	800ee5e <__ieee754_asinf+0xe2>
 800ef08:	b33bbd2e 	.word	0xb33bbd2e
 800ef0c:	3fc90fdb 	.word	0x3fc90fdb
 800ef10:	7149f2ca 	.word	0x7149f2ca
 800ef14:	3a4f7f04 	.word	0x3a4f7f04
 800ef18:	3811ef08 	.word	0x3811ef08
 800ef1c:	3e2aaaab 	.word	0x3e2aaaab
 800ef20:	bd241146 	.word	0xbd241146
 800ef24:	3e4e0aa8 	.word	0x3e4e0aa8
 800ef28:	bea6b090 	.word	0xbea6b090
 800ef2c:	3d9dc62e 	.word	0x3d9dc62e
 800ef30:	bf303361 	.word	0xbf303361
 800ef34:	4001572d 	.word	0x4001572d
 800ef38:	c019d139 	.word	0xc019d139
 800ef3c:	3f799999 	.word	0x3f799999
 800ef40:	333bbd2e 	.word	0x333bbd2e
 800ef44:	3f490fdb 	.word	0x3f490fdb

0800ef48 <__ieee754_atan2f>:
 800ef48:	ee10 2a90 	vmov	r2, s1
 800ef4c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ef50:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ef54:	b510      	push	{r4, lr}
 800ef56:	eef0 7a40 	vmov.f32	s15, s0
 800ef5a:	d806      	bhi.n	800ef6a <__ieee754_atan2f+0x22>
 800ef5c:	ee10 0a10 	vmov	r0, s0
 800ef60:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ef64:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ef68:	d904      	bls.n	800ef74 <__ieee754_atan2f+0x2c>
 800ef6a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ef6e:	eeb0 0a67 	vmov.f32	s0, s15
 800ef72:	bd10      	pop	{r4, pc}
 800ef74:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ef78:	d103      	bne.n	800ef82 <__ieee754_atan2f+0x3a>
 800ef7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef7e:	f000 bb53 	b.w	800f628 <atanf>
 800ef82:	1794      	asrs	r4, r2, #30
 800ef84:	f004 0402 	and.w	r4, r4, #2
 800ef88:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ef8c:	b943      	cbnz	r3, 800efa0 <__ieee754_atan2f+0x58>
 800ef8e:	2c02      	cmp	r4, #2
 800ef90:	d05e      	beq.n	800f050 <__ieee754_atan2f+0x108>
 800ef92:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f064 <__ieee754_atan2f+0x11c>
 800ef96:	2c03      	cmp	r4, #3
 800ef98:	bf08      	it	eq
 800ef9a:	eef0 7a47 	vmoveq.f32	s15, s14
 800ef9e:	e7e6      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800efa0:	b941      	cbnz	r1, 800efb4 <__ieee754_atan2f+0x6c>
 800efa2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800f068 <__ieee754_atan2f+0x120>
 800efa6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f06c <__ieee754_atan2f+0x124>
 800efaa:	2800      	cmp	r0, #0
 800efac:	bfb8      	it	lt
 800efae:	eef0 7a47 	vmovlt.f32	s15, s14
 800efb2:	e7dc      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800efb4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800efb8:	d110      	bne.n	800efdc <__ieee754_atan2f+0x94>
 800efba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800efbe:	f104 34ff 	add.w	r4, r4, #4294967295
 800efc2:	d107      	bne.n	800efd4 <__ieee754_atan2f+0x8c>
 800efc4:	2c02      	cmp	r4, #2
 800efc6:	d846      	bhi.n	800f056 <__ieee754_atan2f+0x10e>
 800efc8:	4b29      	ldr	r3, [pc, #164]	@ (800f070 <__ieee754_atan2f+0x128>)
 800efca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800efce:	edd3 7a00 	vldr	s15, [r3]
 800efd2:	e7cc      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800efd4:	2c02      	cmp	r4, #2
 800efd6:	d841      	bhi.n	800f05c <__ieee754_atan2f+0x114>
 800efd8:	4b26      	ldr	r3, [pc, #152]	@ (800f074 <__ieee754_atan2f+0x12c>)
 800efda:	e7f6      	b.n	800efca <__ieee754_atan2f+0x82>
 800efdc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800efe0:	d0df      	beq.n	800efa2 <__ieee754_atan2f+0x5a>
 800efe2:	1a5b      	subs	r3, r3, r1
 800efe4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800efe8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800efec:	da1a      	bge.n	800f024 <__ieee754_atan2f+0xdc>
 800efee:	2a00      	cmp	r2, #0
 800eff0:	da01      	bge.n	800eff6 <__ieee754_atan2f+0xae>
 800eff2:	313c      	adds	r1, #60	@ 0x3c
 800eff4:	db19      	blt.n	800f02a <__ieee754_atan2f+0xe2>
 800eff6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800effa:	f7ff fea8 	bl	800ed4e <fabsf>
 800effe:	f000 fb13 	bl	800f628 <atanf>
 800f002:	eef0 7a40 	vmov.f32	s15, s0
 800f006:	2c01      	cmp	r4, #1
 800f008:	d012      	beq.n	800f030 <__ieee754_atan2f+0xe8>
 800f00a:	2c02      	cmp	r4, #2
 800f00c:	d017      	beq.n	800f03e <__ieee754_atan2f+0xf6>
 800f00e:	2c00      	cmp	r4, #0
 800f010:	d0ad      	beq.n	800ef6e <__ieee754_atan2f+0x26>
 800f012:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f078 <__ieee754_atan2f+0x130>
 800f016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f01a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800f07c <__ieee754_atan2f+0x134>
 800f01e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f022:	e7a4      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800f024:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800f068 <__ieee754_atan2f+0x120>
 800f028:	e7ed      	b.n	800f006 <__ieee754_atan2f+0xbe>
 800f02a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f080 <__ieee754_atan2f+0x138>
 800f02e:	e7ea      	b.n	800f006 <__ieee754_atan2f+0xbe>
 800f030:	ee17 3a90 	vmov	r3, s15
 800f034:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f038:	ee07 3a90 	vmov	s15, r3
 800f03c:	e797      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800f03e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800f078 <__ieee754_atan2f+0x130>
 800f042:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f046:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800f07c <__ieee754_atan2f+0x134>
 800f04a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f04e:	e78e      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800f050:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800f07c <__ieee754_atan2f+0x134>
 800f054:	e78b      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800f056:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800f084 <__ieee754_atan2f+0x13c>
 800f05a:	e788      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800f05c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f080 <__ieee754_atan2f+0x138>
 800f060:	e785      	b.n	800ef6e <__ieee754_atan2f+0x26>
 800f062:	bf00      	nop
 800f064:	c0490fdb 	.word	0xc0490fdb
 800f068:	3fc90fdb 	.word	0x3fc90fdb
 800f06c:	bfc90fdb 	.word	0xbfc90fdb
 800f070:	0801005c 	.word	0x0801005c
 800f074:	08010050 	.word	0x08010050
 800f078:	33bbbd2e 	.word	0x33bbbd2e
 800f07c:	40490fdb 	.word	0x40490fdb
 800f080:	00000000 	.word	0x00000000
 800f084:	3f490fdb 	.word	0x3f490fdb

0800f088 <__ieee754_powf>:
 800f088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f08c:	ee10 4a90 	vmov	r4, s1
 800f090:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f094:	ed2d 8b02 	vpush	{d8}
 800f098:	ee10 6a10 	vmov	r6, s0
 800f09c:	eeb0 8a40 	vmov.f32	s16, s0
 800f0a0:	eef0 8a60 	vmov.f32	s17, s1
 800f0a4:	d10c      	bne.n	800f0c0 <__ieee754_powf+0x38>
 800f0a6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f0aa:	0076      	lsls	r6, r6, #1
 800f0ac:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f0b0:	f240 829c 	bls.w	800f5ec <__ieee754_powf+0x564>
 800f0b4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f0b8:	ecbd 8b02 	vpop	{d8}
 800f0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0c0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f0c4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f0c8:	d802      	bhi.n	800f0d0 <__ieee754_powf+0x48>
 800f0ca:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f0ce:	d908      	bls.n	800f0e2 <__ieee754_powf+0x5a>
 800f0d0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f0d4:	d1ee      	bne.n	800f0b4 <__ieee754_powf+0x2c>
 800f0d6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f0da:	0064      	lsls	r4, r4, #1
 800f0dc:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f0e0:	e7e6      	b.n	800f0b0 <__ieee754_powf+0x28>
 800f0e2:	2e00      	cmp	r6, #0
 800f0e4:	da1e      	bge.n	800f124 <__ieee754_powf+0x9c>
 800f0e6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f0ea:	d22b      	bcs.n	800f144 <__ieee754_powf+0xbc>
 800f0ec:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f0f0:	d332      	bcc.n	800f158 <__ieee754_powf+0xd0>
 800f0f2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f0f6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f0fa:	fa49 f503 	asr.w	r5, r9, r3
 800f0fe:	fa05 f303 	lsl.w	r3, r5, r3
 800f102:	454b      	cmp	r3, r9
 800f104:	d126      	bne.n	800f154 <__ieee754_powf+0xcc>
 800f106:	f005 0501 	and.w	r5, r5, #1
 800f10a:	f1c5 0502 	rsb	r5, r5, #2
 800f10e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f112:	d122      	bne.n	800f15a <__ieee754_powf+0xd2>
 800f114:	2c00      	cmp	r4, #0
 800f116:	f280 826f 	bge.w	800f5f8 <__ieee754_powf+0x570>
 800f11a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f11e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f122:	e7c9      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f124:	2500      	movs	r5, #0
 800f126:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f12a:	d1f0      	bne.n	800f10e <__ieee754_powf+0x86>
 800f12c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f130:	f000 825c 	beq.w	800f5ec <__ieee754_powf+0x564>
 800f134:	d908      	bls.n	800f148 <__ieee754_powf+0xc0>
 800f136:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800f498 <__ieee754_powf+0x410>
 800f13a:	2c00      	cmp	r4, #0
 800f13c:	bfa8      	it	ge
 800f13e:	eeb0 0a68 	vmovge.f32	s0, s17
 800f142:	e7b9      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f144:	2502      	movs	r5, #2
 800f146:	e7ee      	b.n	800f126 <__ieee754_powf+0x9e>
 800f148:	2c00      	cmp	r4, #0
 800f14a:	f280 8252 	bge.w	800f5f2 <__ieee754_powf+0x56a>
 800f14e:	eeb1 0a68 	vneg.f32	s0, s17
 800f152:	e7b1      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f154:	2500      	movs	r5, #0
 800f156:	e7da      	b.n	800f10e <__ieee754_powf+0x86>
 800f158:	2500      	movs	r5, #0
 800f15a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f15e:	d102      	bne.n	800f166 <__ieee754_powf+0xde>
 800f160:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f164:	e7a8      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f166:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f16a:	d109      	bne.n	800f180 <__ieee754_powf+0xf8>
 800f16c:	2e00      	cmp	r6, #0
 800f16e:	db07      	blt.n	800f180 <__ieee754_powf+0xf8>
 800f170:	eeb0 0a48 	vmov.f32	s0, s16
 800f174:	ecbd 8b02 	vpop	{d8}
 800f178:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f17c:	f000 bbb4 	b.w	800f8e8 <__ieee754_sqrtf>
 800f180:	eeb0 0a48 	vmov.f32	s0, s16
 800f184:	f7ff fde3 	bl	800ed4e <fabsf>
 800f188:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f18c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f190:	4647      	mov	r7, r8
 800f192:	d002      	beq.n	800f19a <__ieee754_powf+0x112>
 800f194:	f1b8 0f00 	cmp.w	r8, #0
 800f198:	d117      	bne.n	800f1ca <__ieee754_powf+0x142>
 800f19a:	2c00      	cmp	r4, #0
 800f19c:	bfbc      	itt	lt
 800f19e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f1a2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f1a6:	2e00      	cmp	r6, #0
 800f1a8:	da86      	bge.n	800f0b8 <__ieee754_powf+0x30>
 800f1aa:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f1ae:	ea58 0805 	orrs.w	r8, r8, r5
 800f1b2:	d104      	bne.n	800f1be <__ieee754_powf+0x136>
 800f1b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f1b8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f1bc:	e77c      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f1be:	2d01      	cmp	r5, #1
 800f1c0:	f47f af7a 	bne.w	800f0b8 <__ieee754_powf+0x30>
 800f1c4:	eeb1 0a40 	vneg.f32	s0, s0
 800f1c8:	e776      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f1ca:	0ff0      	lsrs	r0, r6, #31
 800f1cc:	3801      	subs	r0, #1
 800f1ce:	ea55 0300 	orrs.w	r3, r5, r0
 800f1d2:	d104      	bne.n	800f1de <__ieee754_powf+0x156>
 800f1d4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f1d8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f1dc:	e76c      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f1de:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f1e2:	d973      	bls.n	800f2cc <__ieee754_powf+0x244>
 800f1e4:	4bad      	ldr	r3, [pc, #692]	@ (800f49c <__ieee754_powf+0x414>)
 800f1e6:	4598      	cmp	r8, r3
 800f1e8:	d808      	bhi.n	800f1fc <__ieee754_powf+0x174>
 800f1ea:	2c00      	cmp	r4, #0
 800f1ec:	da0b      	bge.n	800f206 <__ieee754_powf+0x17e>
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	ecbd 8b02 	vpop	{d8}
 800f1f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f8:	f000 bb70 	b.w	800f8dc <__math_oflowf>
 800f1fc:	4ba8      	ldr	r3, [pc, #672]	@ (800f4a0 <__ieee754_powf+0x418>)
 800f1fe:	4598      	cmp	r8, r3
 800f200:	d908      	bls.n	800f214 <__ieee754_powf+0x18c>
 800f202:	2c00      	cmp	r4, #0
 800f204:	dcf3      	bgt.n	800f1ee <__ieee754_powf+0x166>
 800f206:	2000      	movs	r0, #0
 800f208:	ecbd 8b02 	vpop	{d8}
 800f20c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f210:	f000 bb5e 	b.w	800f8d0 <__math_uflowf>
 800f214:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f218:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f21c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800f4a4 <__ieee754_powf+0x41c>
 800f220:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f224:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f228:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f22c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f230:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f234:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f238:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800f4a8 <__ieee754_powf+0x420>
 800f23c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f240:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800f4ac <__ieee754_powf+0x424>
 800f244:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f248:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f4b0 <__ieee754_powf+0x428>
 800f24c:	eef0 6a67 	vmov.f32	s13, s15
 800f250:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f254:	ee16 3a90 	vmov	r3, s13
 800f258:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f25c:	f023 030f 	bic.w	r3, r3, #15
 800f260:	ee06 3a90 	vmov	s13, r3
 800f264:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f268:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f26c:	3d01      	subs	r5, #1
 800f26e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f272:	4305      	orrs	r5, r0
 800f274:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f278:	f024 040f 	bic.w	r4, r4, #15
 800f27c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f280:	bf18      	it	ne
 800f282:	eeb0 8a47 	vmovne.f32	s16, s14
 800f286:	ee07 4a10 	vmov	s14, r4
 800f28a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f28e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f292:	ee07 3a90 	vmov	s15, r3
 800f296:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f29a:	ee07 4a10 	vmov	s14, r4
 800f29e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2a2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f2a6:	ee17 1a10 	vmov	r1, s14
 800f2aa:	2900      	cmp	r1, #0
 800f2ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f2b0:	f340 80dd 	ble.w	800f46e <__ieee754_powf+0x3e6>
 800f2b4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f2b8:	f240 80ca 	bls.w	800f450 <__ieee754_powf+0x3c8>
 800f2bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c4:	bf4c      	ite	mi
 800f2c6:	2001      	movmi	r0, #1
 800f2c8:	2000      	movpl	r0, #0
 800f2ca:	e791      	b.n	800f1f0 <__ieee754_powf+0x168>
 800f2cc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f2d0:	bf01      	itttt	eq
 800f2d2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f4b4 <__ieee754_powf+0x42c>
 800f2d6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f2da:	f06f 0317 	mvneq.w	r3, #23
 800f2de:	ee17 7a90 	vmoveq	r7, s15
 800f2e2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f2e6:	bf18      	it	ne
 800f2e8:	2300      	movne	r3, #0
 800f2ea:	3a7f      	subs	r2, #127	@ 0x7f
 800f2ec:	441a      	add	r2, r3
 800f2ee:	4b72      	ldr	r3, [pc, #456]	@ (800f4b8 <__ieee754_powf+0x430>)
 800f2f0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f2f4:	429f      	cmp	r7, r3
 800f2f6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f2fa:	dd06      	ble.n	800f30a <__ieee754_powf+0x282>
 800f2fc:	4b6f      	ldr	r3, [pc, #444]	@ (800f4bc <__ieee754_powf+0x434>)
 800f2fe:	429f      	cmp	r7, r3
 800f300:	f340 80a4 	ble.w	800f44c <__ieee754_powf+0x3c4>
 800f304:	3201      	adds	r2, #1
 800f306:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f30a:	2600      	movs	r6, #0
 800f30c:	4b6c      	ldr	r3, [pc, #432]	@ (800f4c0 <__ieee754_powf+0x438>)
 800f30e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f312:	ee07 1a10 	vmov	s14, r1
 800f316:	edd3 5a00 	vldr	s11, [r3]
 800f31a:	4b6a      	ldr	r3, [pc, #424]	@ (800f4c4 <__ieee754_powf+0x43c>)
 800f31c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f324:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f328:	1049      	asrs	r1, r1, #1
 800f32a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f32e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f332:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f336:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f33a:	ee07 1a90 	vmov	s15, r1
 800f33e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f342:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f346:	ee15 7a10 	vmov	r7, s10
 800f34a:	401f      	ands	r7, r3
 800f34c:	ee06 7a90 	vmov	s13, r7
 800f350:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f354:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f358:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f35c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f360:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f4c8 <__ieee754_powf+0x440>
 800f364:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f4cc <__ieee754_powf+0x444>
 800f368:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f36c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f4d0 <__ieee754_powf+0x448>
 800f370:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f374:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f4a4 <__ieee754_powf+0x41c>
 800f378:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f37c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f4d4 <__ieee754_powf+0x44c>
 800f380:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f384:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f4d8 <__ieee754_powf+0x450>
 800f388:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f38c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f390:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f394:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f398:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f39c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f3a0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f3a4:	eef0 5a67 	vmov.f32	s11, s15
 800f3a8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f3ac:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f3b0:	ee15 1a90 	vmov	r1, s11
 800f3b4:	4019      	ands	r1, r3
 800f3b6:	ee05 1a90 	vmov	s11, r1
 800f3ba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f3be:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f3c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f3ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f3ce:	eeb0 6a67 	vmov.f32	s12, s15
 800f3d2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f3d6:	ee16 1a10 	vmov	r1, s12
 800f3da:	4019      	ands	r1, r3
 800f3dc:	ee06 1a10 	vmov	s12, r1
 800f3e0:	eeb0 7a46 	vmov.f32	s14, s12
 800f3e4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f3e8:	493c      	ldr	r1, [pc, #240]	@ (800f4dc <__ieee754_powf+0x454>)
 800f3ea:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f3ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3f2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f4e0 <__ieee754_powf+0x458>
 800f3f6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f4e4 <__ieee754_powf+0x45c>
 800f3fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3fe:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f4e8 <__ieee754_powf+0x460>
 800f402:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f406:	ed91 7a00 	vldr	s14, [r1]
 800f40a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f40e:	ee07 2a10 	vmov	s14, r2
 800f412:	eef0 6a67 	vmov.f32	s13, s15
 800f416:	4a35      	ldr	r2, [pc, #212]	@ (800f4ec <__ieee754_powf+0x464>)
 800f418:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f41c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f420:	ed92 5a00 	vldr	s10, [r2]
 800f424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f428:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f42c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f430:	ee16 2a90 	vmov	r2, s13
 800f434:	4013      	ands	r3, r2
 800f436:	ee06 3a90 	vmov	s13, r3
 800f43a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f43e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f442:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f44a:	e70f      	b.n	800f26c <__ieee754_powf+0x1e4>
 800f44c:	2601      	movs	r6, #1
 800f44e:	e75d      	b.n	800f30c <__ieee754_powf+0x284>
 800f450:	d152      	bne.n	800f4f8 <__ieee754_powf+0x470>
 800f452:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f4f0 <__ieee754_powf+0x468>
 800f456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f45a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f45e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f466:	f73f af29 	bgt.w	800f2bc <__ieee754_powf+0x234>
 800f46a:	2386      	movs	r3, #134	@ 0x86
 800f46c:	e048      	b.n	800f500 <__ieee754_powf+0x478>
 800f46e:	4a21      	ldr	r2, [pc, #132]	@ (800f4f4 <__ieee754_powf+0x46c>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d907      	bls.n	800f484 <__ieee754_powf+0x3fc>
 800f474:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47c:	bf4c      	ite	mi
 800f47e:	2001      	movmi	r0, #1
 800f480:	2000      	movpl	r0, #0
 800f482:	e6c1      	b.n	800f208 <__ieee754_powf+0x180>
 800f484:	d138      	bne.n	800f4f8 <__ieee754_powf+0x470>
 800f486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f48a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f492:	dbea      	blt.n	800f46a <__ieee754_powf+0x3e2>
 800f494:	e7ee      	b.n	800f474 <__ieee754_powf+0x3ec>
 800f496:	bf00      	nop
 800f498:	00000000 	.word	0x00000000
 800f49c:	3f7ffff3 	.word	0x3f7ffff3
 800f4a0:	3f800007 	.word	0x3f800007
 800f4a4:	3eaaaaab 	.word	0x3eaaaaab
 800f4a8:	3fb8aa3b 	.word	0x3fb8aa3b
 800f4ac:	36eca570 	.word	0x36eca570
 800f4b0:	3fb8aa00 	.word	0x3fb8aa00
 800f4b4:	4b800000 	.word	0x4b800000
 800f4b8:	001cc471 	.word	0x001cc471
 800f4bc:	005db3d6 	.word	0x005db3d6
 800f4c0:	08010078 	.word	0x08010078
 800f4c4:	fffff000 	.word	0xfffff000
 800f4c8:	3e6c3255 	.word	0x3e6c3255
 800f4cc:	3e53f142 	.word	0x3e53f142
 800f4d0:	3e8ba305 	.word	0x3e8ba305
 800f4d4:	3edb6db7 	.word	0x3edb6db7
 800f4d8:	3f19999a 	.word	0x3f19999a
 800f4dc:	08010068 	.word	0x08010068
 800f4e0:	3f76384f 	.word	0x3f76384f
 800f4e4:	3f763800 	.word	0x3f763800
 800f4e8:	369dc3a0 	.word	0x369dc3a0
 800f4ec:	08010070 	.word	0x08010070
 800f4f0:	3338aa3c 	.word	0x3338aa3c
 800f4f4:	43160000 	.word	0x43160000
 800f4f8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f4fc:	d971      	bls.n	800f5e2 <__ieee754_powf+0x55a>
 800f4fe:	15db      	asrs	r3, r3, #23
 800f500:	3b7e      	subs	r3, #126	@ 0x7e
 800f502:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f506:	4118      	asrs	r0, r3
 800f508:	4408      	add	r0, r1
 800f50a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f50e:	4a3c      	ldr	r2, [pc, #240]	@ (800f600 <__ieee754_powf+0x578>)
 800f510:	3b7f      	subs	r3, #127	@ 0x7f
 800f512:	411a      	asrs	r2, r3
 800f514:	4002      	ands	r2, r0
 800f516:	ee07 2a10 	vmov	s14, r2
 800f51a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f51e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f522:	f1c3 0317 	rsb	r3, r3, #23
 800f526:	4118      	asrs	r0, r3
 800f528:	2900      	cmp	r1, #0
 800f52a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f52e:	bfb8      	it	lt
 800f530:	4240      	neglt	r0, r0
 800f532:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f536:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800f604 <__ieee754_powf+0x57c>
 800f53a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800f608 <__ieee754_powf+0x580>
 800f53e:	ee17 3a10 	vmov	r3, s14
 800f542:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f546:	f023 030f 	bic.w	r3, r3, #15
 800f54a:	ee07 3a10 	vmov	s14, r3
 800f54e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f552:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f556:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f55a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800f60c <__ieee754_powf+0x584>
 800f55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f562:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f566:	eef0 6a67 	vmov.f32	s13, s15
 800f56a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f56e:	eef0 5a66 	vmov.f32	s11, s13
 800f572:	eee7 5a46 	vfms.f32	s11, s14, s12
 800f576:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f57a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f57e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800f610 <__ieee754_powf+0x588>
 800f582:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800f614 <__ieee754_powf+0x58c>
 800f586:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f58a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800f618 <__ieee754_powf+0x590>
 800f58e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f592:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800f61c <__ieee754_powf+0x594>
 800f596:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f59a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800f620 <__ieee754_powf+0x598>
 800f59e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f5a2:	eeb0 6a66 	vmov.f32	s12, s13
 800f5a6:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800f5aa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800f5ae:	ee66 5a86 	vmul.f32	s11, s13, s12
 800f5b2:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f5b6:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800f5ba:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800f5be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f5c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f5ca:	ee10 3a10 	vmov	r3, s0
 800f5ce:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f5d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f5d6:	da06      	bge.n	800f5e6 <__ieee754_powf+0x55e>
 800f5d8:	f000 f8fa 	bl	800f7d0 <scalbnf>
 800f5dc:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f5e0:	e56a      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	e7a5      	b.n	800f532 <__ieee754_powf+0x4aa>
 800f5e6:	ee00 3a10 	vmov	s0, r3
 800f5ea:	e7f7      	b.n	800f5dc <__ieee754_powf+0x554>
 800f5ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f5f0:	e562      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f5f2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800f624 <__ieee754_powf+0x59c>
 800f5f6:	e55f      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f5f8:	eeb0 0a48 	vmov.f32	s0, s16
 800f5fc:	e55c      	b.n	800f0b8 <__ieee754_powf+0x30>
 800f5fe:	bf00      	nop
 800f600:	ff800000 	.word	0xff800000
 800f604:	3f317218 	.word	0x3f317218
 800f608:	3f317200 	.word	0x3f317200
 800f60c:	35bfbe8c 	.word	0x35bfbe8c
 800f610:	b5ddea0e 	.word	0xb5ddea0e
 800f614:	3331bb4c 	.word	0x3331bb4c
 800f618:	388ab355 	.word	0x388ab355
 800f61c:	bb360b61 	.word	0xbb360b61
 800f620:	3e2aaaab 	.word	0x3e2aaaab
 800f624:	00000000 	.word	0x00000000

0800f628 <atanf>:
 800f628:	b538      	push	{r3, r4, r5, lr}
 800f62a:	ee10 5a10 	vmov	r5, s0
 800f62e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f632:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800f636:	eef0 7a40 	vmov.f32	s15, s0
 800f63a:	d310      	bcc.n	800f65e <atanf+0x36>
 800f63c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800f640:	d904      	bls.n	800f64c <atanf+0x24>
 800f642:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f646:	eeb0 0a67 	vmov.f32	s0, s15
 800f64a:	bd38      	pop	{r3, r4, r5, pc}
 800f64c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f784 <atanf+0x15c>
 800f650:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f788 <atanf+0x160>
 800f654:	2d00      	cmp	r5, #0
 800f656:	bfc8      	it	gt
 800f658:	eef0 7a47 	vmovgt.f32	s15, s14
 800f65c:	e7f3      	b.n	800f646 <atanf+0x1e>
 800f65e:	4b4b      	ldr	r3, [pc, #300]	@ (800f78c <atanf+0x164>)
 800f660:	429c      	cmp	r4, r3
 800f662:	d810      	bhi.n	800f686 <atanf+0x5e>
 800f664:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800f668:	d20a      	bcs.n	800f680 <atanf+0x58>
 800f66a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f790 <atanf+0x168>
 800f66e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f676:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67e:	dce2      	bgt.n	800f646 <atanf+0x1e>
 800f680:	f04f 33ff 	mov.w	r3, #4294967295
 800f684:	e013      	b.n	800f6ae <atanf+0x86>
 800f686:	f7ff fb62 	bl	800ed4e <fabsf>
 800f68a:	4b42      	ldr	r3, [pc, #264]	@ (800f794 <atanf+0x16c>)
 800f68c:	429c      	cmp	r4, r3
 800f68e:	d84f      	bhi.n	800f730 <atanf+0x108>
 800f690:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800f694:	429c      	cmp	r4, r3
 800f696:	d841      	bhi.n	800f71c <atanf+0xf4>
 800f698:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f69c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f6a0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f6aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f6ae:	1c5a      	adds	r2, r3, #1
 800f6b0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f6b4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800f798 <atanf+0x170>
 800f6b8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800f79c <atanf+0x174>
 800f6bc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800f7a0 <atanf+0x178>
 800f6c0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f6c4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f6c8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f7a4 <atanf+0x17c>
 800f6cc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f6d0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800f7a8 <atanf+0x180>
 800f6d4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f6d8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f7ac <atanf+0x184>
 800f6dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f6e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f7b0 <atanf+0x188>
 800f6e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f6e8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f7b4 <atanf+0x18c>
 800f6ec:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f6f0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f7b8 <atanf+0x190>
 800f6f4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f6f8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800f7bc <atanf+0x194>
 800f6fc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f700:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800f7c0 <atanf+0x198>
 800f704:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f708:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f70c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f710:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f714:	d121      	bne.n	800f75a <atanf+0x132>
 800f716:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f71a:	e794      	b.n	800f646 <atanf+0x1e>
 800f71c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f720:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f724:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f728:	2301      	movs	r3, #1
 800f72a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f72e:	e7be      	b.n	800f6ae <atanf+0x86>
 800f730:	4b24      	ldr	r3, [pc, #144]	@ (800f7c4 <atanf+0x19c>)
 800f732:	429c      	cmp	r4, r3
 800f734:	d80b      	bhi.n	800f74e <atanf+0x126>
 800f736:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f73a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f73e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f742:	2302      	movs	r3, #2
 800f744:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f74c:	e7af      	b.n	800f6ae <atanf+0x86>
 800f74e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f752:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f756:	2303      	movs	r3, #3
 800f758:	e7a9      	b.n	800f6ae <atanf+0x86>
 800f75a:	4a1b      	ldr	r2, [pc, #108]	@ (800f7c8 <atanf+0x1a0>)
 800f75c:	491b      	ldr	r1, [pc, #108]	@ (800f7cc <atanf+0x1a4>)
 800f75e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f762:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f766:	edd3 6a00 	vldr	s13, [r3]
 800f76a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f76e:	2d00      	cmp	r5, #0
 800f770:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f774:	edd2 7a00 	vldr	s15, [r2]
 800f778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f77c:	bfb8      	it	lt
 800f77e:	eef1 7a67 	vneglt.f32	s15, s15
 800f782:	e760      	b.n	800f646 <atanf+0x1e>
 800f784:	bfc90fdb 	.word	0xbfc90fdb
 800f788:	3fc90fdb 	.word	0x3fc90fdb
 800f78c:	3edfffff 	.word	0x3edfffff
 800f790:	7149f2ca 	.word	0x7149f2ca
 800f794:	3f97ffff 	.word	0x3f97ffff
 800f798:	3c8569d7 	.word	0x3c8569d7
 800f79c:	3d4bda59 	.word	0x3d4bda59
 800f7a0:	bd6ef16b 	.word	0xbd6ef16b
 800f7a4:	3d886b35 	.word	0x3d886b35
 800f7a8:	3dba2e6e 	.word	0x3dba2e6e
 800f7ac:	3e124925 	.word	0x3e124925
 800f7b0:	3eaaaaab 	.word	0x3eaaaaab
 800f7b4:	bd15a221 	.word	0xbd15a221
 800f7b8:	bd9d8795 	.word	0xbd9d8795
 800f7bc:	bde38e38 	.word	0xbde38e38
 800f7c0:	be4ccccd 	.word	0xbe4ccccd
 800f7c4:	401bffff 	.word	0x401bffff
 800f7c8:	08010090 	.word	0x08010090
 800f7cc:	08010080 	.word	0x08010080

0800f7d0 <scalbnf>:
 800f7d0:	ee10 3a10 	vmov	r3, s0
 800f7d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f7d8:	d02b      	beq.n	800f832 <scalbnf+0x62>
 800f7da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f7de:	d302      	bcc.n	800f7e6 <scalbnf+0x16>
 800f7e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f7e4:	4770      	bx	lr
 800f7e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f7ea:	d123      	bne.n	800f834 <scalbnf+0x64>
 800f7ec:	4b24      	ldr	r3, [pc, #144]	@ (800f880 <scalbnf+0xb0>)
 800f7ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f884 <scalbnf+0xb4>
 800f7f2:	4298      	cmp	r0, r3
 800f7f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f7f8:	db17      	blt.n	800f82a <scalbnf+0x5a>
 800f7fa:	ee10 3a10 	vmov	r3, s0
 800f7fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f802:	3a19      	subs	r2, #25
 800f804:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f808:	4288      	cmp	r0, r1
 800f80a:	dd15      	ble.n	800f838 <scalbnf+0x68>
 800f80c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f888 <scalbnf+0xb8>
 800f810:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f88c <scalbnf+0xbc>
 800f814:	ee10 3a10 	vmov	r3, s0
 800f818:	eeb0 7a67 	vmov.f32	s14, s15
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	bfb8      	it	lt
 800f820:	eef0 7a66 	vmovlt.f32	s15, s13
 800f824:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f828:	4770      	bx	lr
 800f82a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f890 <scalbnf+0xc0>
 800f82e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f832:	4770      	bx	lr
 800f834:	0dd2      	lsrs	r2, r2, #23
 800f836:	e7e5      	b.n	800f804 <scalbnf+0x34>
 800f838:	4410      	add	r0, r2
 800f83a:	28fe      	cmp	r0, #254	@ 0xfe
 800f83c:	dce6      	bgt.n	800f80c <scalbnf+0x3c>
 800f83e:	2800      	cmp	r0, #0
 800f840:	dd06      	ble.n	800f850 <scalbnf+0x80>
 800f842:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f846:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f84a:	ee00 3a10 	vmov	s0, r3
 800f84e:	4770      	bx	lr
 800f850:	f110 0f16 	cmn.w	r0, #22
 800f854:	da09      	bge.n	800f86a <scalbnf+0x9a>
 800f856:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f890 <scalbnf+0xc0>
 800f85a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f894 <scalbnf+0xc4>
 800f85e:	ee10 3a10 	vmov	r3, s0
 800f862:	eeb0 7a67 	vmov.f32	s14, s15
 800f866:	2b00      	cmp	r3, #0
 800f868:	e7d9      	b.n	800f81e <scalbnf+0x4e>
 800f86a:	3019      	adds	r0, #25
 800f86c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f870:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f874:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f898 <scalbnf+0xc8>
 800f878:	ee07 3a90 	vmov	s15, r3
 800f87c:	e7d7      	b.n	800f82e <scalbnf+0x5e>
 800f87e:	bf00      	nop
 800f880:	ffff3cb0 	.word	0xffff3cb0
 800f884:	4c000000 	.word	0x4c000000
 800f888:	7149f2ca 	.word	0x7149f2ca
 800f88c:	f149f2ca 	.word	0xf149f2ca
 800f890:	0da24260 	.word	0x0da24260
 800f894:	8da24260 	.word	0x8da24260
 800f898:	33000000 	.word	0x33000000

0800f89c <with_errnof>:
 800f89c:	b510      	push	{r4, lr}
 800f89e:	ed2d 8b02 	vpush	{d8}
 800f8a2:	eeb0 8a40 	vmov.f32	s16, s0
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	f7fd fb90 	bl	800cfcc <__errno>
 800f8ac:	eeb0 0a48 	vmov.f32	s0, s16
 800f8b0:	ecbd 8b02 	vpop	{d8}
 800f8b4:	6004      	str	r4, [r0, #0]
 800f8b6:	bd10      	pop	{r4, pc}

0800f8b8 <xflowf>:
 800f8b8:	b130      	cbz	r0, 800f8c8 <xflowf+0x10>
 800f8ba:	eef1 7a40 	vneg.f32	s15, s0
 800f8be:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f8c2:	2022      	movs	r0, #34	@ 0x22
 800f8c4:	f7ff bfea 	b.w	800f89c <with_errnof>
 800f8c8:	eef0 7a40 	vmov.f32	s15, s0
 800f8cc:	e7f7      	b.n	800f8be <xflowf+0x6>
	...

0800f8d0 <__math_uflowf>:
 800f8d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f8d8 <__math_uflowf+0x8>
 800f8d4:	f7ff bff0 	b.w	800f8b8 <xflowf>
 800f8d8:	10000000 	.word	0x10000000

0800f8dc <__math_oflowf>:
 800f8dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f8e4 <__math_oflowf+0x8>
 800f8e0:	f7ff bfea 	b.w	800f8b8 <xflowf>
 800f8e4:	70000000 	.word	0x70000000

0800f8e8 <__ieee754_sqrtf>:
 800f8e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f8ec:	4770      	bx	lr
	...

0800f8f0 <_init>:
 800f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f2:	bf00      	nop
 800f8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8f6:	bc08      	pop	{r3}
 800f8f8:	469e      	mov	lr, r3
 800f8fa:	4770      	bx	lr

0800f8fc <_fini>:
 800f8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fe:	bf00      	nop
 800f900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f902:	bc08      	pop	{r3}
 800f904:	469e      	mov	lr, r3
 800f906:	4770      	bx	lr
